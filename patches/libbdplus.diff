diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..26a2777
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,165 @@
+cmake_minimum_required(VERSION 3.0)
+
+project(libbdplus VERSION 0.1.2 LANGUAGES C)
+
+find_package(libgpg-error 1.2.7 REQUIRED NO_MODULE)
+find_package(libgcrypt 1.7 REQUIRED NO_MODULE)
+find_package(iconv REQUIRED NO_MODULE)
+
+if(MSVC)
+  set(CMAKE_DEBUG_POSTFIX "d")
+endif()
+
+set(SRCS
+  ${CMAKE_CURRENT_SOURCE_DIR}/cmake/libbdplus.def
+  ${CMAKE_CURRENT_SOURCE_DIR}/cmake/bdplus-version.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/cmake/config.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/file/configfile.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/file/dirs_win32.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/file/file_default.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdplus.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdplus_config.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/diff.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/dlx.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/event.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/interface.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/loader.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/segment.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/sha1.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/slot.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/trap.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/trap_helper.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/internal.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/util/logging.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/util/mutex.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/util/strutl.c
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/file/configfile.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/file/dirs.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/file/file.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/file/filesystem.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/file/file_default.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdplus.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdplus_config.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdplus_data.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/diff.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/dlx.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/dlx_internal.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/event.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/interface.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/loader.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/segment.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/sha1.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/slot.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/slot_data.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/trap.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/bdsvm/trap_helper.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/libbdplus/internal.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/util/attributes.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/util/logging.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/util/macro.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/util/mutex.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/util/strutl.h
+)
+
+ADD_LIBRARY(libbdplus SHARED ${SRCS})
+SET_TARGET_PROPERTIES(libbdplus PROPERTIES LINK_FLAGS "/DEF:\"libbdplus.def\"")
+
+target_compile_definitions(libbdplus
+  PRIVATE
+  HAVE_CONFIG_H
+  PKGDATADIR=""
+  _CRT_SECURE_NO_WARNINGS
+  _CRT_NONSTDC_NO_WARNINGS
+  fseeko=_fseeki64
+  inline=__inline
+)
+
+if(WINDOWS_STORE)
+  target_compile_definitions(libbdplus
+    PRIVATE
+      MS_APP
+  )
+endif()
+  
+target_include_directories(libbdplus
+  PRIVATE
+  $<BUILD_INTERFACE:.;cmake;src;src/util;${CMAKE_CURRENT_BINARY_DIR}>
+  INTERFACE
+  $<INSTALL_INTERFACE:include/libbdplus>
+)
+
+target_link_libraries(libbdplus PRIVATE libgpg-error::libgpg-error libgcrypt::libgcrypt iconv::iconv)
+
+set(TEST_SRCS
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/examples/bdplus_test.c
+)
+
+ADD_EXECUTABLE(bdplus_test ${TEST_SRCS})
+target_compile_definitions(bdplus_test
+  PRIVATE
+  HAVE_CONFIG_H
+  _CRT_SECURE_NO_WARNINGS
+  _CRT_NONSTDC_NO_WARNINGS)
+  
+target_include_directories(bdplus_test
+  PRIVATE
+  $<BUILD_INTERFACE:.;cmake;src;${CMAKE_CURRENT_BINARY_DIR}>
+  INTERFACE
+)
+add_dependencies(bdplus_test libbdplus)
+target_link_libraries(bdplus_test PRIVATE libbdplus)
+
+set(DUMP_SRCS
+  ${CMAKE_CURRENT_SOURCE_DIR}/src/examples/convtab_dump.c
+)
+
+ADD_EXECUTABLE(convtab_dump ${DUMP_SRCS})
+target_compile_definitions(convtab_dump
+  PRIVATE
+  HAVE_CONFIG_H
+  _CRT_SECURE_NO_WARNINGS
+  _CRT_NONSTDC_NO_WARNINGS)
+  
+target_include_directories(convtab_dump
+  PRIVATE
+  $<BUILD_INTERFACE:.;cmake;src;${CMAKE_CURRENT_BINARY_DIR}>
+  INTERFACE
+)
+add_dependencies(convtab_dump libbdplus)
+target_link_libraries(convtab_dump PRIVATE libbdplus)
+
+include(CMakePackageConfigHelpers)
+write_basic_package_version_file(
+  ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake
+  VERSION ${PROJECT_VERSION}
+  COMPATIBILITY AnyNewerVersion
+)
+
+install(TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME}
+  RUNTIME DESTINATION bin
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+)
+
+install(FILES src/libbdplus/bdplus.h cmake/bdplus-version.h DESTINATION include/${PROJECT_NAME})
+
+if(MSVC)
+  install(FILES ${PROJECT_BINARY_DIR}/RelWithDebInfo/${PROJECT_NAME}.pdb DESTINATION lib CONFIGURATIONS RelWithDebInfo)
+endif()
+
+install(EXPORT ${PROJECT_NAME}
+  FILE
+    ${PROJECT_NAME}.cmake
+  NAMESPACE
+    ${PROJECT_NAME}::
+  DESTINATION
+    lib/cmake/${PROJECT_NAME}
+)
+
+install(
+  FILES
+    cmake/${PROJECT_NAME}-config.cmake
+    ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake
+  DESTINATION
+    lib/cmake/${PROJECT_NAME}
+)
diff --git a/cmake/bdplus-version.h b/cmake/bdplus-version.h
new file mode 100644
index 0000000..43cc5b3
--- /dev/null
+++ b/cmake/bdplus-version.h
@@ -0,0 +1,37 @@
+/*
+ * This file is part of libbdplus
+ * Copyright (C) 2013 VideoLAN
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library. If not, see
+ * <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef BDPLUS_VERSION_H_
+#define BDPLUS_VERSION_H_
+
+#define BDPLUS_VERSION_CODE(major, minor, micro) \
+    (((major) * 10000) +                         \
+     ((minor) *   100) +                         \
+     ((micro) *     1))
+
+#define BDPLUS_VERSION_MAJOR 0
+#define BDPLUS_VERSION_MINOR 1
+#define BDPLUS_VERSION_MICRO 2
+
+#define BDPLUS_VERSION_STRING "0.1.2"
+
+#define BDPLUS_VERSION \
+    BDPLUS_VERSION_CODE(BDPLUS_VERSION_MAJOR, BDPLUS_VERSION_MINOR, BDPLUS_VERSION_MICRO)
+
+#endif /* BDPLUS_VERSION_H_ */
diff --git a/cmake/config.h b/cmake/config.h
new file mode 100644
index 0000000..8308a7a
--- /dev/null
+++ b/cmake/config.h
@@ -0,0 +1,111 @@
+
+/* Define to 1 if you have the declaration of `strerror_r', and to 0 if you
+   don't. */
+#define HAVE_DECL_STRERROR_R 0
+
+/* Define to 1 if you have the <dirent.h> header file, and it defines `DIR'.
+   */
+/* #undef HAVE_DIRENT_H */
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+/* #undef HAVE_DLFCN_H */
+
+/* Define to 1 if you have the <errno.h> header file. */
+#define HAVE_ERRNO_H 1
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#define HAVE_INTTYPES_H 1
+
+/* Define to 1 to use libaacs with bdplus_test */
+/* #undef HAVE_LIBAACS */
+
+/* Define to 1 if you have the <libgen.h> header file. */
+#define HAVE_LIBGEN_H 1
+
+/* Define to 1 if you have the gpg-error library */
+#define HAVE_LIBGPG_ERROR 1
+
+/* Define to 1 if you have the <linux/cdrom.h> header file. */
+/* #undef HAVE_LINUX_CDROM_H */
+
+/* Define to 1 if you have the <malloc.h> header file. */
+#define HAVE_MALLOC_H 1
+
+/* Define to 1 if you have the <memory.h> header file. */
+#define HAVE_MEMORY_H 1
+
+/* Define to 1 if you have the <mntent.h> header file. */
+/* #undef HAVE_MNTENT_H */
+
+/* Define to 1 if you have the <ndir.h> header file, and it defines `DIR'. */
+/* #undef HAVE_NDIR_H */
+
+/* Define to 1 if you have the <pthread.h> header file. */
+/* #undef HAVE_PTHREAD_H */
+
+/* Define to 1 if you have the <stdarg.h> header file. */
+#define HAVE_STDARG_H 1
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#define HAVE_STDINT_H 1
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#define HAVE_STDLIB_H 1
+
+/* Define to 1 if you have the `strerror_r' function. */
+/* #undef HAVE_STRERROR_R */
+
+/* Define to 1 if you have the <strings.h> header file. */
+/* #undef HAVE_STRINGS_H */
+
+/* Define to 1 if you have the <string.h> header file. */
+#define HAVE_STRING_H 1
+
+/* Define to 1 if `d_type' is a member of `struct dirent'. */
+/* #undef HAVE_STRUCT_DIRENT_D_TYPE */
+
+/* Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR'.
+   */
+/* #undef HAVE_SYS_DIR_H */
+
+/* Define to 1 if you have the <sys/ndir.h> header file, and it defines `DIR'.
+   */
+/* #undef HAVE_SYS_NDIR_H */
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#define HAVE_SYS_STAT_H 1
+
+/* Define to 1 if you have the <sys/time.h> header file. */
+#define HAVE_SYS_TIME_H 1
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#define HAVE_SYS_TYPES_H 1
+
+/* Define to 1 if you have the <time.h> header file. */
+#define HAVE_TIME_H 1
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#define HAVE_UNISTD_H 1
+
+/* Define as the return type of signal handlers (`int' or `void'). */
+#define RETSIGTYPE void
+
+/* Define to 1 if you have the ANSI C header files. */
+#define STDC_HEADERS 1
+
+/* Define to 1 if strerror_r returns char *. */
+/* #undef STRERROR_R_CHAR_P */
+
+#ifdef _M_IX86
+/* Define to '0x0501' for IE 5.01. */
+#define _WIN32_IE 0x0502
+
+/* Define to '0x0500' for Windows XP APIs. */
+#define _WIN32_WINNT 0x0502
+#elif !defined(MS_APP)
+/* Define to '0x0600' for IE 6.0. */
+#define _WIN32_IE 0x0600
+
+/* Define to '0x0600' for Windows Vista APIs. */
+#define _WIN32_WINNT 0x0600
+#endif
diff --git a/cmake/libbdplus-config.cmake b/cmake/libbdplus-config.cmake
new file mode 100644
index 0000000..d491e75
--- /dev/null
+++ b/cmake/libbdplus-config.cmake
@@ -0,0 +1 @@
+include(${CMAKE_CURRENT_LIST_DIR}/libbdplus.cmake)
diff --git a/cmake/libbdplus.def b/cmake/libbdplus.def
new file mode 100644
index 0000000..eba6146
--- /dev/null
+++ b/cmake/libbdplus.def
@@ -0,0 +1,16 @@
+
+EXPORTS
+    bdplus_event
+    bdplus_fixup
+    bdplus_free
+    bdplus_get_code_date
+    bdplus_get_code_gen
+    bdplus_get_version
+    bdplus_init
+    bdplus_m2ts
+    bdplus_m2ts_close
+    bdplus_mmap
+    bdplus_psr
+    bdplus_seek
+    bdplus_set_mk
+    bdplus_start
diff --git a/cmake/sys/time.h b/cmake/sys/time.h
new file mode 100644
index 0000000..51983e9
--- /dev/null
+++ b/cmake/sys/time.h
@@ -0,0 +1,72 @@
+/*
+ * MSVC sys/time.h compatability header.
+ * Copyright (c) 2015 Matthew Oliver
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+
+#ifndef _SMP_SYS_TIME_H_
+#define _SMP_SYS_TIME_H_
+
+#ifndef _MSC_VER
+#   include_next <sys/time.h>
+#else
+
+#include <time.h>
+#include <winsock2.h>
+
+struct timezone
+{
+    int  tz_minuteswest; /* minutes W of Greenwich */
+    int  tz_dsttime;     /* type of dst correction */
+};
+
+static __inline int gettimeofday(struct timeval * tp, struct timezone * tzp)
+{
+    FILETIME    file_time;
+    SYSTEMTIME  system_time;
+    ULARGE_INTEGER ularge;
+    static int tzflag;
+
+    GetSystemTime(&system_time);
+    SystemTimeToFileTime(&system_time, &file_time);
+    ularge.LowPart = file_time.dwLowDateTime;
+    ularge.HighPart = file_time.dwHighDateTime;
+
+    tp->tv_sec = (long) ((ularge.QuadPart - 116444736000000000Ui64) / 10000000L);
+    tp->tv_usec = (long) (system_time.wMilliseconds * 1000);
+    
+    if (NULL != tzp)
+    {
+        if (!tzflag)
+        {
+#ifndef MS_APP
+          _tzset();
+#endif
+          tzflag++;
+        }
+        tzp->tz_minuteswest = _timezone / 60;
+        tzp->tz_dsttime = _daylight;
+    }
+    return 0;
+}
+
+#endif /* _MSC_VER */
+
+#endif /* _SMP_SYS_TIME_H_ */
diff --git a/src/examples/bdplus_test.c b/src/examples/bdplus_test.c
index d4d1328..5ff7d7e 100644
--- a/src/examples/bdplus_test.c
+++ b/src/examples/bdplus_test.c
@@ -27,7 +27,6 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-#include <unistd.h>
 
 #ifdef HAVE_LIBAACS
 #include <libaacs/aacs.h>
diff --git a/src/file/configfile.c b/src/file/configfile.c
index 6462aeb..42a2b08 100644
--- a/src/file/configfile.c
+++ b/src/file/configfile.c
@@ -36,6 +36,9 @@
 
 #ifdef _WIN32
 # define mkdir(p,m) win32_mkdir(p)
+#ifndef S_ISDIR
+# define S_ISDIR(mode)  (((mode) & S_IFMT) == S_IFDIR)
+#endif
 #endif
 
 
diff --git a/src/file/dirs_win32.c b/src/file/dirs_win32.c
index d73796a..9bfa974 100644
--- a/src/file/dirs_win32.c
+++ b/src/file/dirs_win32.c
@@ -51,6 +51,9 @@ char *file_get_config_home(void)
 
 char *file_get_data_home(void)
 {
+#ifdef MS_APP
+	return NULL;
+#else
     wchar_t wdir[MAX_PATH];
 
     /* Get the "Application Data" folder for the user */
@@ -66,6 +69,7 @@ char *file_get_data_home(void)
 
     BD_DEBUG(DBG_FILE, "Can't find user configuration directory !\n");
     return NULL;
+#endif
 }
 
 char *file_get_cache_home(void)
@@ -75,6 +79,9 @@ char *file_get_cache_home(void)
 
 const char *file_get_config_system(const char *dir)
 {
+#ifdef MS_APP
+	return NULL;
+#else
     static char *appdir = NULL;
     wchar_t wdir[MAX_PATH];
 
@@ -103,4 +110,5 @@ const char *file_get_config_system(const char *dir)
     }
 
     return dir;
+#endif
 }
