diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..99da25c
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,212 @@
+cmake_minimum_required(VERSION 3.2)
+
+project(libxml2 VERSION 2.9.4 LANGUAGES C)
+
+option(BUILD_SHARED_LIBS "Build as shared lib instead of static" ON)
+option(WITH_TRIO "Enable TRIO string manipulator" 1)
+option(WITH_THREADS:BOOL "Enable thread safety [no|ctls|native|posix" ON)
+option(WITH_THREAD_ALLOC:BOOL "Thread specific allocators" ON)
+option(WITH_FTP "Enable FTP client" 0)
+option(WITH_HTTP "Enable HTTP client" 0)
+option(WITH_HTML "Enable HTML processor" 1)
+option(WITH_C14N "Enable C14N support" 1)
+option(WITH_CATALOG "Enable catalog support" 1)
+option(WITH_DOCB "Enable DocBook support" 1)
+option(WITH_XPATH "Enable XPath support" 1)
+option(WITH_XPTR "Enable XPointer support" 1)
+option(WITH_XINCLUDE "Enable XInclude support" 1)
+option(WITH_ICONV "Enable iconv support" 1)
+option(WITH_ICU "Enable icu support" 0)
+option(WITH_ISO8859X "Enable ISO8859X support" 0)
+option(WITH_ZLIB "Enable zlib support" 0)
+option(WITH_LZMA "Enable lzma support" 0)
+option(WITH_DEBUG "Enable XML debugging module" 1)
+option(WITH_MEM_DEBUG "Enable memory debugger" 0)
+option(WITH_RUN_DEBUG "Enable memory debugger" 0)
+option(WITH_SCHEMAS "Enable XML schema support" 1)
+option(WITH_SCHEMATRON "Enable schematron support" 1)
+option(WITH_REGEXPS "Enable regular expressions" 1)
+option(WITH_MODULES "Enable module support" 1)
+option(WITH_TREE:BOOL "Enable tree api" 1)
+option(WITH_READER "Enable xmlReader api" 1)
+option(WITH_WRITER "Enable xmlWriter api" 1)
+option(WITH_WALKER "Enable xmlDocWalker api" 1)
+option(WITH_PATTERN "Enable xmlPattern api" 1)
+option(WITH_PUSH "Enable push api" 1)
+option(WITH_VALID "Enable DTD validation support" 1)
+option(WITH_SAX1 "Enable SAX1 api" 1)
+option(WITH_LEGACY "Enable deprecated api's" 0)
+option(WITH_OUTPUT "Enable serialization support" 1)
+option(WITH_PYTHON "Enable Python bindings" 0)
+
+set(VERSION 2.9.4)
+set(LIBXML_VERSION_NUMBER 20904)
+
+include(CheckIncludeFile)
+include(CheckFunctionExists)
+
+CHECK_INCLUDE_FILE(ctype.h HAVE_CTYPE_H)
+CHECK_INCLUDE_FILE(dirent.h HAVE_DIRENT_H)
+CHECK_INCLUDE_FILE(dlfcn.h HAVEN_DLFCN_H)
+CHECK_INCLUDE_FILE(dl.h HAVE_DL_H)
+CHECK_INCLUDE_FILE(errno.h HAVE_ERRNO_H)
+CHECK_INCLUDE_FILE(fcntl.h HAVE_FCNTL_H)
+CHECK_INCLUDE_FILE(ieeefp.h HAVE_IEEEP_H)
+CHECK_INCLUDE_FILE(inttypes.h HAVE_INTTYPES_H)
+CHECK_INCLUDE_FILE(limits.h HAVE_LIMITS_H)
+CHECK_INCLUDE_FILE(malloc.h HAVE_MALLOC_H)
+CHECK_INCLUDE_FILE(math.h HAVE_MATH_H)
+CHECK_INCLUDE_FILE(memory.h HAVE_MEMORY_H)
+
+
+if(WIN32)
+  set(CMAKE_DEBUG_POSTFIX "d")
+endif()
+
+configure_file(
+  config.h.cmake
+  ${CMAKE_CURRENT_BINARY_DIR}/config.h
+)
+add_library(${PROJECT_NAME}
+  xzlib.h
+  buf.h
+  config.h
+  elfgcchack.h
+  enc.h
+  libxml.h
+  save.h
+  timsort.h
+  trio.h
+  triodef.h
+  trionan.h
+  triop.h
+  triostr.h
+  xzlib.c
+  buf.c
+  c14n.c
+  catalog.c
+  chvalid.c
+  debugXML.c
+  dict.c
+  DOCBparser.c
+  encoding.c
+  entities.c
+  error.c
+  globals.c
+  hash.c
+  HTMLparser.c
+  HTMLtree.c
+  legacy.c
+  list.c
+  nanoftp.c
+  nanohttp.c
+  parser.c
+  parserInternals.c
+  pattern.c
+  relaxng.c
+  SAX.c
+  SAX2.c
+  schematron.c
+  threads.c
+  tree.c
+  trio.c
+  trionan.c
+  triostr.c
+  uri.c
+  valid.c
+  xinclude.c
+  xlink.c
+  xmlIO.c
+  xmlmemory.c
+  xmlmodule.c
+  xmlreader.c
+  xmlregexp.c
+  xmlsave.c
+  xmlschemas.c
+  xmlschemastypes.c
+  xmlstring.c
+  xmlunicode.c
+  xmlwriter.c
+  xpath.c
+  xpointer.c
+)
+add_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})
+target_include_directories(
+  libxml2 PRIVATE
+  $<BUILD_INTERFACE:.;include;include/libxml;${CMAKE_CURRENT_BINARY_DIR}/include>
+  INTERFACE
+  $<INSTALL_INTERFACE:include>
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include/libxml>
+)
+target_compile_definitions(libxml2
+  PRIVATE
+  _CRT_SECURE_NO_WARNINGS
+  _CRT_STDC_NO_DEPRECATE)
+
+if(WINDOWS_STORE)
+  target_compile_definitions(libxml2
+    PRIVATE
+      MS_APP
+  )
+endif()
+if(BUILD_SHARED_LIBS AND MSVC)
+  target_link_libraries(libxml2 PRIVATE ws2_32.lib)
+endif()
+
+if(WITH_ICONV)
+  find_package(iconv 1.14 REQUIRED NO_MODULE)
+  target_link_libraries(libxml2 PRIVATE iconv::iconv)
+endif()
+
+include(CMakePackageConfigHelpers)
+write_basic_package_version_file(
+  ${CMAKE_CURRENT_BINARY_DIR}/libxml2-config-version.cmake
+  VERSION ${PROJECT_VERSION}
+  COMPATIBILITY AnyNewerVersion
+)
+
+install(TARGETS libxml2 EXPORT libxml2
+  RUNTIME DESTINATION bin
+  ARCHIVE DESTINATION lib
+  LIBRARY DESTINATION lib)
+
+
+install(DIRECTORY
+  ${CMAKE_CURRENT_SOURCE_DIR}/include/libxml
+  DESTINATION include
+  FILES_MATCHING PATTERN "*.h")
+
+install(EXPORT libxml2
+  FILE
+    libxml2.cmake
+  NAMESPACE
+    libxml2::
+  DESTINATION
+    lib/cmake/libxml2
+)
+install(
+  FILES
+    cmake/libxml2-config.cmake
+    ${CMAKE_CURRENT_BINARY_DIR}/libxml2-config-version.cmake
+  DESTINATION
+    lib/cmake/libxml2
+)
+
+export(TARGETS libxml2
+  FILE libxml2.cmake
+  NAMESPACE libxml2::
+)
+
+if(MSVC)
+  set_target_properties(libxml2
+    PROPERTIES
+      COMPILE_PDB_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}
+      COMPILE_PDB_NAME libxml2
+      COMPILE_PDB_NAME_DEBUG libxml2d
+  )
+  install(FILES
+    $<TARGET_PDB_FILE:libxml2>
+    DESTINATION lib
+  )
+endif()
\ No newline at end of file
diff --git a/catalog.c b/catalog.c
index 6dfdfbb..62093e7 100644
--- a/catalog.c
+++ b/catalog.c
@@ -41,6 +41,11 @@
 #include <libxml/threads.h>
 #include <libxml/globals.h>
 
+#ifndef WIN32_LEAN_AND_MEAN
+#define WIN32_LEAN_AND_MEAN
+#endif
+#include <Windows.h>
+
 #include "buf.h"
 
 #define MAX_DELEGATE	50
@@ -85,8 +90,6 @@ static char XML_XML_DEFAULT_CATALOG[256] = "file:///etc/xml/catalog";
 #define GetModuleFileNameA GetModuleFileName
 #else
 #if !defined(_WINDOWS_)
-void* __stdcall GetModuleHandleA(const char*);
-unsigned long __stdcall GetModuleFileNameA(void*, char*, unsigned long);
 #endif
 #endif
 #endif
@@ -3093,6 +3096,30 @@ xmlInitializeCatalogData(void) {
 
     xmlCatalogInitialized = 1;
 }
+
+static char *
+fromW(const wchar_t *u16String)
+{
+    char *string = NULL;
+
+    if (u16String) {
+        int wLen =
+            WideCharToMultiByte(CP_UTF8, MB_ERR_INVALID_CHARS, u16String,
+                                -1, NULL, 0, NULL, NULL);
+        if (wLen) {
+            string = xmlMalloc(wLen);
+            if (string) {
+                if (WideCharToMultiByte
+                    (CP_UTF8, 0, u16String, -1, string, wLen, NULL, NULL) == 0) {
+                    xmlFree(string);
+                    string = NULL;
+                }
+            }
+        }
+    }
+
+    return string;
+}
 /**
  * xmlInitializeCatalog:
  *
@@ -3122,27 +3149,24 @@ xmlInitializeCatalog(void) {
 	if (catalogs == NULL)
 #if defined(_WIN32) && defined(_MSC_VER)
     {
-		void* hmodule;
-		hmodule = GetModuleHandleA("libxml2.dll");
-		if (hmodule == NULL)
-			hmodule = GetModuleHandleA(NULL);
-		if (hmodule != NULL) {
-			char buf[256];
-			unsigned long len = GetModuleFileNameA(hmodule, buf, 255);
-			if (len != 0) {
-				char* p = &(buf[len]);
-				while (*p != '\\' && p > buf)
-					p--;
-				if (p != buf) {
-					xmlChar* uri;
-					strncpy(p, "\\..\\etc\\catalog", 255 - (p - buf));
-					uri = xmlCanonicPath((const xmlChar*)buf);
-					if (uri != NULL) {
-						strncpy(XML_XML_DEFAULT_CATALOG, uri, 255);
-						xmlFree(uri);
-					}
+		char wbuf[256];
+		unsigned long len = GetModuleFileNameW(NULL, wbuf, 255);
+		if (len != 0) {
+			char *buf = fromW(wbuf);
+			len = strlen(buf);
+			char* p = &(buf[len]);
+			while (*p != '\\' && p > buf)
+				p--;
+			if (p != buf) {
+				xmlChar* uri;
+				strncpy(p, "\\..\\etc\\catalog", 255 - (p - buf));
+				uri = xmlCanonicPath((const xmlChar*)buf);
+				if (uri != NULL) {
+					strncpy(XML_XML_DEFAULT_CATALOG, uri, 255);
+					xmlFree(uri);
 				}
 			}
+			xmlFree(buf);
 		}
 		catalogs = XML_XML_DEFAULT_CATALOG;
     }
diff --git a/cmake/libxml2-config.cmake b/cmake/libxml2-config.cmake
new file mode 100644
index 0000000..2586974
--- /dev/null
+++ b/cmake/libxml2-config.cmake
@@ -0,0 +1 @@
+include(${CMAKE_CURRENT_LIST_DIR}/libxml2.cmake)
\ No newline at end of file
diff --git a/config.h.cmake b/config.h.cmake
new file mode 100644
index 0000000..426a580
--- /dev/null
+++ b/config.h.cmake
@@ -0,0 +1,335 @@
+/* config.h.in.  Generated from configure.ac by autoheader.  */
+
+/* Type cast for the gethostbyname() argument */
+#cmakedefine GETHOSTBYNAME_ARG_CAST
+
+/* Define to 1 if you have the <ansidecl.h> header file. */
+#cmakedefine HAVE_ANSIDECL_H
+
+/* Define to 1 if you have the <arpa/inet.h> header file. */
+#cmakedefine HAVE_ARPA_INET_H
+
+/* Define to 1 if you have the <arpa/nameser.h> header file. */
+#cmakedefine HAVE_ARPA_NAMESER_H
+
+/* Whether struct sockaddr::__ss_family exists */
+#cmakedefine HAVE_BROKEN_SS_FAMILY
+
+/* Define to 1 if you have the `class' function. */
+#cmakedefine HAVE_CLASS
+
+/* Define to 1 if you have the <sys/dir.h> header file, and it defines `DIR'.
+   */
+#cmakedefine HAVE_SYS_DIR_H
+
+/* Define to 1 if you have the <sys/mman.h> header file. */
+#cmakedefine HAVE_SYS_MMAN_H
+
+/* Define to 1 if you have the <sys/ndir.h> header file, and it defines `DIR'.
+   */
+#cmakedefine HAVE_SYS_NDIR_H
+
+/* Define to 1 if you have the <sys/select.h> header file. */
+#cmakedefine HAVE_SYS_SELECT_H
+
+/* Define to 1 if you have the <sys/socket.h> header file. */
+#cmakedefine HAVE_SYS_SOCKET_H
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#cmakedefine HAVE_SYS_STAT_H
+
+/* Define to 1 if you have the <sys/timeb.h> header file. */
+#cmakedefine HAVE_SYS_TIMEB_H
+
+/* Define to 1 if you have the <sys/time.h> header file. */
+#cmakedefine HAVE_SYS_TIME_H
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#cmakedefine HAVE_SYS_TYPES_H
+
+/* Define to 1 if you have the <time.h> header file. */
+#cmakedefine HAVE_TIME_H
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#cmakedefine HAVE_UNISTD_H
+/* Define to 1 if you have the <ctype.h> header file. */
+#cmakedefine HAVE_CTYPE_H
+
+/* Define to 1 if you have the <dirent.h> header file. */
+#cmakedefine HAVE_DIRENT_H
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#cmakedefine HAVE_DLFCN_H
+
+/* Define to 1 if you have the <limits.h> header file. */
+#cmakedefine HAVE_LIMITS_H
+
+/* Define to 1 if you have the `localtime' function. */
+#cmakedefine HAVE_LOCALTIME
+
+/* Define to 1 if you have the <lzma.h> header file. */
+#cmakedefine HAVE_LZMA_H
+
+/* Define to 1 if you have the <malloc.h> header file. */
+#cmakedefine HAVE_MALLOC_H
+
+/* Define to 1 if you have the <math.h> header file. */
+#cmakedefine HAVE_MATH_H
+
+/* Define to 1 if you have the <memory.h> header file. */
+#cmakedefine HAVE_MEMORY_H
+
+/* Define to 1 if you have the <dl.h> header file. */
+#cmakedefine HAVE_DL_H
+
+/* Define to 1 if you have the <errno.h> header file. */
+#cmakedefine HAVE_ERRNO_H
+
+/* Define to 1 if you have the <fcntl.h> header file. */
+#cmakedefine HAVE_FCNTL_H
+
+/* Define to 1 if you have the <fp_class.h> header file. */
+#cmakedefine HAVE_FP_CLASS_H
+
+/* Define to 1 if you have the <float.h> header file. */
+#cmakedefine HAVE_FLOAT_H
+
+/* Define to 1 if you have the <ieeefp.h> header file. */
+#cmakedefine HAVE_IEEEFP_H
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#cmakedefine HAVE_INTTYPES_H
+
+/* Define to 1 if you have the <nan.h> header file. */
+#cmakedefine HAVE_NAN_H
+
+/* Define to 1 if you have the <ndir.h> header file, and it defines `DIR'. */
+#cmakedefine HAVE_NDIR_H
+
+/* Define to 1 if you have the <netdb.h> header file. */
+#cmakedefine HAVE_NETDB_H
+
+/* Define to 1 if you have the <netinet/in.h> header file. */
+#cmakedefine HAVE_NETINET_IN_H
+
+/* Define to 1 if you have the <poll.h> header file. */
+#cmakedefine HAVE_POLL_H
+
+/* Define to 1 if you have the <stdarg.h> header file. */
+#cmakedefine HAVE_STDARG_H
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#cmakedefine HAVE_STDINT_H
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#cmakedefine HAVE_STDLIB_H
+
+/* Define to 1 if you have the <strings.h> header file. */
+#cmakedefine HAVE_STRINGS_H
+
+/* Define to 1 if you have the <string.h> header file. */
+#cmakedefine HAVE_STRING_H
+
+/* Define to 1 if you have the ANSI C header files. */
+#cmakedefine STDC_HEADERS
+
+/* Define to 1 if you have the <resolv.h> header file. */
+#cmakedefine HAVE_RESOLV_H
+
+/* Define to 1 if you have the <signal.h> header file. */
+#cmakedefine HAVE_SIGNAL_H
+
+/* Define to 1 if you have the `finite' function. */
+#cmakedefine HAVE_FINITE
+
+/* Define to 1 if you have the `fpclass' function. */
+#cmakedefine HAVE_FPCLASS
+
+/* Define to 1 if you have the `fprintf' function. */
+#cmakedefine HAVE_FPRINTF
+
+/* Define to 1 if you have the `fp_class' function. */
+#cmakedefine HAVE_FP_CLASS
+
+/* Have dlopen based dso */
+#cmakedefine HAVE_DLOPEN
+
+/* Define to 1 if you have the `ftime' function. */
+#cmakedefine HAVE_FTIME
+
+/* Define to 1 if you have the `time' function. */
+#cmakedefine HAVE_TIME
+
+/* Define if getaddrinfo is there */
+#cmakedefine HAVE_GETADDRINFO
+
+/* Define to 1 if you have the `gettimeofday' function. */
+#cmakedefine HAVE_GETTIMEOFDAY
+
+/* Define to 1 if you have the `isascii' function. */
+#cmakedefine HAVE_ISASCII
+
+/* Define if isinf is there */
+#cmakedefine HAVE_ISINF
+
+/* Define if isnan is there */
+#cmakedefine HAVE_ISNAN
+
+/* Define to 1 if you have the `isnand' function. */
+#cmakedefine HAVE_ISNAND
+
+/* Define if history library is there (-lhistory) */
+#cmakedefine HAVE_LIBHISTORY
+
+/* Have compression library */
+#cmakedefine HAVE_LIBLZMA
+
+/* Define if pthread library is there (-lpthread) */
+#cmakedefine HAVE_LIBPTHREAD
+
+/* Define if readline library is there (-lreadline) */
+#cmakedefine HAVE_LIBREADLINE
+
+/* Have compression library */
+#cmakedefine HAVE_LIBZ
+
+
+/* Define to 1 if you have the `mmap' function. */
+#cmakedefine HAVE_MMAP
+
+/* Define to 1 if you have the `munmap' function. */
+#cmakedefine HAVE_MUNMAP
+
+/* mmap() is no good without munmap() */
+#if defined(HAVE_MMAP) && !defined(HAVE_MUNMAP)
+#  undef /**/ HAVE_MMAP
+#endif
+
+/* Define to 1 if you have the `printf' function. */
+#cmakedefine HAVE_PRINTF
+
+/* Define if <pthread.h> is there */
+#cmakedefine HAVE_PTHREAD_H
+
+/* Define to 1 if you have the `putenv' function. */
+#cmakedefine HAVE_PUTENV
+
+/* Define to 1 if you have the `rand' function. */
+#cmakedefine HAVE_RAND
+
+/* Define to 1 if you have the `rand_r' function. */
+#cmakedefine HAVE_RAND_R
+
+/* Have shl_load based dso */
+#cmakedefine HAVE_SHLLOAD
+
+/* Define to 1 if you have the `signal' function. */
+#cmakedefine HAVE_SIGNAL
+
+/* Define to 1 if you have the `snprintf' function. */
+#cmakedefine HAVE_SNPRINTF
+
+/* Define to 1 if you have the `sprintf' function. */
+#cmakedefine HAVE_SPRINTF
+
+/* Define to 1 if you have the `srand' function. */
+#cmakedefine HAVE_SRAND
+
+/* Define to 1 if you have the `sscanf' function. */
+#cmakedefine HAVE_SSCANF
+
+/* Define to 1 if you have the `stat' function. */
+#cmakedefine HAVE_STAT
+
+
+/* Define to 1 if you have the `strdup' function. */
+#cmakedefine HAVE_STRDUP
+
+/* Define to 1 if you have the `strerror' function. */
+#cmakedefine HAVE_STRERROR
+
+/* Define to 1 if you have the `strftime' function. */
+#cmakedefine HAVE_STRFTIME
+
+
+/* Define to 1 if you have the `strndup' function. */
+#cmakedefine HAVE_STRNDUP
+
+
+/* Whether va_copy() is available */
+#cmakedefine HAVE_VA_COPY
+
+/* Define to 1 if you have the `vfprintf' function. */
+#cmakedefine HAVE_VFPRINTF
+
+/* Define to 1 if you have the `vsnprintf' function. */
+#cmakedefine HAVE_VSNPRINTF
+
+/* Define to 1 if you have the `vsprintf' function. */
+#cmakedefine HAVE_VSPRINTF
+
+/* Define to 1 if you have the <zlib.h> header file. */
+#cmakedefine HAVE_ZLIB_H
+
+/* Define to 1 if you have the `_stat' function. */
+#cmakedefine HAVE__STAT
+
+/* Whether __va_copy() is available */
+#cmakedefine HAVE___VA_COPY
+
+/* Define as const if the declaration of iconv() needs const. */
+#cmakedefine ICONV_CONST
+
+/* Define to the sub-directory where libtool stores uninstalled libraries. */
+#cmakedefine LT_OBJDIR
+
+/* Name of package */
+#cmakedefine PACKAGE
+
+/* Define to the address where bug reports for this package should be sent. */
+#cmakedefine PACKAGE_BUGREPORT
+
+/* Define to the full name of this package. */
+#cmakedefine PACKAGE_NAME
+
+/* Define to the full name and version of this package. */
+#cmakedefine PACKAGE_STRING
+
+/* Define to the one symbol short name of this package. */
+#cmakedefine PACKAGE_TARNAME
+
+/* Define to the home page for this package. */
+#cmakedefine PACKAGE_URL
+
+/* Define to the version of this package. */
+#cmakedefine PACKAGE_VERSION
+
+/* Type cast for the send() function 2nd arg */
+#cmakedefine SEND_ARG2_CAST
+
+
+/* Support for IPv6 */
+#cmakedefine SUPPORT_IP6
+
+/* Define if va_list is an array type */
+#cmakedefine VA_LIST_IS_ARRAY
+
+/* Version number of package */
+#cmakedefine VERSION
+
+/* Determine what socket length (socklen_t) data type is */
+#cmakedefine XML_SOCKLEN_T
+
+/* Define for Solaris 2.5.1 so the uint32_t typedef from <sys/synch.h>,
+   <pthread.h>, or <semaphore.h> is not used. If the typedef were allowed, the
+   #define below would cause a syntax error. */
+#cmakedefine _UINT32_T
+
+/* Using the Win32 Socket implementation */
+#cmakedefine _WINSOCKAPI_
+
+/* ss_family is not defined here, use __ss_family instead */
+#cmakedefine ss_family
+
+/* Define to the type of an unsigned integer type of width exactly 32 bits if
+   such a type exists and the standard includes do not define it. */
diff --git a/encoding.c b/encoding.c
index e49c7f8..91c4b86 100644
--- a/encoding.c
+++ b/encoding.c
@@ -1802,7 +1802,7 @@ xmlIconvWrapper(iconv_t cd, unsigned char *out, int *outlen,
     }
     icv_inlen = *inlen;
     icv_outlen = *outlen;
-    ret = iconv(cd, (ICONV_CONST char **) &icv_in, &icv_inlen, &icv_out, &icv_outlen);
+    ret = iconv(cd, (char **) &icv_in, &icv_inlen, &icv_out, &icv_outlen);
     *inlen -= icv_inlen;
     *outlen -= icv_outlen;
     if ((icv_inlen != 0) || (ret == -1)) {
diff --git a/include/libxml/xmlversion.h b/include/libxml/xmlversion.h
index 59ba74f..7d69c18 100644
--- a/include/libxml/xmlversion.h
+++ b/include/libxml/xmlversion.h
@@ -174,7 +174,7 @@ XMLPUBFUN void XMLCALL xmlCheckVersion(int version);
  *
  * Whether the FTP support is configured in
  */
-#if 1
+#if 0
 #define LIBXML_FTP_ENABLED
 #endif
 
@@ -183,7 +183,7 @@ XMLPUBFUN void XMLCALL xmlCheckVersion(int version);
  *
  * Whether the HTTP support is configured in
  */
-#if 1
+#if 0
 #define LIBXML_HTTP_ENABLED
 #endif
 
@@ -388,7 +388,7 @@ XMLPUBFUN void XMLCALL xmlCheckVersion(int version);
  *
  * the string suffix used by dynamic modules (usually shared libraries)
  */
-#define LIBXML_MODULE_EXTENSION ".so" 
+#define LIBXML_MODULE_EXTENSION ".dll" 
 #endif
 
 /**
@@ -396,7 +396,7 @@ XMLPUBFUN void XMLCALL xmlCheckVersion(int version);
  *
  * Whether the Zlib support is compiled in
  */
-#if 1
+#if 0
 #define LIBXML_ZLIB_ENABLED
 #endif
 
@@ -405,7 +405,7 @@ XMLPUBFUN void XMLCALL xmlCheckVersion(int version);
  *
  * Whether the Lzma support is compiled in
  */
-#if 1
+#if 0
 #define LIBXML_LZMA_ENABLED
 #endif
 
diff --git a/triostr.c b/triostr.c
index 123bbeb..ac9a84f 100644
--- a/triostr.c
+++ b/triostr.c
@@ -78,7 +78,7 @@
 # if defined(_WIN32_WCE)
 #  define strcasecmp(x,y) _stricmp(x,y)
 # else
-#  define strcasecmp(x,y) strcmpi(x,y)
+#  define strcasecmp(x,y) _strcmpi(x,y)
 # endif
 #elif defined(TRIO_PLATFORM_OS400)
 # define USE_STRCASECMP
diff --git a/xmlIO.c b/xmlIO.c
index 1a79c09..d3168df 100644
--- a/xmlIO.c
+++ b/xmlIO.c
@@ -726,26 +726,15 @@ static void
 xmlInitPlatformSpecificIo(void)
 {
     static int xmlPlatformIoInitialized = 0;
-    OSVERSIONINFO osvi;
 
     if(xmlPlatformIoInitialized)
       return;
 
-    osvi.dwOSVersionInfoSize = sizeof(osvi);
-
-    if(GetVersionEx(&osvi) && (osvi.dwPlatformId == VER_PLATFORM_WIN32_NT)) {
-      xmlWrapStat = xmlWrapStatUtf8;
-      xmlWrapOpen = xmlWrapOpenUtf8;
+    xmlWrapStat = xmlWrapStatUtf8;
+    xmlWrapOpen = xmlWrapOpenUtf8;
 #ifdef HAVE_ZLIB_H
-      xmlWrapGzOpen = xmlWrapGzOpenUtf8;
+    xmlWrapGzOpen = xmlWrapGzOpenUtf8;
 #endif
-    } else {
-      xmlWrapStat = xmlWrapStatNative;
-      xmlWrapOpen = xmlWrapOpenNative;
-#ifdef HAVE_ZLIB_H
-      xmlWrapGzOpen = gzopen;
-#endif
-    }
 
     xmlPlatformIoInitialized = 1;
     return;
diff --git a/xmlmodule.c b/xmlmodule.c
index 50ed666..1c86b4f 100644
--- a/xmlmodule.c
+++ b/xmlmodule.c
@@ -308,7 +308,11 @@ xmlModulePlatformSymbol(void *handle, const char *name, void **symbol)
 static void *
 xmlModulePlatformOpen(const char *name)
 {
+#ifdef MS_APP
+	return NULL;
+#else
     return LoadLibraryA(name);
+#endif
 }
 
 /*
diff --git a/xpath.c b/xpath.c
index 113bce6..136635c 100644
--- a/xpath.c
+++ b/xpath.c
@@ -55,6 +55,8 @@
 #include <libxml/pattern.h>
 #endif
 
+#include <trionan.h>
+
 #include "buf.h"
 
 #ifdef LIBXML_PATTERN_ENABLED
@@ -473,7 +475,6 @@ int wrap_cmp( xmlNodePtr x, xmlNodePtr y );
 #ifndef TRIO_REPLACE_STDIO
 #define TRIO_PUBLIC static
 #endif
-#include "trionan.c"
 
 /*
  * The lack of portability of this section of the libc is annoying !
