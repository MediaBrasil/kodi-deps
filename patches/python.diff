diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000000..8b33692bef
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,834 @@
+cmake_minimum_required(VERSION 3.10.0)
+
+project(python VERSION 3.7.5 LANGUAGES C CXX ASM)
+enable_language(ASM_MASM)
+
+find_package(zlib NO_MODULE REQUIRED)
+find_package(expat 2.2.9 NO_MODULE REQUIRED)
+find_package(openssl 1.1.1 NO_MODULE REQUIRED)
+find_package(bzip2 NO_MODULE REQUIRED)
+find_package(libffi NO_MODULE REQUIRED)
+find_package(xz NO_MODULE REQUIRED)
+find_package(sqlite3 NO_MODULE REQUIRED)
+
+add_library(pythoncore SHARED
+    Include/abstract.h
+    Include/accu.h
+    Include/asdl.h
+    Include/ast.h
+    Include/bitset.h
+    Include/boolobject.h
+    Include/bytearrayobject.h
+    Include/bytes_methods.h
+    Include/bytesobject.h
+    Include/cellobject.h
+    Include/ceval.h
+    Include/classobject.h
+    Include/code.h
+    Include/codecs.h
+    Include/compile.h
+    Include/complexobject.h
+    Include/context.h
+    Include/datetime.h
+    Include/descrobject.h
+    Include/dictobject.h
+    Include/dtoa.h
+    Include/dynamic_annotations.h
+    Include/enumobject.h
+    Include/errcode.h
+    Include/eval.h
+    Include/fileobject.h
+    Include/fileutils.h
+    Include/floatobject.h
+    Include/frameobject.h
+    Include/funcobject.h
+    Include/genobject.h
+    Include/graminit.h
+    Include/grammar.h
+    Include/import.h
+    Include/internal/ceval.h
+    Include/internal/condvar.h
+    Include/internal/context.h
+    Include/internal/gil.h
+    Include/internal/hamt.h
+    Include/internal/mem.h
+    Include/internal/pygetopt.h
+    Include/internal/pystate.h
+    Include/internal/warnings.h
+    Include/intrcheck.h
+    Include/iterobject.h
+    Include/listobject.h
+    Include/longintrepr.h
+    Include/longobject.h
+    Include/marshal.h
+    Include/memoryobject.h
+    Include/metagrammar.h
+    Include/methodobject.h
+    Include/modsupport.h
+    Include/moduleobject.h
+    Include/namespaceobject.h
+    Include/node.h
+    Include/object.h
+    Include/objimpl.h
+    Include/odictobject.h
+    Include/opcode.h
+    Include/osdefs.h
+    Include/osmodule.h
+    Include/parsetok.h
+    Include/patchlevel.h
+    Include/pgen.h
+    Include/pgenheaders.h
+    Include/py_curses.h
+    Include/pyarena.h
+    Include/pycapsule.h
+    Include/pyctype.h
+    Include/pydebug.h
+    Include/pyerrors.h
+    Include/pyexpat.h
+    Include/pyfpe.h
+    Include/pyhash.h
+    Include/pylifecycle.h
+    Include/pymacro.h
+    Include/pymath.h
+    Include/pymem.h
+    Include/pyport.h
+    Include/pystate.h
+    Include/pystrcmp.h
+    Include/pystrhex.h
+    Include/pystrtod.h
+    Include/Python-ast.h
+    Include/Python.h
+    Include/pythonrun.h
+    Include/pythread.h
+    Include/pytime.h
+    Include/rangeobject.h
+    Include/setobject.h
+    Include/sliceobject.h
+    Include/structmember.h
+    Include/structseq.h
+    Include/symtable.h
+    Include/sysmodule.h
+    Include/token.h
+    Include/traceback.h
+    Include/tupleobject.h
+    Include/ucnhash.h
+    Include/unicodeobject.h
+    Include/weakrefobject.h
+    Modules/_abc.c
+    Modules/_bisectmodule.c
+    Modules/_blake2/blake2b_impl.c
+    Modules/_blake2/blake2module.c
+    Modules/_blake2/blake2s_impl.c
+    Modules/_codecsmodule.c
+    Modules/_collectionsmodule.c
+    Modules/_contextvarsmodule.c
+    Modules/_csv.c
+    Modules/_datetimemodule.c
+    Modules/_functoolsmodule.c
+    Modules/_heapqmodule.c
+    Modules/_io/_iomodule.c
+    Modules/_io/_iomodule.h
+    Modules/_io/bufferedio.c
+    Modules/_io/bytesio.c
+    Modules/_io/fileio.c
+    Modules/_io/iobase.c
+    Modules/_io/stringio.c
+    Modules/_io/textio.c
+    Modules/_io/winconsoleio.c
+    Modules/_json.c
+    Modules/_localemodule.c
+    Modules/_lsprof.c
+    Modules/_math.c
+    Modules/_math.h
+    Modules/_opcode.c
+    Modules/_operator.c
+    Modules/_pickle.c
+    Modules/_randommodule.c
+    Modules/_sha3/sha3module.c
+    Modules/_sre.c
+    Modules/_stat.c
+    Modules/_struct.c
+    Modules/_threadmodule.c
+    Modules/_tracemalloc.c
+    Modules/_weakref.c
+    Modules/_winapi.c
+    Modules/arraymodule.c
+    Modules/atexitmodule.c
+    Modules/audioop.c
+    Modules/binascii.c
+    Modules/cjkcodecs/_codecs_cn.c
+    Modules/cjkcodecs/_codecs_hk.c
+    Modules/cjkcodecs/_codecs_iso2022.c
+    Modules/cjkcodecs/_codecs_jp.c
+    Modules/cjkcodecs/_codecs_kr.c
+    Modules/cjkcodecs/_codecs_tw.c
+    Modules/cjkcodecs/alg_jisx0201.h
+    Modules/cjkcodecs/cjkcodecs.h
+    Modules/cjkcodecs/emu_jisx0213_2000.h
+    Modules/cjkcodecs/mappings_cn.h
+    Modules/cjkcodecs/mappings_hk.h
+    Modules/cjkcodecs/mappings_jisx0213_pair.h
+    Modules/cjkcodecs/mappings_jp.h
+    Modules/cjkcodecs/mappings_kr.h
+    Modules/cjkcodecs/mappings_tw.h
+    Modules/cjkcodecs/multibytecodec.c
+    Modules/cjkcodecs/multibytecodec.h
+    Modules/cmathmodule.c
+    Modules/errnomodule.c
+    Modules/faulthandler.c
+    Modules/gcmodule.c
+    Modules/getbuildinfo.c
+    Modules/hashtable.c
+    Modules/hashtable.h
+    Modules/itertoolsmodule.c
+    Modules/main.c
+    Modules/mathmodule.c
+    Modules/md5module.c
+    Modules/mmapmodule.c
+    Modules/parsermodule.c
+    Modules/posixmodule.c
+    Modules/rotatingtree.c
+    Modules/rotatingtree.h
+    Modules/sha1module.c
+    Modules/sha256module.c
+    Modules/sha512module.c
+    Modules/signalmodule.c
+    Modules/sre_constants.h
+    Modules/sre_lib.h
+    Modules/sre.h
+    Modules/symtablemodule.c
+    Modules/timemodule.c
+    Modules/xxsubtype.c
+    Modules/zipimport.c
+    Modules/zlibmodule.c
+    Objects/abstract.c
+    Objects/accu.c
+    Objects/boolobject.c
+    Objects/bytearrayobject.c
+    Objects/bytes_methods.c
+    Objects/bytesobject.c
+    Objects/call.c
+    Objects/capsule.c
+    Objects/cellobject.c
+    Objects/classobject.c
+    Objects/codeobject.c
+    Objects/complexobject.c
+    Objects/descrobject.c
+    Objects/dictobject.c
+    Objects/enumobject.c
+    Objects/exceptions.c
+    Objects/fileobject.c
+    Objects/floatobject.c
+    Objects/frameobject.c
+    Objects/funcobject.c
+    Objects/genobject.c
+    Objects/iterobject.c
+    Objects/listobject.c
+    Objects/longobject.c
+    Objects/memoryobject.c
+    Objects/methodobject.c
+    Objects/moduleobject.c
+    Objects/namespaceobject.c
+    Objects/object.c
+    Objects/obmalloc.c
+    Objects/odictobject.c
+    Objects/rangeobject.c
+    Objects/setobject.c
+    Objects/sliceobject.c
+    Objects/stringlib/count.h
+    Objects/stringlib/fastsearch.h
+    Objects/stringlib/find.h
+    Objects/stringlib/partition.h
+    Objects/stringlib/replace.h
+    Objects/stringlib/split.h
+    Objects/structseq.c
+    Objects/tupleobject.c
+    Objects/typeobject.c
+    Objects/unicodectype.c
+    Objects/unicodeobject.c
+    Objects/unicodetype_db.h
+    Objects/weakrefobject.c
+    Parser/acceler.c
+    Parser/bitset.c
+    Parser/firstsets.c
+    Parser/grammar.c
+    Parser/grammar1.c
+    Parser/listnode.c
+    Parser/metagrammar.c
+    Parser/myreadline.c
+    Parser/node.c
+    Parser/parser.c
+    Parser/parser.h
+    Parser/parsetok.c
+    Parser/tokenizer.c
+    Parser/tokenizer.h
+    PC/config.c
+    PC/dl_nt.c
+    PC/errmap.h
+    PC/getpathp.c
+    PC/invalid_parameter_handler.c
+    PC/msvcrtmodule.c
+    PC/pyconfig.h
+    PC/winreg.c
+    Python/_warnings.c
+    Python/asdl.c
+    Python/ast_opt.c
+    Python/ast_unparse.c
+    Python/ast.c
+    Python/bltinmodule.c
+    Python/bootstrap_hash.c
+    Python/ceval_gil.h
+    Python/ceval.c
+    Python/codecs.c
+    Python/compile.c
+    Python/condvar.h
+    Python/context.c
+    Python/dtoa.c
+    Python/dynamic_annotations.c
+    Python/dynload_win.c
+    Python/errors.c
+    Python/fileutils.c
+    Python/formatter_unicode.c
+    Python/frozen.c
+    Python/future.c
+    Python/getargs.c
+    Python/getcompiler.c
+    Python/getcopyright.c
+    Python/getopt.c
+    Python/getplatform.c
+    Python/getversion.c
+    Python/graminit.c
+    Python/hamt.c
+    Python/import.c
+    Python/importdl.c
+    Python/importdl.h
+    Python/marshal.c
+    Python/modsupport.c
+    Python/mysnprintf.c
+    Python/mystrtoul.c
+    Python/pathconfig.c
+    Python/peephole.c
+    Python/pyarena.c
+    Python/pyctype.c
+    Python/pyfpe.c
+    Python/pyhash.c
+    Python/pylifecycle.c
+    Python/pymath.c
+    Python/pystate.c
+    Python/pystrcmp.c
+    Python/pystrhex.c
+    Python/pystrtod.c
+    Python/Python-ast.c
+    Python/pythonrun.c
+    Python/pytime.c
+    Python/structmember.c
+    Python/symtable.c
+    Python/sysmodule.c
+    Python/thread_nt.h
+    Python/thread.c
+    Python/traceback.c
+    Python/wordcode_helpers.h
+)
+
+if(WINDOWS_STORE)
+  target_sources(pythoncore PRIVATE
+    PC/uwp_compat.cpp
+  )
+endif()
+
+target_compile_definitions(pythoncore PRIVATE
+  _USRDLL
+  Py_BUILD_CORE
+  Py_BUILD_CORE_BUILTIN
+  Py_ENABLE_SHARED
+  _Py_HAVE_ZLIB
+  MS_DLL_ID="3"
+  _WIN32_WINNT=0x0A00
+  WINVER=0x0A00
+  NTDDI_VERSION=0x0A000007
+)
+
+target_include_directories(pythoncore PRIVATE
+    Include/
+    Include/internal
+    PC/
+)
+
+target_compile_options(pythoncore PRIVATE
+  /ZW
+  /EHsc
+  /MP
+)
+
+set(PY_SHARED_LIB_NAME ${PROJECT_NAME}${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR})
+set_target_properties(pythoncore PROPERTIES
+  OUTPUT_NAME ${PY_SHARED_LIB_NAME}
+  # OUTPUT_NAME_DEBUG ${PY_SHARED_LIB_NAME}d
+  COMPILE_PDB_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}
+  COMPILE_PDB_NAME ${PY_SHARED_LIB_NAME}.pdb
+  # COMPILE_PDB_NAME_DEBUG ${PY_SHARED_LIB_NAME}d.pdb
+)
+
+target_link_libraries(pythoncore
+  PRIVATE
+    $<$<CONFIG:Debug>:vccorlibd.lib>
+    $<$<CONFIG:RelWithDebInfo>:vccorlib.lib>
+    $<$<CONFIG:Debug>:msvcrtd.lib>
+    $<$<CONFIG:RelWithDebInfo>:msvcrt.lib>
+    zlib::zlibstatic
+    ws2_32.lib
+    version.lib
+    shlwapi.lib
+    Advapi32.lib
+    Kernel32.lib
+)
+
+target_link_options(pythoncore PRIVATE
+  $<$<CONFIG:Debug>:/NODEFAULTLIB:vccorlibd>
+  $<$<CONFIG:Debug>:/NODEFAULTLIB:msvcrtd>
+  $<$<CONFIG:RelWithDebInfo>:/NODEFAULTLIB:vccorlib>
+  $<$<CONFIG:RelWithDebInfo>:/NODEFAULTLIB:msvcrt>
+  /INCREMENTAL:NO
+  /debug
+)
+
+add_library(python SHARED
+  PC/python3.def
+  PC/python3dll.c
+)
+
+target_compile_definitions(python PRIVATE
+  _USRDLL
+  Py_BUILD_CORE
+  Py_BUILD_CORE_BUILTIN
+  Py_ENABLE_SHARED
+  _Py_HAVE_ZLIB
+  MS_DLL_ID="3"
+  _WIN32_WINNT=0x0A00
+  WINVER=0x0A00
+  NTDDI_VERSION=0x0A000007
+)
+
+target_include_directories(python PRIVATE
+    Include/
+    Include/internal
+    PC/
+    INTERFACE
+    $<INSTALL_INTERFACE:Include>
+)
+
+set(LIB_NAME ${PROJECT_NAME}${PROJECT_VERSION_MAJOR})
+set_target_properties(python PROPERTIES
+  OUTPUT_NAME ${LIB_NAME}
+  # OUTPUT_NAME_DEBUG ${LIB_NAME}d
+  COMPILE_PDB_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}
+  COMPILE_PDB_NAME ${LIB_NAME}
+  # COMPILE_PDB_NAME_DEBUG ${LIB_NAME}d
+)
+
+target_link_libraries(python
+  PRIVATE
+    $<$<CONFIG:Debug>:vccorlibd.lib>
+    $<$<CONFIG:RelWithDebInfo>:vccorlib.lib>
+    $<$<CONFIG:Debug>:msvcrtd.lib>
+    $<$<CONFIG:RelWithDebInfo>:msvcrt.lib>
+    zlib::zlibstatic
+    pythoncore
+    ws2_32.lib
+    version.lib
+    shlwapi.lib
+    Advapi32.lib
+    Kernel32.lib
+    WindowsApp.lib
+)
+
+target_link_options(python PRIVATE
+  $<$<CONFIG:Debug>:/NODEFAULTLIB:vccorlibd>
+  $<$<CONFIG:Debug>:/NODEFAULTLIB:msvcrtd>
+  $<$<CONFIG:RelWithDebInfo>:/NODEFAULTLIB:vccorlib>
+  $<$<CONFIG:RelWithDebInfo>:/NODEFAULTLIB:msvcrt>
+  /INCREMENTAL:NO
+  /debug
+)
+
+
+########################################################################
+## Modules
+########################################################################
+set(PYTHON_MODULES)
+
+macro(add_py_module)
+  set(options)
+  set(oneValueArgs NAME )
+  set(multiValueArgs SOURCES DEFINITIONS INCLUDES LIBRARIES)
+  cmake_parse_arguments(PY_MODULE "${options}" "${oneValueArgs}"
+                        "${multiValueArgs}" ${ARGN}
+  )
+
+  list(APPEND PYTHON_MODULES ${PY_MODULE_NAME})
+
+  add_library(${PY_MODULE_NAME} SHARED
+    ${PY_MODULE_SOURCES}
+  )
+
+  target_compile_definitions(${PY_MODULE_NAME} PRIVATE
+      Py_BUILD_CORE_MODULE
+      Py_ENABLE_SHARED
+      _WIN32_WINNT=0x0A00
+      WINVER=0x0A00
+      NTDDI_VERSION=0x0A000007
+      MS_DLL_ID="3"
+      ${PY_MODULE_DEFINITIONS}
+  )
+
+  target_compile_options(pythoncore PRIVATE
+    /EHsc
+    /MP
+  )
+
+  target_include_directories(${PY_MODULE_NAME} PRIVATE
+      Include/
+      Include/internal
+      PC/
+      ${PY_MODULE_INCLUDES}
+  )
+
+  set_target_properties(${PY_MODULE_NAME} PROPERTIES
+    # OUTPUT_NAME_DEBUG ${PY_MODULE_NAME}d
+    SUFFIX ".pyd"
+    COMPILE_PDB_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}
+    COMPILE_PDB_NAME ${PY_MODULE_NAME}
+    # COMPILE_PDB_NAME_DEBUG ${PY_MODULE_NAME}d
+  )
+
+  target_link_libraries(${PY_MODULE_NAME}
+    PRIVATE
+      $<$<CONFIG:Debug>:vccorlibd.lib>
+      $<$<CONFIG:RelWithDebInfo>:vccorlib.lib>
+      $<$<CONFIG:Debug>:msvcrtd.lib>
+      $<$<CONFIG:RelWithDebInfo>:msvcrt.lib>
+      ${PY_MODULE_LIBRARIES}
+      pythoncore
+      ws2_32.lib
+      version.lib
+      shlwapi.lib
+      Advapi32.lib
+      Kernel32.lib
+      WindowsApp.lib
+  )
+
+  target_link_options(${PY_MODULE_NAME} PRIVATE
+    $<$<CONFIG:Debug>:/NODEFAULTLIB:vccorlibd>
+    $<$<CONFIG:Debug>:/NODEFAULTLIB:msvcrtd>
+    $<$<CONFIG:RelWithDebInfo>:/NODEFAULTLIB:vccorlib>
+    $<$<CONFIG:RelWithDebInfo>:/NODEFAULTLIB:msvcrt>
+    /INCREMENTAL:NO
+    /debug
+  )
+endmacro()
+
+add_py_module(NAME _asyncio
+  SOURCES
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_asynciomodule.c
+)
+
+
+## _bz2
+add_py_module(NAME _bz2
+  SOURCES
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_bz2module.c
+  LIBRARIES
+    bzip2::bzip2
+)
+
+## _ctypes
+add_py_module(NAME _ctypes
+  SOURCES
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_ctypes/_ctypes.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_ctypes/callbacks.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_ctypes/callproc.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_ctypes/cfield.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_ctypes/ctypes_dlfcn.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_ctypes/ctypes.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_ctypes/malloc_closure.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_ctypes/stgdict.c
+  DEFINITIONS
+    FFI_BUILDING
+  LIBRARIES
+    libffi::libffi
+    OleAut32.lib
+    Ole32.lib
+)
+
+## _decinaml
+add_py_module(NAME _decimal
+  SOURCES
+    Modules/_decimal/libmpdec/basearith.h
+    Modules/_decimal/libmpdec/bits.h
+    Modules/_decimal/libmpdec/constants.h
+    Modules/_decimal/libmpdec/convolute.h
+    Modules/_decimal/libmpdec/crt.h
+    Modules/_decimal/libmpdec/difradix2.h
+    Modules/_decimal/docstrings.h
+    Modules/_decimal/libmpdec/fnt.h
+    Modules/_decimal/libmpdec/fourstep.h
+    Modules/_decimal/libmpdec/mpdecimal.h
+    Modules/_decimal/libmpdec/numbertheory.h
+    Modules/_decimal/libmpdec/sixstep.h
+    Modules/_decimal/libmpdec/transpose.h
+    Modules/_decimal/libmpdec/typearith.h
+    Modules/_decimal/libmpdec/umodarith.h
+    Modules/_decimal/libmpdec/vccompat.h
+    Modules/_decimal/libmpdec/vcstdint.h
+    Modules/_decimal/_decimal.c
+    Modules/_decimal/libmpdec/basearith.c
+    Modules/_decimal/libmpdec/constants.c
+    Modules/_decimal/libmpdec/context.c
+    Modules/_decimal/libmpdec/convolute.c
+    Modules/_decimal/libmpdec/crt.c
+    Modules/_decimal/libmpdec/difradix2.c
+    Modules/_decimal/libmpdec/fnt.c
+    Modules/_decimal/libmpdec/fourstep.c
+    Modules/_decimal/libmpdec/io.c
+    Modules/_decimal/libmpdec/memory.c
+    Modules/_decimal/libmpdec/mpdecimal.c
+    Modules/_decimal/libmpdec/numbertheory.c
+    Modules/_decimal/libmpdec/sixstep.c
+    Modules/_decimal/libmpdec/transpose.c
+  DEFINITIONS
+    MASM
+    _CRT_SECURE_NO_WARNINGS
+  INCLUDES
+    Modules/_decimal/libmpdec
+)
+
+if(${CMAKE_GENERATOR_PLATFORM} STREQUAL "win32")
+  target_compile_definitions(_decimal PRIVATE
+    CONFIG_32
+    PPRO
+  )
+elseif(${CMAKE_GENERATOR_PLATFORM} STREQUAL "x64")
+  target_compile_definitions(_decimal PRIVATE
+    CONFIG_64
+  )
+  target_sources(_decimal PRIVATE
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_decimal/libmpdec/vcdiv64.asm
+  )
+elseif(${CMAKE_GENERATOR_PLATFORM} STREQUAL "arm")
+  target_compile_definitions(_decimal PRIVATE
+    CONFIG_32
+    ANSI
+  )
+elseif(${CMAKE_GENERATOR_PLATFORM} STREQUAL "arm64")
+  target_compile_definitions(_decimal PRIVATE
+    CONFIG_64
+    ANSI
+  )
+endif()
+
+## _elementtree
+add_py_module(NAME _elementtree
+  SOURCES
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_elementtree.c
+  DEFINITIONS
+    USE_PYEXPAT_CAPI
+    XML_STATIC
+  LIBRARIES
+    expat::libexpat
+)
+
+## _hashlib
+add_py_module(NAME _hashlib
+  SOURCES
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_hashopenssl.c
+  LIBRARIES
+    openssl::crypto
+)
+
+## _lzma
+add_py_module(NAME _lzma
+  SOURCES
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_lzmamodule.c
+  LIBRARIES
+    xz::lzma
+)
+
+## _multiprocessing
+add_py_module(NAME _multiprocessing
+  SOURCES
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_multiprocessing/multiprocessing.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_multiprocessing/multiprocessing.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_multiprocessing/semaphore.c
+)
+
+## _overlapped
+add_py_module(NAME _overlapped
+  SOURCES
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/overlapped.c
+)
+
+## _queue
+add_py_module(NAME _queue
+  SOURCES
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_queuemodule.c
+)
+
+## _socket
+add_py_module(NAME _socket
+  SOURCES
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/socketmodule.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/socketmodule.h
+  LIBRARIES
+    iphlpapi.lib
+)
+
+## _sqlite3
+add_py_module(NAME _sqlite3
+  SOURCES
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_sqlite/cache.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_sqlite/cache.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_sqlite/connection.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_sqlite/connection.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_sqlite/cursor.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_sqlite/cursor.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_sqlite/microprotocols.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_sqlite/microprotocols.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_sqlite/module.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_sqlite/module.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_sqlite/prepare_protocol.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_sqlite/prepare_protocol.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_sqlite/row.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_sqlite/row.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_sqlite/statement.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_sqlite/statement.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_sqlite/util.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_sqlite/util.h
+  DEFINITIONS
+    MODULE_NAME="sqlite3"
+  LIBRARIES
+    sqlite3::sqlite3
+)
+
+## _ssl
+add_py_module(NAME _ssl
+  SOURCES
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/_ssl.c
+  LIBRARIES
+    openssl::ssl
+    openssl::crypto
+    crypt32.lib
+)
+
+## select
+add_py_module(NAME select
+  SOURCES
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/selectmodule.c
+)
+
+## pyexpat
+add_py_module(NAME pyexpat
+  SOURCES
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/pyexpat.c
+  LIBRARIES
+    expat::libexpat
+)
+
+## unicodedata
+add_py_module(NAME unicodedata
+  SOURCES
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/unicodedata.c
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/unicodedata_db.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/Modules/unicodename_db.h
+)
+
+include(CMakePackageConfigHelpers)
+write_basic_package_version_file(
+  ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake
+  VERSION ${PROJECT_VERSION}
+  COMPATIBILITY AnyNewerVersion
+)
+
+install(TARGETS python pythoncore EXPORT ${PROJECT_NAME}
+  RUNTIME DESTINATION bin
+  ARCHIVE DESTINATION lib
+  LIBRARY DESTINATION lib
+  INCLUDES DESTINATION include/${PY_SHARED_LIB_NAME}
+)
+
+install(DIRECTORY
+  ${CMAKE_CURRENT_SOURCE_DIR}/Include/
+  DESTINATION include/${PY_SHARED_LIB_NAME}
+)
+
+install(FILES
+  ${CMAKE_CURRENT_SOURCE_DIR}/PC/pyconfig.h
+  DESTINATION include/${PY_SHARED_LIB_NAME}
+)
+
+foreach(PYTHON_MODULE IN LISTS PYTHON_MODULES)
+  install(TARGETS ${PYTHON_MODULE}
+    RUNTIME DESTINATION bin/python/DLLs
+    ARCHIVE DESTINATION lib
+    LIBRARY DESTINATION lib
+  )
+
+install(FILES
+  ${PROJECT_BINARY_DIR}/RelWithDebInfo/${PYTHON_MODULE}.pdb
+  DESTINATION lib
+  CONFIGURATIONS RelWithDebInfo
+)
+install(FILES
+  ${PROJECT_BINARY_DIR}/Debug/${PYTHON_MODULE}.pdb
+  DESTINATION lib
+  CONFIGURATIONS Debug
+)
+endforeach(PYTHON_MODULE IN LISTS PYTHON_MODULES)
+
+install(DIRECTORY
+    ${CMAKE_CURRENT_SOURCE_DIR}/Lib
+    DESTINATION bin/python
+    PATTERN plat-* EXCLUDE
+    PATTERN msilib EXCLUDE
+    PATTERN lib-tk EXCLUDE
+    PATTERN curses EXCLUDE
+    PATTERN bsddb EXCLUDE
+    PATTERN *test EXCLUDE
+    PATTERN idlelib EXCLUDE
+    PATTERN __pycache__ EXCLUDE
+)
+
+install(FILES
+  ${PROJECT_BINARY_DIR}/RelWithDebInfo/${LIB_NAME}.pdb
+  ${PROJECT_BINARY_DIR}/RelWithDebInfo/${PY_SHARED_LIB_NAME}.pdb
+  DESTINATION lib
+  CONFIGURATIONS RelWithDebInfo
+)
+install(FILES
+  ${PROJECT_BINARY_DIR}/Debug/${LIB_NAME}.pdb
+  ${PROJECT_BINARY_DIR}/Debug/${PY_SHARED_LIB_NAME}.pdb
+  DESTINATION lib
+  CONFIGURATIONS Debug
+)
+
+
+install(EXPORT ${PROJECT_NAME}
+  FILE
+  ${PROJECT_NAME}.cmake
+  NAMESPACE
+    ${PROJECT_NAME}::
+  DESTINATION
+    lib/cmake/${PROJECT_NAME}
+)
+
+install(FILES
+  ${CMAKE_CURRENT_SOURCE_DIR}/cmake/${PROJECT_NAME}-config.cmake
+  ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake
+  DESTINATION
+    lib/cmake/${PROJECT_NAME}
+)
+
+export(TARGETS ${PROJECT_NAME}
+  FILE
+  ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake
+  NAMESPACE ${PROJECT_NAME}::
+)
\ No newline at end of file
diff --git a/Include/pyatomic.h b/Include/pyatomic.h
index 9a497a6836..1dc1da2931 100644
--- a/Include/pyatomic.h
+++ b/Include/pyatomic.h
@@ -13,9 +13,12 @@
 
 #if defined(_MSC_VER)
 #include <intrin.h>
+#if defined(_M_IX86) || defined(_M_X64)
 #include <immintrin.h>
 #endif
 
+#endif
+
 /* This is modeled after the atomics interface from C1x, according to
  * the draft at
  * http://www.open-std.org/JTC1/SC22/wg14/www/docs/n1425.pdf.
diff --git a/Include/pyport.h b/Include/pyport.h
index 27e51b42c6..d9358875f7 100644
--- a/Include/pyport.h
+++ b/Include/pyport.h
@@ -406,7 +406,7 @@ extern "C" {
 #endif
 
 /* get and set x87 control word for VisualStudio/x86 */
-#if defined(_MSC_VER) && !defined(_WIN64) /* x87 not supported in 64-bit */
+#if defined(_MSC_VER) && defined(_M_IX86) /* x87 not supported in 64-bit */
 #define HAVE_PY_SET_53BIT_PRECISION 1
 #define _Py_SET_53BIT_PRECISION_HEADER \
     unsigned int old_387controlword, new_387controlword, out_387controlword
diff --git a/Modules/_ctypes/_ctypes.c b/Modules/_ctypes/_ctypes.c
index f186e5082a..74ad1e44a9 100644
--- a/Modules/_ctypes/_ctypes.c
+++ b/Modules/_ctypes/_ctypes.c
@@ -105,8 +105,11 @@ bytes(cdata)
 #include "structmember.h"
 
 #include <ffi.h>
-#ifdef MS_WIN32
-#include <windows.h>
+#ifdef MS_WINDOWS
+#ifndef WIN32_LEAN_AND_MEAN
+#define WIN32_LEAN_AND_MEAN
+#endif
+#include <Windows.h>
 #include <malloc.h>
 #ifndef IS_INTRESOURCE
 #define IS_INTRESOURCE(x) (((size_t)(x) >> 16) == 0)
@@ -236,7 +239,7 @@ PyObject *
 PyDict_GetItemProxy(PyObject *dict, PyObject *key)
 {
     PyObject *result;
-    PyObject *item = PyDict_GetItem(dict, key);
+    PyObject *item = PyDict_GetItemWithError(dict, key);
 
     if (item == NULL)
         return NULL;
@@ -403,24 +406,35 @@ static PyCArgObject *
 StructUnionType_paramfunc(CDataObject *self)
 {
     PyCArgObject *parg;
+    CDataObject *copied_self;
     StgDictObject *stgdict;
 
+    if (self->b_size > sizeof(void*)) {
+        void *new_ptr = PyMem_Malloc(self->b_size);
+        if (new_ptr == NULL)
+            return NULL;
+        memcpy(new_ptr, self->b_ptr, self->b_size);
+        copied_self = (CDataObject *)PyCData_AtAddress(
+            (PyObject *)Py_TYPE(self), new_ptr);
+        copied_self->b_needsfree = 1;
+    } else {
+        copied_self = self;
+        Py_INCREF(copied_self);
+    }
+
     parg = PyCArgObject_new();
-    if (parg == NULL)
+    if (parg == NULL) {
+        Py_DECREF(copied_self);
         return NULL;
+    }
 
     parg->tag = 'V';
-    stgdict = PyObject_stgdict((PyObject *)self);
+    stgdict = PyObject_stgdict((PyObject *)copied_self);
     assert(stgdict); /* Cannot be NULL for structure/union instances */
     parg->pffi_type = &stgdict->ffi_type_pointer;
-    /* For structure parameters (by value), parg->value doesn't contain the structure
-       data itself, instead parg->value.p *points* to the structure's data
-       See also _ctypes.c, function _call_function_pointer().
-    */
-    parg->value.p = self->b_ptr;
-    parg->size = self->b_size;
-    Py_INCREF(self);
-    parg->obj = (PyObject *)self;
+    parg->value.p = copied_self->b_ptr;
+    parg->size = copied_self->b_size;
+    parg->obj = (PyObject *)copied_self;
     return parg;
 }
 
@@ -430,6 +444,8 @@ StructUnionType_new(PyTypeObject *type, PyObject *args, PyObject *kwds, int isSt
     PyTypeObject *result;
     PyObject *fields;
     StgDictObject *dict;
+    _Py_IDENTIFIER(_abstract_);
+    _Py_IDENTIFIER(_fields_);
 
     /* create the new instance (which is a class,
        since we are a metatype!) */
@@ -438,8 +454,12 @@ StructUnionType_new(PyTypeObject *type, PyObject *args, PyObject *kwds, int isSt
         return NULL;
 
     /* keep this for bw compatibility */
-    if (PyDict_GetItemString(result->tp_dict, "_abstract_"))
+    if (_PyDict_GetItemIdWithError(result->tp_dict, &PyId__abstract_))
         return (PyObject *)result;
+    if (PyErr_Occurred()) {
+        Py_DECREF(result);
+        return NULL;
+    }
 
     dict = (StgDictObject *)_PyObject_CallNoArg((PyObject *)&PyCStgDict_Type);
     if (!dict) {
@@ -462,8 +482,19 @@ StructUnionType_new(PyTypeObject *type, PyObject *args, PyObject *kwds, int isSt
 
     dict->paramfunc = StructUnionType_paramfunc;
 
-    fields = PyDict_GetItemString((PyObject *)dict, "_fields_");
-    if (!fields) {
+    fields = _PyDict_GetItemIdWithError((PyObject *)dict, &PyId__fields_);
+    if (fields) {
+        if (_PyObject_SetAttrId((PyObject *)result, &PyId__fields_, fields) < 0) {
+            Py_DECREF(result);
+            return NULL;
+        }
+        return (PyObject *)result;
+    }
+    else if (PyErr_Occurred()) {
+        Py_DECREF(result);
+        return NULL;
+    }
+    else {
         StgDictObject *basedict = PyType_stgdict((PyObject *)result->tp_base);
 
         if (basedict == NULL)
@@ -477,12 +508,6 @@ StructUnionType_new(PyTypeObject *type, PyObject *args, PyObject *kwds, int isSt
         basedict->flags |= DICTFLAG_FINAL; /* set the 'final' flag in the baseclass dict */
         return (PyObject *)result;
     }
-
-    if (-1 == PyObject_SetAttrString((PyObject *)result, "_fields_", fields)) {
-        Py_DECREF(result);
-        return NULL;
-    }
-    return (PyObject *)result;
 }
 
 static PyObject *
@@ -667,7 +692,9 @@ CDataType_in_dll(PyObject *type, PyObject *args)
     }
 
 #ifdef MS_WIN32
+    Py_BEGIN_ALLOW_THREADS
     address = (void *)GetProcAddress(handle, name);
+    Py_END_ALLOW_THREADS
     if (!address) {
         PyErr_Format(PyExc_ValueError,
                      "symbol '%s' not found",
@@ -697,6 +724,7 @@ static const char from_param_doc[] =
 static PyObject *
 CDataType_from_param(PyObject *type, PyObject *value)
 {
+    _Py_IDENTIFIER(_as_parameter_);
     PyObject *as_parameter;
     int res = PyObject_IsInstance(value, type);
     if (res == -1)
@@ -730,7 +758,9 @@ CDataType_from_param(PyObject *type, PyObject *value)
         return NULL;
     }
 
-    as_parameter = PyObject_GetAttrString(value, "_as_parameter_");
+    if (_PyObject_LookupAttrId(value, &PyId__as_parameter_, &as_parameter) < 0) {
+        return NULL;
+    }
     if (as_parameter) {
         value = CDataType_from_param(type, as_parameter);
         Py_DECREF(as_parameter);
@@ -965,6 +995,7 @@ PyCPointerType_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
     StgDictObject *stgdict;
     PyObject *proto;
     PyObject *typedict;
+    _Py_IDENTIFIER(_type_);
 
     typedict = PyTuple_GetItem(args, 2);
     if (!typedict)
@@ -984,15 +1015,15 @@ PyCPointerType_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
     stgdict->paramfunc = PyCPointerType_paramfunc;
     stgdict->flags |= TYPEFLAG_ISPOINTER;
 
-    proto = PyDict_GetItemString(typedict, "_type_"); /* Borrowed ref */
-    if (proto && -1 == PyCPointerType_SetProto(stgdict, proto)) {
-        Py_DECREF((PyObject *)stgdict);
-        return NULL;
-    }
-
+    proto = _PyDict_GetItemIdWithError(typedict, &PyId__type_); /* Borrowed ref */
     if (proto) {
-        StgDictObject *itemdict = PyType_stgdict(proto);
+        StgDictObject *itemdict;
         const char *current_format;
+        if (-1 == PyCPointerType_SetProto(stgdict, proto)) {
+            Py_DECREF((PyObject *)stgdict);
+            return NULL;
+        }
+        itemdict = PyType_stgdict(proto);
         /* PyCPointerType_SetProto has verified proto has a stgdict. */
         assert(itemdict);
         /* If itemdict->format is NULL, then this is a pointer to an
@@ -1013,6 +1044,10 @@ PyCPointerType_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
             return NULL;
         }
     }
+    else if (PyErr_Occurred()) {
+        Py_DECREF((PyObject *)stgdict);
+        return NULL;
+    }
 
     /* create the new instance (which is a class,
        since we are a metatype!) */
@@ -1038,6 +1073,7 @@ static PyObject *
 PyCPointerType_set_type(PyTypeObject *self, PyObject *type)
 {
     StgDictObject *dict;
+    _Py_IDENTIFIER(_type_);
 
     dict = PyType_stgdict((PyObject *)self);
     if (!dict) {
@@ -1049,7 +1085,7 @@ PyCPointerType_set_type(PyTypeObject *self, PyObject *type)
     if (-1 == PyCPointerType_SetProto(dict, type))
         return NULL;
 
-    if (-1 == PyDict_SetItemString((PyObject *)dict, "_type_", type))
+    if (-1 == _PyDict_SetItemId((PyObject *)dict, &PyId__type_, type))
         return NULL;
 
     Py_RETURN_NONE;
@@ -1094,11 +1130,7 @@ PyCPointerType_from_param(PyObject *type, PyObject *value)
         */
         StgDictObject *v = PyObject_stgdict(value);
         assert(v); /* Cannot be NULL for pointer or array objects */
-        int ret = PyObject_IsSubclass(v->proto, typedict->proto);
-        if (ret < 0) {
-            return NULL;
-        }
-        if (ret) {
+        if (PyObject_IsSubclass(v->proto, typedict->proto)) {
             Py_INCREF(value);
             return value;
         }
@@ -1398,6 +1430,8 @@ PyCArrayType_paramfunc(CDataObject *self)
 static PyObject *
 PyCArrayType_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
 {
+    _Py_IDENTIFIER(_length_);
+    _Py_IDENTIFIER(_type_);
     PyTypeObject *result;
     StgDictObject *stgdict;
     StgDictObject *itemdict;
@@ -1416,14 +1450,29 @@ PyCArrayType_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
     stgdict = NULL;
     type_attr = NULL;
 
-    length_attr = PyObject_GetAttrString((PyObject *)result, "_length_");
-    if (!length_attr || !PyLong_Check(length_attr)) {
+    if (_PyObject_LookupAttrId((PyObject *)result, &PyId__length_, &length_attr) < 0) {
+        goto error;
+    }
+    if (!length_attr) {
         PyErr_SetString(PyExc_AttributeError,
-                        "class must define a '_length_' attribute, "
-                        "which must be a positive integer");
-        Py_XDECREF(length_attr);
+                        "class must define a '_length_' attribute");
         goto error;
     }
+
+    if (!PyLong_Check(length_attr)) {
+        Py_DECREF(length_attr);
+        PyErr_SetString(PyExc_TypeError,
+                        "The '_length_' attribute must be an integer");
+        goto error;
+    }
+
+    if (_PyLong_Sign(length_attr) == -1) {
+        Py_DECREF(length_attr);
+        PyErr_SetString(PyExc_ValueError,
+                        "The '_length_' attribute must not be negative");
+        goto error;
+    }
+
     length = PyLong_AsSsize_t(length_attr);
     Py_DECREF(length_attr);
     if (length == -1 && PyErr_Occurred()) {
@@ -1434,7 +1483,9 @@ PyCArrayType_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
         goto error;
     }
 
-    type_attr = PyObject_GetAttrString((PyObject *)result, "_type_");
+    if (_PyObject_LookupAttrId((PyObject *)result, &PyId__type_, &type_attr) < 0) {
+        goto error;
+    }
     if (!type_attr) {
         PyErr_SetString(PyExc_AttributeError,
                         "class must define a '_type_' attribute");
@@ -1470,7 +1521,7 @@ PyCArrayType_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
     }
 
     itemsize = itemdict->size;
-    if (itemsize != 0 && length > PY_SSIZE_T_MAX / itemsize) {
+    if (length * itemsize < 0) {
         PyErr_SetString(PyExc_OverflowError,
                         "array too large");
         goto error;
@@ -1578,6 +1629,7 @@ static const char SIMPLE_TYPE_CHARS[] = "cbBhHiIlLdfuzZqQPXOv?g";
 static PyObject *
 c_wchar_p_from_param(PyObject *type, PyObject *value)
 {
+    _Py_IDENTIFIER(_as_parameter_);
     PyObject *as_parameter;
     int res;
     if (value == Py_None) {
@@ -1627,7 +1679,9 @@ c_wchar_p_from_param(PyObject *type, PyObject *value)
         }
     }
 
-    as_parameter = PyObject_GetAttrString(value, "_as_parameter_");
+    if (_PyObject_LookupAttrId(value, &PyId__as_parameter_, &as_parameter) < 0) {
+        return NULL;
+    }
     if (as_parameter) {
         value = c_wchar_p_from_param(type, as_parameter);
         Py_DECREF(as_parameter);
@@ -1642,6 +1696,7 @@ c_wchar_p_from_param(PyObject *type, PyObject *value)
 static PyObject *
 c_char_p_from_param(PyObject *type, PyObject *value)
 {
+    _Py_IDENTIFIER(_as_parameter_);
     PyObject *as_parameter;
     int res;
     if (value == Py_None) {
@@ -1691,7 +1746,9 @@ c_char_p_from_param(PyObject *type, PyObject *value)
         }
     }
 
-    as_parameter = PyObject_GetAttrString(value, "_as_parameter_");
+    if (_PyObject_LookupAttrId(value, &PyId__as_parameter_, &as_parameter) < 0) {
+        return NULL;
+    }
     if (as_parameter) {
         value = c_char_p_from_param(type, as_parameter);
         Py_DECREF(as_parameter);
@@ -1706,6 +1763,7 @@ c_char_p_from_param(PyObject *type, PyObject *value)
 static PyObject *
 c_void_p_from_param(PyObject *type, PyObject *value)
 {
+    _Py_IDENTIFIER(_as_parameter_);
     StgDictObject *stgd;
     PyObject *as_parameter;
     int res;
@@ -1827,7 +1885,9 @@ c_void_p_from_param(PyObject *type, PyObject *value)
         }
     }
 
-    as_parameter = PyObject_GetAttrString(value, "_as_parameter_");
+    if (_PyObject_LookupAttrId(value, &PyId__as_parameter_, &as_parameter) < 0) {
+        return NULL;
+    }
     if (as_parameter) {
         value = c_void_p_from_param(type, as_parameter);
         Py_DECREF(as_parameter);
@@ -1948,6 +2008,7 @@ PyCSimpleType_paramfunc(CDataObject *self)
 static PyObject *
 PyCSimpleType_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
 {
+    _Py_IDENTIFIER(_type_);
     PyTypeObject *result;
     StgDictObject *stgdict;
     PyObject *proto;
@@ -1962,13 +2023,15 @@ PyCSimpleType_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
     if (result == NULL)
         return NULL;
 
-    proto = PyObject_GetAttrString((PyObject *)result, "_type_"); /* new ref */
+    if (_PyObject_LookupAttrId((PyObject *)result, &PyId__type_, &proto) < 0) {
+        return NULL;
+    }
     if (!proto) {
         PyErr_SetString(PyExc_AttributeError,
                         "class must define a '_type_' attribute");
   error:
         Py_XDECREF(proto);
-        Py_XDECREF(result);
+        Py_DECREF(result);
         return NULL;
     }
     if (PyUnicode_Check(proto)) {
@@ -2130,6 +2193,7 @@ PyCSimpleType_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
 static PyObject *
 PyCSimpleType_from_param(PyObject *type, PyObject *value)
 {
+    _Py_IDENTIFIER(_as_parameter_);
     StgDictObject *dict;
     const char *fmt;
     PyCArgObject *parg;
@@ -2173,7 +2237,9 @@ PyCSimpleType_from_param(PyObject *type, PyObject *value)
     PyErr_Clear();
     Py_DECREF(parg);
 
-    as_parameter = PyObject_GetAttrString(value, "_as_parameter_");
+    if (_PyObject_LookupAttrId(value, &PyId__as_parameter_, &as_parameter) < 0) {
+        return NULL;
+    }
     if (as_parameter) {
         if (Py_EnterRecursiveCall("while processing _as_parameter_")) {
             Py_DECREF(as_parameter);
@@ -2248,6 +2314,7 @@ PyTypeObject PyCSimpleType_Type = {
 static PyObject *
 converters_from_argtypes(PyObject *ob)
 {
+    _Py_IDENTIFIER(from_param);
     PyObject *converters;
     Py_ssize_t i;
     Py_ssize_t nArgs;
@@ -2272,22 +2339,22 @@ converters_from_argtypes(PyObject *ob)
     */
 
     for (i = 0; i < nArgs; ++i) {
+        PyObject *cnv;
         PyObject *tp = PyTuple_GET_ITEM(ob, i);
-        PyObject *cnv = PyObject_GetAttrString(tp, "from_param");
-        if (!cnv)
-            goto argtypes_error_1;
+        if (_PyObject_LookupAttrId(tp, &PyId_from_param, &cnv) <= 0) {
+            Py_DECREF(converters);
+            Py_DECREF(ob);
+            if (!PyErr_Occurred()) {
+                PyErr_Format(PyExc_TypeError,
+                             "item %zd in _argtypes_ has no from_param method",
+                             i+1);
+            }
+            return NULL;
+        }
         PyTuple_SET_ITEM(converters, i, cnv);
     }
     Py_DECREF(ob);
     return converters;
-
-  argtypes_error_1:
-    Py_XDECREF(converters);
-    Py_DECREF(ob);
-    PyErr_Format(PyExc_TypeError,
-                 "item %zd in _argtypes_ has no from_param method",
-                 i+1);
-    return NULL;
 }
 
 static int
@@ -2295,6 +2362,10 @@ make_funcptrtype_dict(StgDictObject *stgdict)
 {
     PyObject *ob;
     PyObject *converters = NULL;
+    _Py_IDENTIFIER(_flags_);
+    _Py_IDENTIFIER(_argtypes_);
+    _Py_IDENTIFIER(_restype_);
+    _Py_IDENTIFIER(_check_retval_);
 
     stgdict->align = _ctypes_get_fielddesc("P")->pffi_type->alignment;
     stgdict->length = 1;
@@ -2303,26 +2374,31 @@ make_funcptrtype_dict(StgDictObject *stgdict)
     stgdict->getfunc = NULL;
     stgdict->ffi_type_pointer = ffi_type_pointer;
 
-    ob = PyDict_GetItemString((PyObject *)stgdict, "_flags_");
+    ob = _PyDict_GetItemIdWithError((PyObject *)stgdict, &PyId__flags_);
     if (!ob || !PyLong_Check(ob)) {
-        PyErr_SetString(PyExc_TypeError,
-            "class must define _flags_ which must be an integer");
+        if (!PyErr_Occurred()) {
+            PyErr_SetString(PyExc_TypeError,
+                "class must define _flags_ which must be an integer");
+        }
         return -1;
     }
-    stgdict->flags = PyLong_AS_LONG(ob) | TYPEFLAG_ISPOINTER;
+    stgdict->flags = PyLong_AsUnsignedLongMask(ob) | TYPEFLAG_ISPOINTER;
 
     /* _argtypes_ is optional... */
-    ob = PyDict_GetItemString((PyObject *)stgdict, "_argtypes_");
+    ob = _PyDict_GetItemIdWithError((PyObject *)stgdict, &PyId__argtypes_);
     if (ob) {
         converters = converters_from_argtypes(ob);
         if (!converters)
-            goto error;
+            return -1;
         Py_INCREF(ob);
         stgdict->argtypes = ob;
         stgdict->converters = converters;
     }
+    else if (PyErr_Occurred()) {
+        return -1;
+    }
 
-    ob = PyDict_GetItemString((PyObject *)stgdict, "_restype_");
+    ob = _PyDict_GetItemIdWithError((PyObject *)stgdict, &PyId__restype_);
     if (ob) {
         if (ob != Py_None && !PyType_stgdict(ob) && !PyCallable_Check(ob)) {
             PyErr_SetString(PyExc_TypeError,
@@ -2331,12 +2407,17 @@ make_funcptrtype_dict(StgDictObject *stgdict)
         }
         Py_INCREF(ob);
         stgdict->restype = ob;
-        stgdict->checker = PyObject_GetAttrString(ob, "_check_retval_");
-        if (stgdict->checker == NULL)
-            PyErr_Clear();
+        if (_PyObject_LookupAttrId(ob, &PyId__check_retval_,
+                                   &stgdict->checker) < 0)
+        {
+            return -1;
+        }
+    }
+    else if (PyErr_Occurred()) {
+        return -1;
     }
 /* XXX later, maybe.
-    ob = PyDict_GetItemString((PyObject *)stgdict, "_errcheck_");
+    ob = _PyDict_GetItemIdWithError((PyObject *)stgdict, &PyId__errcheck_);
     if (ob) {
         if (!PyCallable_Check(ob)) {
             PyErr_SetString(PyExc_TypeError,
@@ -2346,13 +2427,11 @@ make_funcptrtype_dict(StgDictObject *stgdict)
         Py_INCREF(ob);
         stgdict->errcheck = ob;
     }
+    else if (PyErr_Occurred()) {
+        return -1;
+    }
 */
     return 0;
-
-  error:
-    Py_XDECREF(converters);
-    return -1;
-
 }
 
 static PyCArgObject *
@@ -2667,11 +2746,10 @@ PyCData_reduce(PyObject *myself, PyObject *args)
                         "ctypes objects containing pointers cannot be pickled");
         return NULL;
     }
-    PyObject *dict = PyObject_GetAttrString(myself, "__dict__");
-    if (dict == NULL) {
-        return NULL;
-    }
-    return Py_BuildValue("O(O(NN))", _unpickle, Py_TYPE(myself), dict,
+    return Py_BuildValue("O(O(NN))",
+                         _unpickle,
+                         Py_TYPE(myself),
+                         PyObject_GetAttrString(myself, "__dict__"),
                          PyBytes_FromStringAndSize(self->b_ptr, self->b_size));
 }
 
@@ -3088,9 +3166,13 @@ PyCFuncPtr_get_errcheck(PyCFuncPtrObject *self, void *Py_UNUSED(ignored))
 static int
 PyCFuncPtr_set_restype(PyCFuncPtrObject *self, PyObject *ob, void *Py_UNUSED(ignored))
 {
+    _Py_IDENTIFIER(_check_retval_);
+    PyObject *checker, *oldchecker;
     if (ob == NULL) {
+        oldchecker = self->checker;
+        self->checker = NULL;
         Py_CLEAR(self->restype);
-        Py_CLEAR(self->checker);
+        Py_XDECREF(oldchecker);
         return 0;
     }
     if (ob != Py_None && !PyType_stgdict(ob) && !PyCallable_Check(ob)) {
@@ -3098,11 +3180,14 @@ PyCFuncPtr_set_restype(PyCFuncPtrObject *self, PyObject *ob, void *Py_UNUSED(ign
                         "restype must be a type, a callable, or None");
         return -1;
     }
+    if (_PyObject_LookupAttrId(ob, &PyId__check_retval_, &checker) < 0) {
+        return -1;
+    }
+    oldchecker = self->checker;
+    self->checker = checker;
     Py_INCREF(ob);
     Py_XSETREF(self->restype, ob);
-    Py_XSETREF(self->checker, PyObject_GetAttrString(ob, "_check_retval_"));
-    if (self->checker == NULL)
-        PyErr_Clear();
+    Py_XDECREF(oldchecker);
     return 0;
 }
 
@@ -3175,18 +3260,23 @@ static PyGetSetDef PyCFuncPtr_getsets[] = {
 #ifdef MS_WIN32
 static PPROC FindAddress(void *handle, const char *name, PyObject *type)
 {
+    PPROC address;
 #ifdef MS_WIN64
     /* win64 has no stdcall calling conv, so it should
        also not have the name mangling of it.
     */
-    return (PPROC)GetProcAddress(handle, name);
+    Py_BEGIN_ALLOW_THREADS
+    address = (PPROC)GetProcAddress(handle, name);
+    Py_END_ALLOW_THREADS
+    return address;
 #else
-    PPROC address;
     char *mangled_name;
     int i;
     StgDictObject *dict;
 
+    Py_BEGIN_ALLOW_THREADS
     address = (PPROC)GetProcAddress(handle, name);
+    Py_END_ALLOW_THREADS
     if (address)
         return address;
     if (((size_t)name & ~0xFFFF) == 0) {
@@ -3207,7 +3297,9 @@ static PPROC FindAddress(void *handle, const char *name, PyObject *type)
         return NULL;
     for (i = 0; i < 32; ++i) {
         sprintf(mangled_name, "_%s@%d", name, i*4);
+        Py_BEGIN_ALLOW_THREADS
         address = (PPROC)GetProcAddress(handle, mangled_name);
+        Py_END_ALLOW_THREADS
         if (address)
             return address;
     }
@@ -3532,9 +3624,12 @@ PyCFuncPtr_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
        like that.
     */
 /*
-    if (kwds && PyDict_GetItemString(kwds, "options")) {
+    if (kwds && _PyDict_GetItemIdWithError(kwds, &PyId_options)) {
         ...
     }
+    else if (PyErr_Occurred()) {
+        return NULL;
+    }
 */
 
     dict = PyType_stgdict((PyObject *)type);
@@ -3611,10 +3706,16 @@ _get_arg(int *pindex, PyObject *name, PyObject *defval, PyObject *inargs, PyObje
         Py_INCREF(v);
         return v;
     }
-    if (kwds && name && (v = PyDict_GetItem(kwds, name))) {
-        ++*pindex;
-        Py_INCREF(v);
-        return v;
+    if (kwds && name) {
+        v = PyDict_GetItemWithError(kwds, name);
+        if (v) {
+            ++*pindex;
+            Py_INCREF(v);
+            return v;
+        }
+        else if (PyErr_Occurred()) {
+            return NULL;
+        }
     }
     if (defval) {
         Py_INCREF(defval);
@@ -3691,7 +3792,7 @@ _build_callargs(PyCFuncPtrObject *self, PyObject *argtypes,
     for (i = 0; i < len; ++i) {
         PyObject *item = PyTuple_GET_ITEM(paramflags, i);
         PyObject *ob;
-        int flag;
+        unsigned int flag;
         PyObject *name = NULL;
         PyObject *defval = NULL;
 
@@ -3699,7 +3800,7 @@ _build_callargs(PyCFuncPtrObject *self, PyObject *argtypes,
            calls below. */
         /* We HAVE already checked that the tuple can be parsed with "i|ZO", so... */
         Py_ssize_t tsize = PyTuple_GET_SIZE(item);
-        flag = PyLong_AS_LONG(PyTuple_GET_ITEM(item, 0));
+        flag = PyLong_AsUnsignedLongMask(PyTuple_GET_ITEM(item, 0));
         name = tsize > 1 ? PyTuple_GET_ITEM(item, 1) : NULL;
         defval = tsize > 2 ? PyTuple_GET_ITEM(item, 2) : NULL;
 
@@ -3779,7 +3880,7 @@ _build_callargs(PyCFuncPtrObject *self, PyObject *argtypes,
             break;
         default:
             PyErr_Format(PyExc_ValueError,
-                         "paramflag %d not yet implemented", flag);
+                         "paramflag %u not yet implemented", flag);
             goto error;
             break;
         }
@@ -4142,6 +4243,7 @@ _init_pos_args(PyObject *self, PyTypeObject *type,
     StgDictObject *dict;
     PyObject *fields;
     Py_ssize_t i;
+    _Py_IDENTIFIER(_fields_);
 
     if (PyType_stgdict((PyObject *)type->tp_base)) {
         index = _init_pos_args(self, type->tp_base,
@@ -4152,9 +4254,13 @@ _init_pos_args(PyObject *self, PyTypeObject *type,
     }
 
     dict = PyType_stgdict((PyObject *)type);
-    fields = PyDict_GetItemString((PyObject *)dict, "_fields_");
-    if (fields == NULL)
+    fields = _PyDict_GetItemIdWithError((PyObject *)dict, &PyId__fields_);
+    if (fields == NULL) {
+        if (PyErr_Occurred()) {
+            return -1;
+        }
         return index;
+    }
 
     for (i = 0;
          i < dict->length && (i+index) < PyTuple_GET_SIZE(args);
@@ -4170,13 +4276,20 @@ _init_pos_args(PyObject *self, PyTypeObject *type,
             return -1;
         }
         val = PyTuple_GET_ITEM(args, i + index);
-        if (kwds && PyDict_GetItem(kwds, name)) {
-            PyErr_Format(PyExc_TypeError,
-                         "duplicate values for field %R",
-                         name);
-            Py_DECREF(pair);
-            Py_DECREF(name);
-            return -1;
+        if (kwds) {
+            if (PyDict_GetItemWithError(kwds, name)) {
+                PyErr_Format(PyExc_TypeError,
+                            "duplicate values for field %R",
+                            name);
+                Py_DECREF(pair);
+                Py_DECREF(name);
+                return -1;
+            }
+            else if (PyErr_Occurred()) {
+                Py_DECREF(pair);
+                Py_DECREF(name);
+                return -1;
+            }
         }
 
         res = PyObject_SetAttr(self, name, val);
@@ -4376,8 +4489,7 @@ Array_subscript(PyObject *myself, PyObject *item)
         StgDictObject *stgdict, *itemdict;
         PyObject *proto;
         PyObject *np;
-        Py_ssize_t start, stop, step, slicelen, i;
-        size_t cur;
+        Py_ssize_t start, stop, step, slicelen, cur, i;
 
         if (PySlice_Unpack(item, &start, &stop, &step) < 0) {
             return NULL;
@@ -4517,8 +4629,7 @@ Array_ass_subscript(PyObject *myself, PyObject *item, PyObject *value)
         return Array_ass_item(myself, i, value);
     }
     else if (PySlice_Check(item)) {
-        Py_ssize_t start, stop, step, slicelen, otherlen, i;
-        size_t cur;
+        Py_ssize_t start, stop, step, slicelen, otherlen, i, cur;
 
         if (PySlice_Unpack(item, &start, &stop, &step) < 0) {
             return -1;
@@ -4649,6 +4760,10 @@ PyCArrayType_from_ctype(PyObject *itemtype, Py_ssize_t length)
         Py_DECREF(key);
         return result;
     }
+    else if (PyErr_Occurred()) {
+        Py_DECREF(key);
+        return NULL;
+    }
 
     if (!PyType_Check(itemtype)) {
         PyErr_SetString(PyExc_TypeError,
@@ -5023,8 +5138,7 @@ Pointer_subscript(PyObject *myself, PyObject *item)
         PyObject *np;
         StgDictObject *stgdict, *itemdict;
         PyObject *proto;
-        Py_ssize_t i, len;
-        size_t cur;
+        Py_ssize_t i, len, cur;
 
         /* Since pointers have no length, and we want to apply
            different semantics to negative indices than normal
@@ -5619,4 +5733,4 @@ PyInit__ctypes(void)
  Local Variables:
  compile-command: "cd .. && python setup.py -q build -g && python setup.py -q build install --home ~"
  End:
-*/
+*/
\ No newline at end of file
diff --git a/Modules/_ctypes/_ctypes_test.c b/Modules/_ctypes/_ctypes_test.c
index f59abcc451..b389dd2501 100644
--- a/Modules/_ctypes/_ctypes_test.c
+++ b/Modules/_ctypes/_ctypes_test.c
@@ -2,6 +2,8 @@
 
 #ifdef MS_WIN32
 #include <windows.h>
+#include <wtypes.h>
+#include <Unknwn.h>
 #endif
 
 #if defined(MS_WIN32) || defined(__CYGWIN__)
diff --git a/Modules/_ctypes/callbacks.c b/Modules/_ctypes/callbacks.c
index a3d1c386b7..dd7f87525d 100644
--- a/Modules/_ctypes/callbacks.c
+++ b/Modules/_ctypes/callbacks.c
@@ -136,7 +136,7 @@ static void _CallPythonObject(void *mem,
     PyObject *arglist = NULL;
     Py_ssize_t nArgs;
     PyObject *error_object = NULL;
-    int *space;
+    int *space = NULL;
     PyGILState_STATE state = PyGILState_Ensure();
 
     nArgs = PySequence_Length(converters);
@@ -233,13 +233,13 @@ if (x == NULL) _PyTraceback_Add(what, "_ctypes/callbacks.c", __LINE__ - 1), PyEr
     CHECK("'calling callback function'", result);
 
 #ifdef MS_WIN32
-    if (flags & FUNCFLAG_USE_LASTERROR) {
+    if (flags & FUNCFLAG_USE_LASTERROR && space != NULL) {
         int temp = space[1];
         space[1] = GetLastError();
         SetLastError(temp);
     }
 #endif
-    if (flags & FUNCFLAG_USE_ERRNO) {
+    if (flags & FUNCFLAG_USE_ERRNO && space != NULL) {
         int temp = space[0];
         space[0] = errno;
         errno = temp;
@@ -375,7 +375,7 @@ CThunkObject *_ctypes_alloc_callback(PyObject *callable,
     }
 
     cc = FFI_DEFAULT_ABI;
-#if defined(MS_WIN32) && !defined(_WIN32_WCE) && !defined(MS_WIN64)
+#if defined(MS_WIN32) && defined(_M_IX86) && !defined(_WIN32_WCE)
     if ((flags & FUNCFLAG_CDECL) == 0)
         cc = FFI_STDCALL;
 #endif
diff --git a/Modules/_ctypes/callproc.c b/Modules/_ctypes/callproc.c
index 5861042398..a01009a777 100644
--- a/Modules/_ctypes/callproc.c
+++ b/Modules/_ctypes/callproc.c
@@ -146,7 +146,7 @@ _ctypes_get_errobj(int **pspace)
         if (error_object_name == NULL)
             return NULL;
     }
-    errobj = PyDict_GetItem(dict, error_object_name);
+    errobj = PyDict_GetItemWithError(dict, error_object_name);
     if (errobj) {
         if (!PyCapsule_IsValid(errobj, CTYPES_CAPSULE_NAME_PYMEM)) {
             PyErr_SetString(PyExc_RuntimeError,
@@ -155,7 +155,7 @@ _ctypes_get_errobj(int **pspace)
         }
         Py_INCREF(errobj);
     }
-    else {
+    else if (!PyErr_Occurred()) {
         void *space = PyMem_Malloc(sizeof(int) * 2);
         if (space == NULL)
             return NULL;
@@ -171,6 +171,9 @@ _ctypes_get_errobj(int **pspace)
             return NULL;
         }
     }
+    else {
+        return NULL;
+    }
     *pspace = (int *)PyCapsule_GetPointer(errobj, CTYPES_CAPSULE_NAME_PYMEM);
     return errobj;
 }
@@ -239,9 +242,7 @@ static WCHAR *FormatError(DWORD code)
 {
     WCHAR *lpMsgBuf;
     DWORD n;
-    n = FormatMessageW(FORMAT_MESSAGE_ALLOCATE_BUFFER |
-                       FORMAT_MESSAGE_FROM_SYSTEM |
-                       FORMAT_MESSAGE_IGNORE_INSERTS,
+    n = FormatMessageW(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,
                        NULL,
                        code,
                        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), /* Default language */
@@ -705,8 +706,11 @@ static int ConvParam(PyObject *obj, Py_ssize_t index, struct argument *pa)
 #endif
 
     {
+        _Py_IDENTIFIER(_as_parameter_);
         PyObject *arg;
-        arg = PyObject_GetAttrString(obj, "_as_parameter_");
+        if (_PyObject_LookupAttrId(obj, &PyId__as_parameter_, &arg) < 0) {
+            return -1;
+        }
         /* Which types should we exactly allow here?
            integers are required for using Python classes
            as parameters (they have to expose the '_as_parameter_'
@@ -725,6 +729,22 @@ static int ConvParam(PyObject *obj, Py_ssize_t index, struct argument *pa)
     }
 }
 
+#if defined(MS_WIN32) && !defined(_WIN32_WCE)
+/*
+Per: https://msdn.microsoft.com/en-us/library/7572ztz4.aspx
+To be returned by value in RAX, user-defined types must have a length 
+of 1, 2, 4, 8, 16, 32, or 64 bits
+*/
+int can_return_struct_as_int(size_t s)
+{
+  return s == 1 || s == 2 || s == 4;
+}
+
+int can_return_struct_as_sint64(size_t s)
+{
+  return s == 8;
+}
+#endif
 
 ffi_type *_ctypes_get_ffi_type(PyObject *obj)
 {
@@ -771,15 +791,12 @@ static int _call_function_pointer(int flags,
 {
     PyThreadState *_save = NULL; /* For Py_BLOCK_THREADS and Py_UNBLOCK_THREADS */
     PyObject *error_object = NULL;
-    int *space;
+    int *space = NULL;
     ffi_cif cif;
     int cc;
-#ifdef MS_WIN32
-    int delta;
-#ifndef DONT_USE_SEH
+#if defined(MS_WIN32) && !defined(DONT_USE_SEH)
     DWORD dwExceptionCode = 0;
     EXCEPTION_RECORD record;
-#endif
 #endif
     /* XXX check before here */
     if (restype == NULL) {
@@ -789,7 +806,7 @@ static int _call_function_pointer(int flags,
     }
 
     cc = FFI_DEFAULT_ABI;
-#if defined(MS_WIN32) && !defined(MS_WIN64) && !defined(_WIN32_WCE)
+#if defined(MS_WIN32) && defined(_M_IX86) && !defined(_WIN32_WCE)
     if ((flags & FUNCFLAG_CDECL) == 0)
         cc = FFI_STDCALL;
 #endif
@@ -810,13 +827,13 @@ static int _call_function_pointer(int flags,
     }
     if ((flags & FUNCFLAG_PYTHONAPI) == 0)
         Py_UNBLOCK_THREADS
-    if (flags & FUNCFLAG_USE_ERRNO) {
+    if (flags & FUNCFLAG_USE_ERRNO && space != NULL) {
         int temp = space[0];
         space[0] = errno;
         errno = temp;
     }
 #ifdef MS_WIN32
-    if (flags & FUNCFLAG_USE_LASTERROR) {
+    if (flags & FUNCFLAG_USE_LASTERROR && space != NULL) {
         int temp = space[1];
         space[1] = GetLastError();
         SetLastError(temp);
@@ -824,7 +841,6 @@ static int _call_function_pointer(int flags,
 #ifndef DONT_USE_SEH
     __try {
 #endif
-        delta =
 #endif
                 ffi_call(&cif, (void *)pProc, resmem, avalues);
 #ifdef MS_WIN32
@@ -835,13 +851,13 @@ static int _call_function_pointer(int flags,
         ;
     }
 #endif
-    if (flags & FUNCFLAG_USE_LASTERROR) {
+    if (flags & FUNCFLAG_USE_LASTERROR && space != NULL) {
         int temp = space[1];
         space[1] = GetLastError();
         SetLastError(temp);
     }
 #endif
-    if (flags & FUNCFLAG_USE_ERRNO) {
+    if (flags & FUNCFLAG_USE_ERRNO && space != NULL) {
         int temp = space[0];
         space[0] = errno;
         errno = temp;
@@ -856,35 +872,6 @@ static int _call_function_pointer(int flags,
         return -1;
     }
 #endif
-#ifdef MS_WIN64
-    if (delta != 0) {
-        PyErr_Format(PyExc_RuntimeError,
-                 "ffi_call failed with code %d",
-                 delta);
-        return -1;
-    }
-#else
-    if (delta < 0) {
-        if (flags & FUNCFLAG_CDECL)
-            PyErr_Format(PyExc_ValueError,
-                     "Procedure called with not enough "
-                     "arguments (%d bytes missing) "
-                     "or wrong calling convention",
-                     -delta);
-        else
-            PyErr_Format(PyExc_ValueError,
-                     "Procedure probably called with not enough "
-                     "arguments (%d bytes missing)",
-                     -delta);
-        return -1;
-    } else if (delta > 0) {
-        PyErr_Format(PyExc_ValueError,
-                 "Procedure probably called with too many "
-                 "arguments (%d bytes in excess)",
-                 delta);
-        return -1;
-    }
-#endif
 #endif
     if ((flags & FUNCFLAG_PYTHONAPI) && PyErr_Occurred())
         return -1;
@@ -983,6 +970,7 @@ error:
 
 
 #ifdef MS_WIN32
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
 
 static PyObject *
 GetComError(HRESULT errcode, GUID *riid, IUnknown *pIunk)
@@ -1052,6 +1040,7 @@ GetComError(HRESULT errcode, GUID *riid, IUnknown *pIunk)
     return NULL;
 }
 #endif
+#endif
 
 #if (defined(__x86_64__) && (defined(__MINGW64__) || defined(__CYGWIN__))) || \
     defined(__aarch64__) || defined(__riscv)
@@ -1209,9 +1198,11 @@ PyObject *_ctypes_callproc(PPROC pProc,
 
 #ifdef MS_WIN32
     if (iid && pIunk) {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
         if (*(int *)resbuf & 0x80000000)
             retval = GetComError(*(HRESULT *)resbuf, iid, pIunk);
         else
+#endif
             retval = PyLong_FromLong(*(int *)resbuf);
     } else if (flags & FUNCFLAG_HRESULT) {
         if (*(int *)resbuf & 0x80000000)
@@ -1282,7 +1273,14 @@ static PyObject *load_library(PyObject *self, PyObject *args)
     if (!name)
         return NULL;
 
-    hMod = LoadLibraryW(name);
+	Py_BEGIN_ALLOW_THREADS
+#ifdef MS_DESKTOP
+	hMod = LoadLibraryW(name);
+#else
+	hMod = LoadPackagedLibrary(name, 0);
+#endif
+    Py_END_ALLOW_THREADS
+
     if (!hMod)
         return PyErr_SetFromWindowsErr(GetLastError());
 #ifdef _WIN64
@@ -1299,9 +1297,15 @@ Free the handle of an executable previously loaded by LoadLibrary.\n";
 static PyObject *free_library(PyObject *self, PyObject *args)
 {
     void *hMod;
+    BOOL result;
     if (!PyArg_ParseTuple(args, "O&:FreeLibrary", &_parse_voidp, &hMod))
         return NULL;
-    if (!FreeLibrary((HMODULE)hMod))
+
+    Py_BEGIN_ALLOW_THREADS
+    result = FreeLibrary((HMODULE)hMod);
+    Py_END_ALLOW_THREADS
+
+    if (!result)
         return PyErr_SetFromWindowsErr(GetLastError());
     Py_RETURN_NONE;
 }
@@ -1705,11 +1709,14 @@ POINTER(PyObject *self, PyObject *cls)
     PyObject *key;
     char *buf;
 
-    result = PyDict_GetItem(_ctypes_ptrtype_cache, cls);
+    result = PyDict_GetItemWithError(_ctypes_ptrtype_cache, cls);
     if (result) {
         Py_INCREF(result);
         return result;
     }
+    else if (PyErr_Occurred()) {
+        return NULL;
+    }
     if (PyUnicode_CheckExact(cls)) {
         const char *name = PyUnicode_AsUTF8(cls);
         if (name == NULL)
@@ -1765,12 +1772,16 @@ pointer(PyObject *self, PyObject *arg)
     PyObject *result;
     PyObject *typ;
 
-    typ = PyDict_GetItem(_ctypes_ptrtype_cache, (PyObject *)Py_TYPE(arg));
-    if (typ)
+    typ = PyDict_GetItemWithError(_ctypes_ptrtype_cache, (PyObject *)Py_TYPE(arg));
+    if (typ) {
         return PyObject_CallFunctionObjArgs(typ, arg, NULL);
+    }
+    else if (PyErr_Occurred()) {
+        return NULL;
+    }
     typ = POINTER(NULL, (PyObject *)Py_TYPE(arg));
     if (typ == NULL)
-                    return NULL;
+        return NULL;
     result = PyObject_CallFunctionObjArgs(typ, arg, NULL);
     Py_DECREF(typ);
     return result;
@@ -1841,4 +1852,4 @@ PyMethodDef _ctypes_module_methods[] = {
  Local Variables:
  compile-command: "cd .. && python setup.py -q build -g && python setup.py -q build install --home ~"
  End:
-*/
+*/
\ No newline at end of file
diff --git a/Modules/_ctypes/ctypes.h b/Modules/_ctypes/ctypes.h
index 5d3b966338..09017bb86c 100644
--- a/Modules/_ctypes/ctypes.h
+++ b/Modules/_ctypes/ctypes.h
@@ -11,6 +11,14 @@
 #define PARAMFLAG_FLCID 0x4
 #endif
 
+#ifdef MS_WINDOWS
+#ifndef WIN32_LEAN_AND_MEAN
+#define WIN32_LEAN_AND_MEAN
+#endif
+#include <Windows.h>
+#include <Unknwn.h>
+#endif
+
 typedef struct tagPyCArgObject PyCArgObject;
 typedef struct tagCDataObject CDataObject;
 typedef PyObject *(* GETFUNC)(void *, Py_ssize_t size);
diff --git a/Modules/_io/bufferedio.c b/Modules/_io/bufferedio.c
index 358a654a98..0d130b1f0d 100644
--- a/Modules/_io/bufferedio.c
+++ b/Modules/_io/bufferedio.c
@@ -487,7 +487,7 @@ buffered_closed_get(buffered *self, void *context)
 static PyObject *
 buffered_close(buffered *self, PyObject *args)
 {
-    PyObject *res = NULL, *exc = NULL, *val, *tb;
+    PyObject *res = NULL, *exc = NULL, *val = NULL, *tb = NULL;
     int r;
 
     CHECK_INITIALIZED(self)
@@ -2227,7 +2227,7 @@ bufferedrwpair_writable(rwpair *self, PyObject *args)
 static PyObject *
 bufferedrwpair_close(rwpair *self, PyObject *args)
 {
-    PyObject *exc = NULL, *val, *tb;
+    PyObject *exc = NULL, *val = NULL, *tb = NULL;
     PyObject *ret = _forward_call(self->writer, &PyId_close, args);
     if (ret == NULL)
         PyErr_Fetch(&exc, &val, &tb);
diff --git a/Modules/_io/fileio.c b/Modules/_io/fileio.c
index 8bbe1ce367..c867576e9d 100644
--- a/Modules/_io/fileio.c
+++ b/Modules/_io/fileio.c
@@ -141,7 +141,7 @@ _io_FileIO_close_impl(fileio *self)
 /*[clinic end generated code: output=7737a319ef3bad0b input=f35231760d54a522]*/
 {
     PyObject *res;
-    PyObject *exc, *val, *tb;
+    PyObject *exc = NULL, *val = NULL, *tb = NULL;
     int rc;
     _Py_IDENTIFIER(close);
     res = _PyObject_CallMethodIdObjArgs((PyObject*)&PyRawIOBase_Type,
diff --git a/Modules/_io/textio.c b/Modules/_io/textio.c
index 49b545c478..e8ff1a6f93 100644
--- a/Modules/_io/textio.c
+++ b/Modules/_io/textio.c
@@ -2939,7 +2939,7 @@ _io_TextIOWrapper_close_impl(textio *self)
         Py_RETURN_NONE; /* stream already closed */
     }
     else {
-        PyObject *exc = NULL, *val, *tb;
+        PyObject *exc = NULL, *val = NULL, *tb = NULL;
         if (self->finalizing) {
             res = _PyObject_CallMethodIdObjArgs(self->buffer,
                                                 &PyId__dealloc_warn,
diff --git a/Modules/_io/winconsoleio.c b/Modules/_io/winconsoleio.c
index bf5b10b494..f688eabc17 100644
--- a/Modules/_io/winconsoleio.c
+++ b/Modules/_io/winconsoleio.c
@@ -44,6 +44,12 @@
    of less than one character */
 #define SMALLBUF 4
 
+#ifdef MS_WINDOWS
+/* defined in fileutils.c */
+PyAPI_FUNC(HANDLE) _Py_win_create_file(LPCWSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES,
+										DWORD, DWORD, HANDLE);
+#endif
+
 char _get_console_type(HANDLE handle) {
     DWORD mode, peek_count;
 
@@ -200,7 +206,7 @@ _io__WindowsConsoleIO_close_impl(winconsoleio *self)
 /*[clinic end generated code: output=27ef95b66c29057b input=185617e349ae4c7b]*/
 {
     PyObject *res;
-    PyObject *exc, *val, *tb;
+    PyObject *exc = NULL, *val = NULL, *tb = NULL;
     int rc;
     _Py_IDENTIFIER(close);
     res = _PyObject_CallMethodIdObjArgs((PyObject*)&PyRawIOBase_Type,
@@ -368,10 +374,10 @@ _io__WindowsConsoleIO___init___impl(winconsoleio *self, PyObject *nameobj,
            on the specific access. This is required for modern names
            CONIN$ and CONOUT$, which allow reading/writing state as
            well as reading/writing content. */
-        self->handle = CreateFileW(name, GENERIC_READ | GENERIC_WRITE,
+        self->handle = _Py_win_create_file(name, GENERIC_READ | GENERIC_WRITE,
             FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);
         if (self->handle == INVALID_HANDLE_VALUE)
-            self->handle = CreateFileW(name, access,
+            self->handle = _Py_win_create_file(name, access,
                 FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);
         Py_END_ALLOW_THREADS
 
diff --git a/Modules/_json.c b/Modules/_json.c
index ac6e017a4e..b9d41b187b 100644
--- a/Modules/_json.c
+++ b/Modules/_json.c
@@ -1,7 +1,9 @@
 
 /* Core extension modules are built-in on some platforms (e.g. Windows). */
 #ifdef Py_BUILD_CORE
+#ifndef Py_BUILD_CORE_BUILTIN
 #define Py_BUILD_CORE_BUILTIN
+#endif
 #undef Py_BUILD_CORE
 #endif
 
diff --git a/Modules/_localemodule.c b/Modules/_localemodule.c
index f946898118..2f692a2fc9 100644
--- a/Modules/_localemodule.c
+++ b/Modules/_localemodule.c
@@ -391,31 +391,31 @@ exit:
 static PyObject*
 PyLocale_getdefaultlocale(PyObject* self)
 {
-    char encoding[100];
-    char locale[100];
+    wchar_t encoding[100];
+    wchar_t locale[100];
 
-    PyOS_snprintf(encoding, sizeof(encoding), "cp%u", GetACP());
+    PyOS_snwprintf(encoding, sizeof(encoding), L"cp%u", GetACP());
 
-    if (GetLocaleInfo(LOCALE_USER_DEFAULT,
+    if (GetLocaleInfoW(LOCALE_USER_DEFAULT,
                       LOCALE_SISO639LANGNAME,
-                      locale, sizeof(locale))) {
-        Py_ssize_t i = strlen(locale);
+                      locale,  sizeof(locale) / sizeof(wchar_t))) {
+        Py_ssize_t i = wcslen(locale);
         locale[i++] = '_';
-        if (GetLocaleInfo(LOCALE_USER_DEFAULT,
+        if (GetLocaleInfoW(LOCALE_USER_DEFAULT,
                           LOCALE_SISO3166CTRYNAME,
-                          locale+i, (int)(sizeof(locale)-i)))
-            return Py_BuildValue("ss", locale, encoding);
+                          locale+i, (int)(sizeof(locale)-i) / sizeof(wchar_t)))
+            return Py_BuildValue("uu", locale, encoding);
     }
 
     /* If we end up here, this windows version didn't know about
        ISO639/ISO3166 names (it's probably Windows 95).  Return the
        Windows language identifier instead (a hexadecimal number) */
 
-    locale[0] = '0';
-    locale[1] = 'x';
-    if (GetLocaleInfo(LOCALE_USER_DEFAULT, LOCALE_IDEFAULTLANGUAGE,
+    locale[0] = L'0';
+    locale[1] = L'x';
+    if (GetLocaleInfoW(LOCALE_USER_DEFAULT, LOCALE_IDEFAULTLANGUAGE,
                       locale+2, sizeof(locale)-2)) {
-        return Py_BuildValue("ss", locale, encoding);
+        return Py_BuildValue("uu", locale, encoding);
     }
 
     /* cannot determine the language code (very unlikely) */
diff --git a/Modules/_pickle.c b/Modules/_pickle.c
index dd45772595..729fad07db 100644
--- a/Modules/_pickle.c
+++ b/Modules/_pickle.c
@@ -1,7 +1,9 @@
 
 /* Core extension modules are built-in on some platforms (e.g. Windows). */
 #ifdef Py_BUILD_CORE
+#ifndef Py_BUILD_CORE_BUILTIN
 #define Py_BUILD_CORE_BUILTIN
+#endif
 #undef Py_BUILD_CORE
 #endif
 
@@ -26,6 +28,11 @@ enum {
     DEFAULT_PROTOCOL = 3
 };
 
+#ifdef UNICODE
+#define REDEFINE_UNICODE 1
+#undef UNICODE
+#endif
+
 /* Pickle opcodes. These must be kept updated with pickle.py.
    Extensive docs are in pickletools.py. */
 enum opcode {
@@ -102,6 +109,11 @@ enum opcode {
     FRAME            = '\x95'
 };
 
+#ifdef REDEFINE_UNICODE
+#define UNICODE 1
+#undef REDEFINE_UNICODE
+#endif
+
 enum {
    /* Keep in synch with pickle.Pickler._BATCHSIZE.  This is how many elements
       batch_list/dict() pumps out before doing APPENDS/SETITEMS.  Nothing will
diff --git a/Modules/_randommodule.c b/Modules/_randommodule.c
index 1a76ba99ab..c6d4830690 100644
--- a/Modules/_randommodule.c
+++ b/Modules/_randommodule.c
@@ -222,7 +222,7 @@ random_seed_time_pid(RandomObject *self)
     key[0] = (PY_UINT32_T)(now & 0xffffffffU);
     key[1] = (PY_UINT32_T)(now >> 32);
 
-    key[2] = (PY_UINT32_T)getpid();
+    key[2] = (PY_UINT32_T)_getpid();
 
     now = _PyTime_GetMonotonicClock();
     key[3] = (PY_UINT32_T)(now & 0xffffffffU);
diff --git a/Modules/_ssl.c b/Modules/_ssl.c
index a94dbbaec8..95532f9343 100644
--- a/Modules/_ssl.c
+++ b/Modules/_ssl.c
@@ -64,6 +64,11 @@ static PySocketModule_APIObject PySocketModule;
 #include "openssl/rand.h"
 #include "openssl/bio.h"
 #include "openssl/dh.h"
+#include "openssl/ossl_typ.h"
+
+#ifdef MS_WINDOWS
+#include <wincrypt.h>
+#endif
 
 #ifndef HAVE_X509_VERIFY_PARAM_SET1_HOST
 #  ifdef LIBRESSL_VERSION_NUMBER
@@ -1144,7 +1149,7 @@ _create_tuple_for_attribute(ASN1_OBJECT *name, ASN1_STRING *value)
 }
 
 static PyObject *
-_create_tuple_for_X509_NAME (X509_NAME *xname)
+_create_tuple_for_X509_NAME (struct X509_name_st *xname)
 {
     PyObject *dn = NULL;    /* tuple which represents the "distinguished name" */
     PyObject *rdn = NULL;   /* tuple to hold a "relative distinguished name" */
@@ -4085,6 +4090,23 @@ _ssl._SSLContext.load_dh_params
 
 [clinic start generated code]*/
 
+#ifdef MS_APP
+DH *PEM_read_DHparams(FILE *fp, DH **x, pem_password_cb *cb, void *u)
+{
+    BIO *b;
+    DH *ret;
+
+    if ((b = BIO_new(BIO_s_file())) == NULL) {
+        PEMerr(PEM_F_PEM_READ_DHPARAMS, ERR_R_BUF_LIB);
+        return 0;
+    }
+    BIO_set_fp(b, fp, BIO_NOCLOSE);
+    ret = PEM_read_bio_DHparams(b, x, cb, u);
+    BIO_free(b);
+    return ret;
+}
+#endif
+
 static PyObject *
 _ssl__SSLContext_load_dh_params(PySSLContext *self, PyObject *filepath)
 /*[clinic end generated code: output=1c8e57a38e055af0 input=c8871f3c796ae1d6]*/
diff --git a/Modules/_winapi.c b/Modules/_winapi.c
index 036464d9ab..429fce9e0a 100644
--- a/Modules/_winapi.c
+++ b/Modules/_winapi.c
@@ -37,8 +37,11 @@
 #include "Python.h"
 #include "structmember.h"
 
+#ifndef WINDOWS_LEAN_AND_MEAN
 #define WINDOWS_LEAN_AND_MEAN
-#include "windows.h"
+#endif
+#include <windows.h>
+#include <winioctl.h>
 #include <crtdbg.h>
 #include "winreparse.h"
 
@@ -61,24 +64,6 @@
 
 #define T_HANDLE T_POINTER
 
-/* Grab CancelIoEx dynamically from kernel32 */
-static int has_CancelIoEx = -1;
-static BOOL (CALLBACK *Py_CancelIoEx)(HANDLE, LPOVERLAPPED);
-
-static int
-check_CancelIoEx()
-{
-    if (has_CancelIoEx == -1)
-    {
-        HINSTANCE hKernel32 = GetModuleHandle("KERNEL32");
-        * (FARPROC *) &Py_CancelIoEx = GetProcAddress(hKernel32,
-                                                      "CancelIoEx");
-        has_CancelIoEx = (Py_CancelIoEx != NULL);
-    }
-    return has_CancelIoEx;
-}
-
-
 /*
  * A Python object wrapping an OVERLAPPED structure and other useful data
  * for overlapped I/O
@@ -106,9 +91,7 @@ overlapped_dealloc(OverlappedObject *self)
     int err = GetLastError();
 
     if (self->pending) {
-        if (check_CancelIoEx() &&
-            Py_CancelIoEx(self->handle, &self->overlapped) &&
-            GetOverlappedResult(self->handle, &self->overlapped, &bytes, TRUE))
+        if (GetOverlappedResult(self->handle, &self->overlapped, &bytes, TRUE))
         {
             /* The operation is no longer pending -- nothing to do. */
         }
@@ -265,10 +248,7 @@ _winapi_Overlapped_cancel_impl(OverlappedObject *self)
 
     if (self->pending) {
         Py_BEGIN_ALLOW_THREADS
-        if (check_CancelIoEx())
-            res = Py_CancelIoEx(self->handle, &self->overlapped);
-        else
-            res = CancelIo(self->handle);
+		res = CancelIo(self->handle);
         Py_END_ALLOW_THREADS
     }
 
@@ -427,6 +407,17 @@ _winapi_ConnectNamedPipe_impl(PyObject *module, HANDLE handle,
     Py_RETURN_NONE;
 }
 
+HANDLE
+_Py_win_create_file(
+	_In_ LPCWSTR lpFileName,
+	_In_ DWORD dwDesiredAccess,
+	_In_ DWORD dwShareMode,
+	_In_opt_ LPSECURITY_ATTRIBUTES lpSecurityAttributes,
+	_In_ DWORD dwCreationDisposition,
+	_In_ DWORD dwFlagsAndAttributes,
+	_In_opt_ HANDLE hTemplateFile
+);
+
 /*[clinic input]
 _winapi.CreateFile -> HANDLE
 
@@ -441,7 +432,7 @@ _winapi.CreateFile -> HANDLE
 [clinic start generated code]*/
 
 static HANDLE
-_winapi_CreateFile_impl(PyObject *module, LPCTSTR file_name,
+_winapi_CreateFile_impl(PyObject *module, LPCWSTR file_name,
                         DWORD desired_access, DWORD share_mode,
                         LPSECURITY_ATTRIBUTES security_attributes,
                         DWORD creation_disposition,
@@ -450,11 +441,11 @@ _winapi_CreateFile_impl(PyObject *module, LPCTSTR file_name,
 {
     HANDLE handle;
 
-    Py_BEGIN_ALLOW_THREADS
-    handle = CreateFile(file_name, desired_access,
-                        share_mode, security_attributes,
-                        creation_disposition,
-                        flags_and_attributes, template_file);
+	Py_BEGIN_ALLOW_THREADS
+	handle = _Py_win_create_file(file_name, desired_access,
+		share_mode, security_attributes,
+		creation_disposition,
+		flags_and_attributes, template_file);
     Py_END_ALLOW_THREADS
 
     if (handle == INVALID_HANDLE_VALUE)
@@ -476,6 +467,9 @@ _winapi_CreateJunction_impl(PyObject *module, LPWSTR src_path,
                             LPWSTR dst_path)
 /*[clinic end generated code: output=66b7eb746e1dfa25 input=8cd1f9964b6e3d36]*/
 {
+#ifdef MS_APP
+	Py_RETURN_NOTIMPLEMENTED;
+#else
     /* Privilege adjustment */
     HANDLE token = NULL;
     TOKEN_PRIVILEGES tp;
@@ -598,6 +592,7 @@ cleanup:
         return PyErr_SetFromWindowsErr(ret);
 
     Py_RETURN_NONE;
+#endif
 }
 
 /*[clinic input]
@@ -858,7 +853,7 @@ cleanup:
     Py_XDECREF(value_fast);
     return ret;
 }
-
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
 typedef struct {
     LPPROC_THREAD_ATTRIBUTE_LIST attribute_list;
     LPHANDLE handle_list;
@@ -1091,6 +1086,8 @@ cleanup:
     return ret;
 }
 
+#endif
+
 /*[clinic input]
 _winapi.DuplicateHandle -> HANDLE
 
@@ -1289,7 +1286,16 @@ _winapi_GetVersion_impl(PyObject *module)
 #pragma warning(disable:4996)
 
 {
-    return GetVersion();
+	OSVERSIONINFOW version_info;
+	version_info.dwOSVersionInfoSize = sizeof(version_info);
+
+	if (GetVersionExW(&version_info)) {
+		return version_info.dwMinorVersion |
+			(version_info.dwMajorVersion << 8) |
+			(version_info.dwBuildNumber << 16);
+	}
+	
+	return 0;
 }
 
 #pragma warning(pop)
@@ -1722,8 +1728,10 @@ static PyMethodDef winapi_functions[] = {
     _WINAPI_CREATEFILE_METHODDEF
     _WINAPI_CREATENAMEDPIPE_METHODDEF
     _WINAPI_CREATEPIPE_METHODDEF
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
     _WINAPI_CREATEPROCESS_METHODDEF
     _WINAPI_CREATEJUNCTION_METHODDEF
+#endif
     _WINAPI_DUPLICATEHANDLE_METHODDEF
     _WINAPI_EXITPROCESS_METHODDEF
     _WINAPI_GETCURRENTPROCESS_METHODDEF
@@ -1813,8 +1821,10 @@ PyInit__winapi(void)
     WINAPI_CONSTANT(F_DWORD, PIPE_WAIT);
     WINAPI_CONSTANT(F_DWORD, PROCESS_ALL_ACCESS);
     WINAPI_CONSTANT(F_DWORD, PROCESS_DUP_HANDLE);
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
     WINAPI_CONSTANT(F_DWORD, STARTF_USESHOWWINDOW);
     WINAPI_CONSTANT(F_DWORD, STARTF_USESTDHANDLES);
+#endif
     WINAPI_CONSTANT(F_DWORD, STD_INPUT_HANDLE);
     WINAPI_CONSTANT(F_DWORD, STD_OUTPUT_HANDLE);
     WINAPI_CONSTANT(F_DWORD, STD_ERROR_HANDLE);
diff --git a/Modules/atexitmodule.c b/Modules/atexitmodule.c
index afa1cfad6c..057789a472 100644
--- a/Modules/atexitmodule.c
+++ b/Modules/atexitmodule.c
@@ -65,7 +65,7 @@ atexit_cleanup(atexitmodule_state *modstate)
 static void
 atexit_callfuncs(PyObject *module)
 {
-    PyObject *exc_type = NULL, *exc_value, *exc_tb, *r;
+    PyObject *exc_type = NULL, *exc_value = NULL, *exc_tb = NULL, *r = NULL;
     atexit_callback *cb;
     atexitmodule_state *modstate;
     int i;
diff --git a/Modules/clinic/_winapi.c.h b/Modules/clinic/_winapi.c.h
index f4d884237b..0575c2d389 100644
--- a/Modules/clinic/_winapi.c.h
+++ b/Modules/clinic/_winapi.c.h
@@ -131,7 +131,7 @@ PyDoc_STRVAR(_winapi_CreateFile__doc__,
     {"CreateFile", (PyCFunction)_winapi_CreateFile, METH_FASTCALL, _winapi_CreateFile__doc__},
 
 static HANDLE
-_winapi_CreateFile_impl(PyObject *module, LPCTSTR file_name,
+_winapi_CreateFile_impl(PyObject *module, LPCWSTR file_name,
                         DWORD desired_access, DWORD share_mode,
                         LPSECURITY_ATTRIBUTES security_attributes,
                         DWORD creation_disposition,
@@ -141,7 +141,7 @@ static PyObject *
 _winapi_CreateFile(PyObject *module, PyObject *const *args, Py_ssize_t nargs)
 {
     PyObject *return_value = NULL;
-    LPCTSTR file_name;
+    LPCWSTR file_name;
     DWORD desired_access;
     DWORD share_mode;
     LPSECURITY_ATTRIBUTES security_attributes;
@@ -150,7 +150,7 @@ _winapi_CreateFile(PyObject *module, PyObject *const *args, Py_ssize_t nargs)
     HANDLE template_file;
     HANDLE _return_value;
 
-    if (!_PyArg_ParseStack(args, nargs, "skk" F_POINTER "kk" F_HANDLE ":CreateFile",
+    if (!_PyArg_ParseStack(args, nargs, "ukk" F_POINTER "kk" F_HANDLE ":CreateFile",
         &file_name, &desired_access, &share_mode, &security_attributes, &creation_disposition, &flags_and_attributes, &template_file)) {
         goto exit;
     }
@@ -278,6 +278,7 @@ exit:
     return return_value;
 }
 
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
 PyDoc_STRVAR(_winapi_CreateProcess__doc__,
 "CreateProcess($module, application_name, command_line, proc_attrs,\n"
 "              thread_attrs, inherit_handles, creation_flags,\n"
@@ -331,6 +332,7 @@ _winapi_CreateProcess(PyObject *module, PyObject *const *args, Py_ssize_t nargs)
 exit:
     return return_value;
 }
+#endif
 
 PyDoc_STRVAR(_winapi_DuplicateHandle__doc__,
 "DuplicateHandle($module, source_process_handle, source_handle,\n"
diff --git a/Modules/faulthandler.c b/Modules/faulthandler.c
index 97c64f6330..1eea16f78e 100644
--- a/Modules/faulthandler.c
+++ b/Modules/faulthandler.c
@@ -471,7 +471,7 @@ faulthandler_enable(void)
         handler->enabled = 1;
     }
 
-#ifdef MS_WINDOWS
+#if defined(MS_WINDOWS) && defined(MS_DESKTOP)
     assert(fatal_error.exc_handler == NULL);
     fatal_error.exc_handler = AddVectoredExceptionHandler(1, faulthandler_exc_handler);
 #endif
@@ -523,7 +523,7 @@ faulthandler_disable(void)
             faulthandler_disable_fatal_handler(handler);
         }
     }
-#ifdef MS_WINDOWS
+#if defined(MS_WINDOWS) && defined(MS_DESKTOP)
     if (fatal_error.exc_handler != NULL) {
         RemoveVectoredExceptionHandler(fatal_error.exc_handler);
         fatal_error.exc_handler = NULL;
@@ -920,7 +920,7 @@ faulthandler_unregister_py(PyObject *self, PyObject *args)
 static void
 faulthandler_suppress_crash_report(void)
 {
-#ifdef MS_WINDOWS
+#if defined(MS_WINDOWS) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
     UINT mode;
 
     /* Configure Windows to not display the Windows Error Reporting dialog */
diff --git a/Modules/mmapmodule.c b/Modules/mmapmodule.c
index 37a5c3dade..bca2c95089 100644
--- a/Modules/mmapmodule.c
+++ b/Modules/mmapmodule.c
@@ -102,7 +102,7 @@ typedef struct {
 #ifdef MS_WINDOWS
     HANDLE      map_handle;
     HANDLE      file_handle;
-    char *      tagname;
+    wchar_t *      tagname;
 #endif
 
 #ifdef UNIX
@@ -408,20 +408,17 @@ mmap_size_method(mmap_object *self,
 
 #ifdef MS_WINDOWS
     if (self->file_handle != INVALID_HANDLE_VALUE) {
-        DWORD low,high;
-        long long size;
-        low = GetFileSize(self->file_handle, &high);
-        if (low == INVALID_FILE_SIZE) {
+		LARGE_INTEGER size;
+        if (!GetFileSizeEx(self->file_handle, &size)) {
             /* It might be that the function appears to have failed,
                when indeed its size equals INVALID_FILE_SIZE */
             DWORD error = GetLastError();
             if (error != NO_ERROR)
                 return PyErr_SetFromWindowsErr(error);
         }
-        if (!high && low < LONG_MAX)
-            return PyLong_FromLong((long)low);
-        size = (((long long)high)<<32) + low;
-        return PyLong_FromLongLong(size);
+        if (!size.HighPart && size.LowPart < LONG_MAX)
+            return PyLong_FromLong((long)size.LowPart);
+        return PyLong_FromLongLong(size.QuadPart);
     } else {
         return PyLong_FromSsize_t(self->size);
     }
@@ -687,7 +684,7 @@ mmap__sizeof__method(mmap_object *self, void *unused)
 
     res = _PyObject_SIZE(Py_TYPE(self));
     if (self->tagname)
-        res += strlen(self->tagname) + 1;
+        res += wcslen(self->tagname) + 1;
     return PyLong_FromSsize_t(res);
 }
 #endif
@@ -1296,17 +1293,13 @@ new_mmap_object(PyTypeObject *type, PyObject *args, PyObject *kwdict)
             return NULL;
         }
         if (!map_size) {
-            DWORD low,high;
-            low = GetFileSize(fh, &high);
-            /* low might just happen to have the value INVALID_FILE_SIZE;
-               so we need to check the last error also. */
-            if (low == INVALID_FILE_SIZE &&
-                (dwErr = GetLastError()) != NO_ERROR) {
+			LARGE_INTEGER sizeStruct;
+            if (!GetFileSizeEx(fh, &sizeStruct)) {
                 Py_DECREF(m_obj);
                 return PyErr_SetFromWindowsErr(dwErr);
             }
 
-            size = (((long long) high) << 32) + low;
+			size = sizeStruct.QuadPart;
             if (size == 0) {
                 PyErr_SetString(PyExc_ValueError,
                                 "cannot mmap an empty file");
@@ -1349,7 +1342,7 @@ new_mmap_object(PyTypeObject *type, PyObject *args, PyObject *kwdict)
             Py_DECREF(m_obj);
             return NULL;
         }
-        strcpy(m_obj->tagname, tagname);
+        wcscpy(m_obj->tagname, tagname);
     }
     else
         m_obj->tagname = NULL;
@@ -1361,7 +1354,7 @@ new_mmap_object(PyTypeObject *type, PyObject *args, PyObject *kwdict)
     off_lo = (DWORD)(offset & 0xFFFFFFFF);
     /* For files, it would be sufficient to pass 0 as size.
        For anonymous maps, we have to pass the size explicitly. */
-    m_obj->map_handle = CreateFileMapping(m_obj->file_handle,
+    m_obj->map_handle = CreateFileMappingW(m_obj->file_handle,
                                           NULL,
                                           flProtect,
                                           size_hi,
diff --git a/Modules/overlapped.c b/Modules/overlapped.c
index 596ee33027..ca649e555d 100644
--- a/Modules/overlapped.c
+++ b/Modules/overlapped.c
@@ -37,6 +37,10 @@
 
 #define T_HANDLE T_POINTER
 
+#if !defined(HasOverlappedIoCompleted)
+#define HasOverlappedIoCompleted(lpOverlapped) (lpOverlapped)->Internal != STATUS_PENDING
+#endif
+
 enum {TYPE_NONE, TYPE_NOT_STARTED, TYPE_READ, TYPE_READINTO, TYPE_WRITE,
       TYPE_ACCEPT, TYPE_CONNECT, TYPE_DISCONNECT, TYPE_CONNECT_NAMED_PIPE,
       TYPE_WAIT_NAMED_PIPE_AND_CONNECT, TYPE_TRANSMIT_FILE};
@@ -90,7 +94,6 @@ static LPFN_ACCEPTEX Py_AcceptEx = NULL;
 static LPFN_CONNECTEX Py_ConnectEx = NULL;
 static LPFN_DISCONNECTEX Py_DisconnectEx = NULL;
 static LPFN_TRANSMITFILE Py_TransmitFile = NULL;
-static BOOL (CALLBACK *Py_CancelIoEx)(HANDLE, LPOVERLAPPED) = NULL;
 
 #define GET_WSA_POINTER(s, x)                                           \
     (SOCKET_ERROR != WSAIoctl(s, SIO_GET_EXTENSION_FUNCTION_POINTER,    \
@@ -126,9 +129,6 @@ initialize_function_pointers(void)
 
     closesocket(s);
 
-    /* On WinXP we will have Py_CancelIoEx == NULL */
-    hKernel32 = GetModuleHandle("KERNEL32");
-    *(FARPROC *)&Py_CancelIoEx = GetProcAddress(hKernel32, "CancelIoEx");
     return 0;
 }
 
@@ -280,7 +280,7 @@ overlapped_RegisterWaitWithQueue(PyObject *self, PyObject *args)
 
     *pdata = data;
 
-    if (!RegisterWaitForSingleObject(
+    if (!RegisterWaitForSingleObjectEx(
             &NewWaitObject, Object, (WAITORTIMERCALLBACK)PostToQueueCallback,
             pdata, Milliseconds,
             WT_EXECUTEINWAITTHREAD | WT_EXECUTEONLYONCE))
@@ -595,9 +595,6 @@ Overlapped_dealloc(OverlappedObject *self)
     if (!HasOverlappedIoCompleted(&self->overlapped) &&
         self->type != TYPE_NOT_STARTED)
     {
-        if (Py_CancelIoEx && Py_CancelIoEx(self->handle, &self->overlapped))
-            wait = TRUE;
-
         Py_BEGIN_ALLOW_THREADS
         ret = GetOverlappedResult(self->handle, &self->overlapped,
                                   &bytes, wait);
@@ -642,10 +639,7 @@ Overlapped_cancel(OverlappedObject *self)
 
     if (!HasOverlappedIoCompleted(&self->overlapped)) {
         Py_BEGIN_ALLOW_THREADS
-        if (Py_CancelIoEx)
-            ret = Py_CancelIoEx(self->handle, &self->overlapped);
-        else
-            ret = CancelIo(self->handle);
+		ret = CancelIo(self->handle);
         Py_END_ALLOW_THREADS
     }
 
@@ -1312,6 +1306,17 @@ PyDoc_STRVAR(
     "ConnectPipe(addr) -> pipe_handle\n\n"
     "Connect to the pipe for asynchronous I/O (overlapped).");
 
+PyAPI_FUNC(HANDLE)
+_Py_win_create_file(
+	_In_ LPCWSTR lpFileName,
+	_In_ DWORD dwDesiredAccess,
+	_In_ DWORD dwShareMode,
+	_In_opt_ LPSECURITY_ATTRIBUTES lpSecurityAttributes,
+	_In_ DWORD dwCreationDisposition,
+	_In_ DWORD dwFlagsAndAttributes,
+	_In_opt_ HANDLE hTemplateFile
+);
+
 static PyObject *
 ConnectPipe(OverlappedObject *self, PyObject *args)
 {
@@ -1327,7 +1332,7 @@ ConnectPipe(OverlappedObject *self, PyObject *args)
         return NULL;
 
     Py_BEGIN_ALLOW_THREADS
-    PipeHandle = CreateFileW(Address,
+    PipeHandle = _Py_win_create_file(Address,
                              GENERIC_READ | GENERIC_WRITE,
                              0, NULL, OPEN_EXISTING,
                              FILE_FLAG_OVERLAPPED, NULL);
diff --git a/Modules/posixmodule.c b/Modules/posixmodule.c
index 58cb9b0d46..709482b8e6 100644
--- a/Modules/posixmodule.c
+++ b/Modules/posixmodule.c
@@ -162,6 +162,7 @@ corresponding Unix manual entries for more information on calls.");
 #include <process.h>
 #else
 #ifdef _MSC_VER         /* Microsoft compiler */
+#ifdef MS_DESKTOP
 #define HAVE_GETPPID    1
 #define HAVE_GETLOGIN   1
 #define HAVE_SPAWNV     1
@@ -173,6 +174,7 @@ corresponding Unix manual entries for more information on calls.");
 #define HAVE_CWAIT      1
 #define HAVE_FSYNC      1
 #define fsync _commit
+#endif
 #else
 /* Unix functions that the configure script doesn't check for */
 #define HAVE_EXECV      1
@@ -308,6 +310,7 @@ extern int lstat(const char *, struct stat *);
 #include "osdefs.h"
 #include <malloc.h>
 #include <windows.h>
+#include <winioctl.h>
 #include <shellapi.h>   /* for ShellExecute() */
 #include <lmcons.h>     /* for UNLEN */
 #ifdef SE_CREATE_SYMBOLIC_LINK_NAME /* Available starting with Vista */
@@ -485,8 +488,13 @@ PyOS_AfterFork(void)
 #ifdef MS_WINDOWS
 /* defined in fileutils.c */
 PyAPI_FUNC(void) _Py_time_t_to_FILE_TIME(time_t, int, FILETIME *);
-PyAPI_FUNC(void) _Py_attribute_data_to_stat(BY_HANDLE_FILE_INFORMATION *,
-                                            ULONG, struct _Py_stat_struct *);
+PyAPI_FUNC(void) _Py_find_data_to_stat(WIN32_FIND_DATAW *,
+                                            struct _Py_stat_struct *);
+PyAPI_FUNC(HANDLE) _Py_win_create_file(LPCWSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES,
+										DWORD, DWORD, HANDLE);
+PyAPI_FUNC(int) _Py_stat_from_file_handle(HANDLE h,
+											struct _Py_stat_struct* result, BOOL set_ino);
+
 #endif
 
 #ifdef MS_WINDOWS
@@ -1554,7 +1562,7 @@ win32_wchdir(LPCWSTR path)
 }
 #endif
 
-#ifdef MS_WINDOWS
+#if defined(MS_WINDOWS)
 /* The CRT of Windows has a number of flaws wrt. its stat() implementation:
    - time stamps are restricted to second resolution
    - file modification times suffer from forth-and-back conversions between
@@ -1564,27 +1572,8 @@ win32_wchdir(LPCWSTR path)
 #define HAVE_STAT_NSEC 1
 #define HAVE_STRUCT_STAT_ST_FILE_ATTRIBUTES 1
 
-static void
-find_data_to_file_info(WIN32_FIND_DATAW *pFileData,
-                       BY_HANDLE_FILE_INFORMATION *info,
-                       ULONG *reparse_tag)
-{
-    memset(info, 0, sizeof(*info));
-    info->dwFileAttributes = pFileData->dwFileAttributes;
-    info->ftCreationTime   = pFileData->ftCreationTime;
-    info->ftLastAccessTime = pFileData->ftLastAccessTime;
-    info->ftLastWriteTime  = pFileData->ftLastWriteTime;
-    info->nFileSizeHigh    = pFileData->nFileSizeHigh;
-    info->nFileSizeLow     = pFileData->nFileSizeLow;
-/*  info->nNumberOfLinks   = 1; */
-    if (pFileData->dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT)
-        *reparse_tag = pFileData->dwReserved0;
-    else
-        *reparse_tag = 0;
-}
-
 static BOOL
-attributes_from_dir(LPCWSTR pszFile, BY_HANDLE_FILE_INFORMATION *info, ULONG *reparse_tag)
+attributes_from_dir(LPCWSTR pszFile, struct _Py_stat_struct *result, ULONG *reparse_tag)
 {
     HANDLE hFindFile;
     WIN32_FIND_DATAW FileData;
@@ -1592,7 +1581,7 @@ attributes_from_dir(LPCWSTR pszFile, BY_HANDLE_FILE_INFORMATION *info, ULONG *re
     if (hFindFile == INVALID_HANDLE_VALUE)
         return FALSE;
     FindClose(hFindFile);
-    find_data_to_file_info(&FileData, info, reparse_tag);
+    _Py_find_data_to_stat(&FileData, result);
     return TRUE;
 }
 
@@ -1633,25 +1622,27 @@ static int
 win32_xstat_impl(const wchar_t *path, struct _Py_stat_struct *result,
                  BOOL traverse)
 {
-    int code;
-    HANDLE hFile, hFile2;
-    BY_HANDLE_FILE_INFORMATION info;
+    HANDLE hFile;
     ULONG reparse_tag = 0;
-    wchar_t *target_path;
     const wchar_t *dot;
 
-    hFile = CreateFileW(
+	DWORD attributes =
+		/* FILE_FLAG_BACKUP_SEMANTICS is required to open a directory */
+		/* FILE_FLAG_OPEN_REPARSE_POINT does not follow the symlink.
+		   Because of this, calls like GetFinalPathNameByHandle will return
+		   the symlink path again and not the actual final path. */
+		FILE_ATTRIBUTE_NORMAL | FILE_FLAG_BACKUP_SEMANTICS;
+
+	if (!traverse)
+		attributes |= FILE_FLAG_OPEN_REPARSE_POINT;
+
+    hFile = _Py_win_create_file(
         path,
         FILE_READ_ATTRIBUTES, /* desired access */
         0, /* share mode */
         NULL, /* security attributes */
         OPEN_EXISTING,
-        /* FILE_FLAG_BACKUP_SEMANTICS is required to open a directory */
-        /* FILE_FLAG_OPEN_REPARSE_POINT does not follow the symlink.
-           Because of this, calls like GetFinalPathNameByHandle will return
-           the symlink path again and not the actual final path. */
-        FILE_ATTRIBUTE_NORMAL|FILE_FLAG_BACKUP_SEMANTICS|
-            FILE_FLAG_OPEN_REPARSE_POINT,
+		attributes,
         NULL);
 
     if (hFile == INVALID_HANDLE_VALUE) {
@@ -1664,59 +1655,17 @@ win32_xstat_impl(const wchar_t *path, struct _Py_stat_struct *result,
             return -1;
         /* Could not get attributes on open file. Fall back to
            reading the directory. */
-        if (!attributes_from_dir(path, &info, &reparse_tag))
+        if (!attributes_from_dir(path, result, &reparse_tag)) {
             /* Very strange. This should not fail now */
             return -1;
-        if (info.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT) {
-            if (traverse) {
-                /* Should traverse, but could not open reparse point handle */
-                SetLastError(lastError);
-                return -1;
-            }
         }
     } else {
-        if (!GetFileInformationByHandle(hFile, &info)) {
+        if (!_Py_stat_from_file_handle(hFile, result, FALSE)) {
             CloseHandle(hFile);
             return -1;
         }
-        if (info.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT) {
-            if (!win32_get_reparse_tag(hFile, &reparse_tag)) {
-                CloseHandle(hFile);
-                return -1;
-            }
-            /* Close the outer open file handle now that we're about to
-               reopen it with different flags. */
-            if (!CloseHandle(hFile))
-                return -1;
-
-            if (traverse) {
-                /* In order to call GetFinalPathNameByHandle we need to open
-                   the file without the reparse handling flag set. */
-                hFile2 = CreateFileW(
-                           path, FILE_READ_ATTRIBUTES, FILE_SHARE_READ,
-                           NULL, OPEN_EXISTING,
-                           FILE_ATTRIBUTE_NORMAL|FILE_FLAG_BACKUP_SEMANTICS,
-                           NULL);
-                if (hFile2 == INVALID_HANDLE_VALUE)
-                    return -1;
-
-                if (!get_target_path(hFile2, &target_path)) {
-                    CloseHandle(hFile2);
-                    return -1;
-                }
-
-                if (!CloseHandle(hFile2)) {
-                    return -1;
-                }
-
-                code = win32_xstat_impl(target_path, result, FALSE);
-                PyMem_RawFree(target_path);
-                return code;
-            }
-        } else
-            CloseHandle(hFile);
+		CloseHandle(hFile);
     }
-    _Py_attribute_data_to_stat(&info, reparse_tag, result);
 
     /* Set S_IEXEC if it is an .exe, .bat, ... */
     dot = wcsrchr(path, '.');
@@ -3424,12 +3373,16 @@ os_link_impl(PyObject *module, path_t *src, path_t *dst, int src_dir_fd,
 #endif
 
 #ifdef MS_WINDOWS
+#ifdef MS_APP
+	Py_RETURN_NOTIMPLEMENTED;
+#else
     Py_BEGIN_ALLOW_THREADS
     result = CreateHardLinkW(dst->wide, src->wide, NULL);
     Py_END_ALLOW_THREADS
 
     if (!result)
         return path_error2(src, dst);
+#endif
 #else
     Py_BEGIN_ALLOW_THREADS
 #ifdef HAVE_LINKAT
@@ -3752,7 +3705,7 @@ os__getfinalpathname_impl(PyObject *module, path_t *path)
     PyObject *result;
 
     Py_BEGIN_ALLOW_THREADS
-    hFile = CreateFileW(
+    hFile = _Py_win_create_file(
         path->wide,
         0, /* desired access */
         0, /* share mode */
@@ -3850,6 +3803,9 @@ static PyObject *
 os__getvolumepathname_impl(PyObject *module, path_t *path)
 /*[clinic end generated code: output=804c63fd13a1330b input=722b40565fa21552]*/
 {
+#ifdef MS_APP
+	Py_RETURN_NOTIMPLEMENTED;
+#else
     PyObject *result;
     wchar_t *mountpath=NULL;
     size_t buflen;
@@ -3883,6 +3839,7 @@ os__getvolumepathname_impl(PyObject *module, path_t *path)
 exit:
     PyMem_Free(mountpath);
     return result;
+#endif
 }
 
 #endif /* MS_WINDOWS */
@@ -4730,7 +4687,7 @@ os_utime_impl(PyObject *module, path_t *path, PyObject *times, PyObject *ns,
 
 #ifdef MS_WINDOWS
     Py_BEGIN_ALLOW_THREADS
-    hFile = CreateFileW(path->wide, FILE_WRITE_ATTRIBUTES, 0,
+    hFile = _Py_win_create_file(path->wide, FILE_WRITE_ATTRIBUTES, 0,
                         NULL, OPEN_EXISTING,
                         FILE_FLAG_BACKUP_SEMANTICS, NULL);
     Py_END_ALLOW_THREADS
@@ -5145,6 +5102,9 @@ static PyObject *
 os_spawnv_impl(PyObject *module, int mode, path_t *path, PyObject *argv)
 /*[clinic end generated code: output=71cd037a9d96b816 input=43224242303291be]*/
 {
+#ifdef MS_APP
+	Py_RETURN_NOTIMPLEMENTED;
+#else
     EXECV_CHAR **argvlist;
     int i;
     Py_ssize_t argc;
@@ -5215,6 +5175,7 @@ os_spawnv_impl(PyObject *module, int mode, path_t *path, PyObject *argv)
         return posix_error();
     else
         return Py_BuildValue(_Py_PARSE_INTPTR, spawnval);
+#endif
 }
 
 /*[clinic input]
@@ -6429,6 +6390,9 @@ os_setpgrp_impl(PyObject *module)
 static PyObject*
 win32_getppid()
 {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM)
+	return PyLong_FromPid((pid_t)GetCurrentProcessId());
+#else
     HANDLE snapshot;
     pid_t mypid;
     PyObject* result = NULL;
@@ -6462,6 +6426,7 @@ win32_getppid()
     CloseHandle(snapshot);
 
     return result;
+#endif
 }
 #endif /*MS_WINDOWS*/
 
@@ -6501,6 +6466,7 @@ os_getlogin_impl(PyObject *module)
 {
     PyObject *result = NULL;
 #ifdef MS_WINDOWS
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
     wchar_t user_name[UNLEN + 1];
     DWORD num_chars = Py_ARRAY_LENGTH(user_name);
 
@@ -6510,6 +6476,9 @@ os_getlogin_impl(PyObject *module)
     }
     else
         result = PyErr_SetFromWindowsErr(GetLastError());
+#else
+	result = PyUnicode_FromWideChar(L"N/A", 4);
+#endif
 #else
     char *name;
     int old_errno = errno;
@@ -7230,7 +7199,7 @@ win_readlink(PyObject *self, PyObject *args, PyObject *kwargs)
 
     /* First get a handle to the reparse point */
     Py_BEGIN_ALLOW_THREADS
-    reparse_point_handle = CreateFileW(
+    reparse_point_handle = _Py_win_create_file(
         path,
         0,
         0,
@@ -7287,14 +7256,11 @@ static BOOLEAN (CALLBACK *Py_CreateSymbolicLinkW)(LPCWSTR, LPCWSTR, DWORD) = NUL
 static int
 check_CreateSymbolicLink(void)
 {
-    HINSTANCE hKernel32;
-    /* only recheck */
-    if (Py_CreateSymbolicLinkW)
-        return 1;
-    hKernel32 = GetModuleHandleW(L"KERNEL32");
-    *(FARPROC*)&Py_CreateSymbolicLinkW = GetProcAddress(hKernel32,
-                                                        "CreateSymbolicLinkW");
-    return Py_CreateSymbolicLinkW != NULL;
+#ifdef MS_DESKTOP
+	return TRUE;
+#else
+	return FALSE;
+#endif
 }
 
 /* Remove the last portion of the path - return 0 on success */
@@ -10770,6 +10736,9 @@ static HINSTANCE (CALLBACK *Py_ShellExecuteW)(HWND, LPCWSTR, LPCWSTR, LPCWSTR,
 static int
 check_ShellExecute()
 {
+#ifdef MS_APP
+	return FALSE;
+#else
     HINSTANCE hShell32;
 
     /* only recheck */
@@ -10790,6 +10759,7 @@ check_ShellExecute()
         }
     }
     return has_ShellExecute;
+#endif
 }
 
 
@@ -11398,6 +11368,7 @@ os_cpu_count_impl(PyObject *module)
 {
     int ncpu = 0;
 #ifdef MS_WINDOWS
+#ifdef MS_DESKTOP
     /* Vista is supported and the GetMaximumProcessorCount API is Win7+
        Need to fallback to Vista behavior if this call isn't present */
     HINSTANCE hKernel32;
@@ -11414,6 +11385,11 @@ os_cpu_count_impl(PyObject *module)
         GetSystemInfo(&sysinfo);
         ncpu = sysinfo.dwNumberOfProcessors;
     }
+#else
+	SYSTEM_INFO sysinfo;
+	GetSystemInfo(&sysinfo);
+	ncpu = sysinfo.dwNumberOfProcessors;
+#endif
 #elif defined(__hpux)
     ncpu = mpctl(MPC_GETNUMSPUS, NULL, NULL);
 #elif defined(HAVE_SYSCONF) && defined(_SC_NPROCESSORS_ONLN)
@@ -11495,6 +11471,7 @@ static int
 os_get_handle_inheritable_impl(PyObject *module, intptr_t handle)
 /*[clinic end generated code: output=36be5afca6ea84d8 input=cfe99f9c05c70ad1]*/
 {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
     DWORD flags;
 
     if (!GetHandleInformation((HANDLE)handle, &flags)) {
@@ -11503,6 +11480,9 @@ os_get_handle_inheritable_impl(PyObject *module, intptr_t handle)
     }
 
     return flags & HANDLE_FLAG_INHERIT;
+#else
+	return 0;
+#endif
 }
 
 
@@ -11520,12 +11500,16 @@ os_set_handle_inheritable_impl(PyObject *module, intptr_t handle,
                                int inheritable)
 /*[clinic end generated code: output=021d74fe6c96baa3 input=7a7641390d8364fc]*/
 {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
     DWORD flags = inheritable ? HANDLE_FLAG_INHERIT : 0;
     if (!SetHandleInformation((HANDLE)handle, HANDLE_FLAG_INHERIT, flags)) {
         PyErr_SetFromWindowsErr(0);
         return NULL;
     }
     Py_RETURN_NONE;
+#else
+	Py_RETURN_NONE;
+#endif
 }
 #endif /* MS_WINDOWS */
 
@@ -11981,8 +11965,6 @@ static PyObject *
 DirEntry_from_find_data(path_t *path, WIN32_FIND_DATAW *dataW)
 {
     DirEntry *entry;
-    BY_HANDLE_FILE_INFORMATION file_info;
-    ULONG reparse_tag;
     wchar_t *joined_path;
 
     entry = PyObject_New(DirEntry, &DirEntryType);
@@ -12017,8 +11999,7 @@ DirEntry_from_find_data(path_t *path, WIN32_FIND_DATAW *dataW)
             goto error;
     }
 
-    find_data_to_file_info(dataW, &file_info, &reparse_tag);
-    _Py_attribute_data_to_stat(&file_info, reparse_tag, &entry->win32_lstat);
+    _Py_find_data_to_stat(dataW, &entry->win32_lstat);
 
     return (PyObject *)entry;
 
diff --git a/Modules/selectmodule.c b/Modules/selectmodule.c
index 93d896a37c..1beece8fa1 100644
--- a/Modules/selectmodule.c
+++ b/Modules/selectmodule.c
@@ -53,7 +53,7 @@ extern void bzero(void *, int);
 
 #ifdef MS_WINDOWS
 #  define WIN32_LEAN_AND_MEAN
-#  include <winsock.h>
+#  include <winsock2.h>
 #else
 #  define SOCKET int
 #endif
diff --git a/Modules/socketmodule.c b/Modules/socketmodule.c
index a9ef7e2083..635110caaa 100644
--- a/Modules/socketmodule.c
+++ b/Modules/socketmodule.c
@@ -330,6 +330,7 @@ static FlagRuntimeInfo win_runtime_flags[] = {
 static void
 remove_unusable_flags(PyObject *m)
 {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
     PyObject *dict;
     OSVERSIONINFOEX info;
     DWORDLONG dwlConditionMask;
@@ -375,6 +376,7 @@ remove_unusable_flags(PyObject *m)
             }
         }
     }
+#endif
 }
 
 #endif
@@ -2554,11 +2556,13 @@ sock_accept(PySocketSockObject *s)
     newfd = ctx.result;
 
 #ifdef MS_WINDOWS
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
     if (!SetHandleInformation((HANDLE)newfd, HANDLE_FLAG_INHERIT, 0)) {
         PyErr_SetFromWindowsErr(0);
         SOCKETCLOSE(newfd);
         goto finally;
     }
+#endif
 #else
 
 #if defined(HAVE_ACCEPT4) && defined(SOCK_CLOEXEC)
@@ -5040,11 +5044,13 @@ sock_initobj(PyObject *self, PyObject *args, PyObject *kwds)
         }
 
         if (!support_wsa_no_inherit) {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
             if (!SetHandleInformation((HANDLE)fd, HANDLE_FLAG_INHERIT, 0)) {
                 closesocket(fd);
                 PyErr_SetFromWindowsErr(0);
                 return -1;
             }
+#endif
         }
 #else
         /* UNIX */
@@ -5152,7 +5158,7 @@ static PyTypeObject sock_type = {
 static PyObject *
 socket_gethostname(PyObject *self, PyObject *unused)
 {
-#ifdef MS_WINDOWS
+#if defined(MS_WINDOWS) && WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
     /* Don't use winsock's gethostname, as this returns the ANSI
        version of the hostname, whereas we need a Unicode string.
        Otherwise, gethostname apparently also returns the DNS name. */
@@ -5721,11 +5727,13 @@ socket_dup(PyObject *self, PyObject *fdobj)
     if (newfd == INVALID_SOCKET)
         return set_error();
 
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
     if (!SetHandleInformation((HANDLE)newfd, HANDLE_FLAG_INHERIT, 0)) {
         closesocket(newfd);
         PyErr_SetFromWindowsErr(0);
         return NULL;
     }
+#endif
 #else
     /* On UNIX, dup can be used to duplicate the file descriptor of a socket */
     newfd = _Py_dup(fd);
@@ -6806,7 +6814,11 @@ PyInit__socket(void)
 
 #ifdef MS_WINDOWS
     if (support_wsa_no_inherit == -1) {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
         support_wsa_no_inherit = IsWindows7SP1OrGreater();
+#else
+		support_wsa_no_inherit = 1;
+#endif
     }
 #endif
 
diff --git a/Modules/socketmodule.h b/Modules/socketmodule.h
index 0b2edc1587..9ab3436b61 100644
--- a/Modules/socketmodule.h
+++ b/Modules/socketmodule.h
@@ -28,7 +28,7 @@
  * I use SIO_GET_MULTICAST_FILTER to detect a decent SDK.
  */
 # ifdef SIO_GET_MULTICAST_FILTER
-#  include <mstcpip.h> /* for SIO_RCVALL */
+//#  include <mstcpip.h> /* for SIO_RCVALL */
 #  define HAVE_ADDRINFO
 #  define HAVE_SOCKADDR_STORAGE
 #  define HAVE_GETADDRINFO
diff --git a/PC/_msi.c b/PC/_msi.c
index ae30acbc9b..b590aef307 100644
--- a/PC/_msi.c
+++ b/PC/_msi.c
@@ -7,6 +7,7 @@
 #include <fci.h>
 #include <fcntl.h>
 #include <windows.h>
+#include <wtypes.h>
 #include <msi.h>
 #include <msiquery.h>
 #include <msidefs.h>
diff --git a/PC/bdist_wininst/bdist_wininst.vcxproj b/PC/bdist_wininst/bdist_wininst.vcxproj
index 70bfb9c933..16660bf014 100644
--- a/PC/bdist_wininst/bdist_wininst.vcxproj
+++ b/PC/bdist_wininst/bdist_wininst.vcxproj
@@ -38,6 +38,7 @@
     <ProjectGuid>{EB1C19C1-1F18-421E-9735-CAEE69DC6A3C}</ProjectGuid>
     <RootNamespace>wininst</RootNamespace>
     <SupportPGO>false</SupportPGO>
+    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
   </PropertyGroup>
   <Import Project="..\..\PCbuild\python.props" />
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
@@ -46,6 +47,30 @@
     <UseOfMfc>false</UseOfMfc>
     <CharacterSet>NotSet</CharacterSet>
   </PropertyGroup>
+  <PropertyGroup Label="Configuration" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+    <PlatformToolset>v142</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Label="Configuration" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+    <PlatformToolset>v142</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Label="Configuration" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+    <PlatformToolset>v142</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Label="Configuration" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <PlatformToolset>v142</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Label="Configuration" Condition="'$(Configuration)|$(Platform)'=='PGUpdate|x64'">
+    <PlatformToolset>v142</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Label="Configuration" Condition="'$(Configuration)|$(Platform)'=='PGUpdate|Win32'">
+    <PlatformToolset>v142</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Label="Configuration" Condition="'$(Configuration)|$(Platform)'=='PGInstrument|x64'">
+    <PlatformToolset>v142</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Label="Configuration" Condition="'$(Configuration)|$(Platform)'=='PGInstrument|Win32'">
+    <PlatformToolset>v142</PlatformToolset>
+  </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
   <ImportGroup Label="ExtensionSettings">
   </ImportGroup>
diff --git a/PC/bdist_wininst/bdist_wininst.vcxproj.filters b/PC/bdist_wininst/bdist_wininst.vcxproj.filters
index b4b6a4d514..2f1d034d98 100644
--- a/PC/bdist_wininst/bdist_wininst.vcxproj.filters
+++ b/PC/bdist_wininst/bdist_wininst.vcxproj.filters
@@ -18,43 +18,43 @@
     </Filter>
   </ItemGroup>
   <ItemGroup>
-    <ClCompile Include="..\PC\bdist_wininst\extract.c">
+    <ClCompile Include="extract.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="..\PC\bdist_wininst\install.c">
+    <ClCompile Include="install.c">
       <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="..\Modules\zlib\adler32.c">
-      <Filter>Source Files\zlib</Filter>
+    <ClCompile Include="..\..\Modules\zlib\adler32.c">
+      <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="..\Modules\zlib\crc32.c">
-      <Filter>Source Files\zlib</Filter>
+    <ClCompile Include="..\..\Modules\zlib\crc32.c">
+      <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="..\Modules\zlib\inffast.c">
-      <Filter>Source Files\zlib</Filter>
+    <ClCompile Include="..\..\Modules\zlib\inffast.c">
+      <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="..\Modules\zlib\inflate.c">
-      <Filter>Source Files\zlib</Filter>
+    <ClCompile Include="..\..\Modules\zlib\inflate.c">
+      <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="..\Modules\zlib\inftrees.c">
-      <Filter>Source Files\zlib</Filter>
+    <ClCompile Include="..\..\Modules\zlib\inftrees.c">
+      <Filter>Source Files</Filter>
     </ClCompile>
-    <ClCompile Include="..\Modules\zlib\zutil.c">
-      <Filter>Source Files\zlib</Filter>
+    <ClCompile Include="..\..\Modules\zlib\zutil.c">
+      <Filter>Source Files</Filter>
     </ClCompile>
   </ItemGroup>
   <ItemGroup>
-    <ClInclude Include="..\PC\bdist_wininst\archive.h">
+    <ClInclude Include="archive.h">
       <Filter>Header Files</Filter>
     </ClInclude>
   </ItemGroup>
   <ItemGroup>
-    <ResourceCompile Include="..\PC\bdist_wininst\install.rc">
-      <Filter>Resource Files</Filter>
+    <ResourceCompile Include="install.rc">
+      <Filter>Source Files</Filter>
     </ResourceCompile>
   </ItemGroup>
   <ItemGroup>
-    <None Include="..\PC\bdist_wininst\PythonPowered.bmp">
+    <None Include="PythonPowered.bmp">
       <Filter>Resource Files</Filter>
     </None>
   </ItemGroup>
diff --git a/PC/config.c b/PC/config.c
index c4922ccd62..b9df146afe 100644
--- a/PC/config.c
+++ b/PC/config.c
@@ -45,7 +45,9 @@ extern PyObject* PyInit_mmap(void);
 extern PyObject* PyInit__csv(void);
 extern PyObject* PyInit__sre(void);
 extern PyObject* PyInit_parser(void);
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
 extern PyObject* PyInit_winreg(void);
+#endif
 extern PyObject* PyInit__struct(void);
 extern PyObject* PyInit__datetime(void);
 extern PyObject* PyInit__functools(void);
@@ -124,7 +126,9 @@ struct _inittab _PyImport_Inittab[] = {
     {"_csv", PyInit__csv},
     {"_sre", PyInit__sre},
     {"parser", PyInit_parser},
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
     {"winreg", PyInit_winreg},
+#endif
     {"_struct", PyInit__struct},
     {"_datetime", PyInit__datetime},
     {"_functools", PyInit__functools},
diff --git a/PC/getpathp.c b/PC/getpathp.c
index 04764c9e5a..3d8d132e46 100644
--- a/PC/getpathp.c
+++ b/PC/getpathp.c
@@ -90,6 +90,7 @@
 
 #include <windows.h>
 #include <shlwapi.h>
+#include <PathCch.h>
 
 #ifdef HAVE_SYS_TYPES_H
 #include <sys/types.h>
@@ -244,6 +245,7 @@ static PPathCchCombineEx _PathCchCombineEx;
 static void
 join(wchar_t *buffer, const wchar_t *stuff)
 {
+#ifdef MS_DESKTOP
     if (_PathCchCombineEx_Initialized == 0) {
         HMODULE pathapi = LoadLibraryW(L"api-ms-win-core-path-l1-1-0.dll");
         if (pathapi) {
@@ -264,12 +266,19 @@ join(wchar_t *buffer, const wchar_t *stuff)
             Py_FatalError("buffer overflow in getpathp.c's join()");
         }
     }
+#else
+	if (FAILED(PathCchCombineEx(buffer, MAXPATHLEN+1, buffer, stuff, 0))) {
+		Py_FatalError("buffer overflow in getpathp.c's join()");
+	}
+#endif
 }
 
+#ifdef MS_DESKTOP
 static int _PathCchCanonicalizeEx_Initialized = 0;
 typedef HRESULT(__stdcall *PPathCchCanonicalizeEx) (PWSTR pszPathOut, size_t cchPathOut,
     PCWSTR pszPathIn, unsigned long dwFlags);
 static PPathCchCanonicalizeEx _PathCchCanonicalizeEx;
+#endif
 
 static _PyInitError canonicalize(wchar_t *buffer, const wchar_t *path)
 {
@@ -277,6 +286,7 @@ static _PyInitError canonicalize(wchar_t *buffer, const wchar_t *path)
         return _Py_INIT_NO_MEMORY();
     }
 
+#ifdef MS_DESKTOP
     if (_PathCchCanonicalizeEx_Initialized == 0) {
         HMODULE pathapi = LoadLibraryW(L"api-ms-win-core-path-l1-1-0.dll");
         if (pathapi) {
@@ -298,6 +308,11 @@ static _PyInitError canonicalize(wchar_t *buffer, const wchar_t *path)
             return _Py_INIT_ERR("buffer overflow in getpathp.c's canonicalize()");
         }
     }
+#else
+	if (FAILED(PathCchCanonicalizeEx(buffer, MAXPATHLEN + 1, path, 0))) {
+		return _Py_INIT_ERR("buffer overflow in getpathp.c's canonicalize()");
+	}
+#endif
     return _Py_INIT_OK();
 }
 
@@ -352,9 +367,11 @@ extern const char *PyWin_DLLVersionString;
    work on Win16, where the buffer sizes werent available
    in advance.  It could be simplied now Win16/Win32s is dead!
 */
+
 static wchar_t *
 getpythonregpath(HKEY keyBase, int skipcore)
 {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
     HKEY newKey = 0;
     DWORD dataSize = 0;
     DWORD numKeys = 0;
@@ -503,6 +520,9 @@ done:
     }
     PyMem_RawFree(keyBuf);
     return retval;
+#else
+	return NULL;
+#endif
 }
 #endif /* Py_ENABLE_SHARED */
 
@@ -1047,7 +1067,7 @@ done:
    Return whether the DLL was found.
 */
 static int python3_checked = 0;
-static HANDLE hPython3;
+static HANDLE hPython3 = (HANDLE)NULL;
 int
 _Py_CheckPython3(void)
 {
@@ -1066,7 +1086,11 @@ _Py_CheckPython3(void)
         s = py3path;
     }
     wcscpy(s, L"\\python3.dll");
+#ifdef MS_DESKTOP
     hPython3 = LoadLibraryExW(py3path, NULL, LOAD_WITH_ALTERED_SEARCH_PATH);
+#else
+	hPython3 = LoadPackagedLibrary(py3path, 0);
+#endif
     if (hPython3 != NULL) {
         return 1;
     }
@@ -1074,6 +1098,10 @@ _Py_CheckPython3(void)
     /* Check sys.prefix\DLLs\python3.dll */
     wcscpy(py3path, Py_GetPrefix());
     wcscat(py3path, L"\\DLLs\\python3.dll");
+#ifdef MS_DESKTOP
     hPython3 = LoadLibraryExW(py3path, NULL, LOAD_WITH_ALTERED_SEARCH_PATH);
+#else
+	hPython3 = LoadPackagedLibrary(py3path, 0);
+#endif
     return hPython3 != NULL;
 }
diff --git a/PC/msvcrtmodule.c b/PC/msvcrtmodule.c
index c4113e54c2..60fe75b5d5 100644
--- a/PC/msvcrtmodule.c
+++ b/PC/msvcrtmodule.c
@@ -576,10 +576,12 @@ PyInit_msvcrt(void)
     insertint(d, "LK_NBRLCK", _LK_NBRLCK);
     insertint(d, "LK_RLCK", _LK_RLCK);
     insertint(d, "LK_UNLCK", _LK_UNLCK);
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
     insertint(d, "SEM_FAILCRITICALERRORS", SEM_FAILCRITICALERRORS);
     insertint(d, "SEM_NOALIGNMENTFAULTEXCEPT", SEM_NOALIGNMENTFAULTEXCEPT);
     insertint(d, "SEM_NOGPFAULTERRORBOX", SEM_NOGPFAULTERRORBOX);
     insertint(d, "SEM_NOOPENFILEERRORBOX", SEM_NOOPENFILEERRORBOX);
+#endif
 #ifdef _DEBUG
     insertint(d, "CRT_WARN", _CRT_WARN);
     insertint(d, "CRT_ERROR", _CRT_ERROR);
diff --git a/PC/pyconfig.h b/PC/pyconfig.h
index 6e33f12e0d..71c89da5f2 100644
--- a/PC/pyconfig.h
+++ b/PC/pyconfig.h
@@ -57,6 +57,10 @@ WIN32 is still required for the locale module.
 #define HAVE_STRERROR
 
 #include <io.h>
+#ifndef WIN32_LEAN_AND_MEAN
+#define WIN32_LEAN_AND_MEAN
+#endif
+#include <winapifamily.h>
 
 #define HAVE_HYPOT
 #define HAVE_STRFTIME
@@ -76,6 +80,16 @@ WIN32 is still required for the locale module.
 #define USE_SOCKET
 #endif
 
+#ifdef MS_WINDOWS
+#	if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
+#		define MS_DESKTOP
+#		undef MS_APP
+#	else
+#		undef MS_DEKSTOP
+#		define MS_APP
+#	endif
+#endif
+
 
 /* Compiler specific defines */
 
@@ -133,8 +147,13 @@ WIN32 is still required for the locale module.
 
 /* set the version macros for the windows headers */
 /* Python 3.5+ requires Windows Vista or greater */
-#define Py_WINVER 0x0600 /* _WIN32_WINNT_VISTA */
-#define Py_NTDDI NTDDI_VISTA
+#ifdef MS_DESKTOP
+#define Py_WINVER 0x0601 /* _WIN32_WINNT_VISTA */
+#define Py_NTDDI 0x06010000
+#else
+#define PY_WINVER 0x0A00 /* _WIN32_WINNT_WIN10 */
+#define PyNTDDI NTDDI_WIN10
+#endif
 
 /* We only set these values when building Python - we don't want to force
    these values on extensions, as that will affect the prototypes and
@@ -263,7 +282,7 @@ Py_NO_ENABLE_SHARED to find out.  Also support MS_NO_COREDLL for b/w compat */
 #define HAVE_DECLSPEC_DLL
 
 /* For an MSVC DLL, we can nominate the .lib files used by extensions */
-#ifdef MS_COREDLL
+#if 0
 #       if !defined(Py_BUILD_CORE) && !defined(Py_BUILD_CORE_BUILTIN)
                 /* not building the core - must be an ext */
 #               if defined(_MSC_VER)
@@ -314,11 +333,6 @@ Py_NO_ENABLE_SHARED to find out.  Also support MS_NO_COREDLL for b/w compat */
 #       endif
 #endif
 
-#ifdef _DEBUG
-#       define Py_DEBUG
-#endif
-
-
 #ifdef MS_WIN32
 
 #define SIZEOF_SHORT 2
@@ -491,7 +505,9 @@ Py_NO_ENABLE_SHARED to find out.  Also support MS_NO_COREDLL for b/w compat */
 /* #undef HAVE_GETPGRP */
 
 /* Define if you have getpid.  */
+#ifdef MS_DESKTOP
 #define HAVE_GETPID
+#endif
 
 /* Define if you have gettimeofday.  */
 /* #undef HAVE_GETTIMEOFDAY */
diff --git a/PC/python3.def b/PC/python3.def
index 9e0348b625..1ee3a0d0b2 100644
--- a/PC/python3.def
+++ b/PC/python3.def
@@ -2,798 +2,797 @@
 ; It is used when building python3dll.vcxproj
 LIBRARY	"python3"
 EXPORTS
-  PyArg_Parse=python37.PyArg_Parse
-  PyArg_ParseTuple=python37.PyArg_ParseTuple
-  PyArg_ParseTupleAndKeywords=python37.PyArg_ParseTupleAndKeywords
-  PyArg_UnpackTuple=python37.PyArg_UnpackTuple
-  PyArg_VaParse=python37.PyArg_VaParse
-  PyArg_VaParseTupleAndKeywords=python37.PyArg_VaParseTupleAndKeywords
-  PyArg_ValidateKeywordArguments=python37.PyArg_ValidateKeywordArguments
-  PyBaseObject_Type=python37.PyBaseObject_Type DATA
-  PyBool_FromLong=python37.PyBool_FromLong
-  PyBool_Type=python37.PyBool_Type DATA
-  PyByteArrayIter_Type=python37.PyByteArrayIter_Type DATA
-  PyByteArray_AsString=python37.PyByteArray_AsString
-  PyByteArray_Concat=python37.PyByteArray_Concat
-  PyByteArray_FromObject=python37.PyByteArray_FromObject
-  PyByteArray_FromStringAndSize=python37.PyByteArray_FromStringAndSize
-  PyByteArray_Resize=python37.PyByteArray_Resize
-  PyByteArray_Size=python37.PyByteArray_Size
-  PyByteArray_Type=python37.PyByteArray_Type DATA
-  PyBytesIter_Type=python37.PyBytesIter_Type DATA
-  PyBytes_AsString=python37.PyBytes_AsString
-  PyBytes_AsStringAndSize=python37.PyBytes_AsStringAndSize
-  PyBytes_Concat=python37.PyBytes_Concat
-  PyBytes_ConcatAndDel=python37.PyBytes_ConcatAndDel
-  PyBytes_DecodeEscape=python37.PyBytes_DecodeEscape
-  PyBytes_FromFormat=python37.PyBytes_FromFormat
-  PyBytes_FromFormatV=python37.PyBytes_FromFormatV
-  PyBytes_FromObject=python37.PyBytes_FromObject
-  PyBytes_FromString=python37.PyBytes_FromString
-  PyBytes_FromStringAndSize=python37.PyBytes_FromStringAndSize
-  PyBytes_Repr=python37.PyBytes_Repr
-  PyBytes_Size=python37.PyBytes_Size
-  PyBytes_Type=python37.PyBytes_Type DATA
-  PyCFunction_Call=python37.PyCFunction_Call
-  PyCFunction_ClearFreeList=python37.PyCFunction_ClearFreeList
-  PyCFunction_GetFlags=python37.PyCFunction_GetFlags
-  PyCFunction_GetFunction=python37.PyCFunction_GetFunction
-  PyCFunction_GetSelf=python37.PyCFunction_GetSelf
-  PyCFunction_New=python37.PyCFunction_New
-  PyCFunction_NewEx=python37.PyCFunction_NewEx
-  PyCFunction_Type=python37.PyCFunction_Type DATA
-  PyCallIter_New=python37.PyCallIter_New
-  PyCallIter_Type=python37.PyCallIter_Type DATA
-  PyCallable_Check=python37.PyCallable_Check
-  PyCapsule_GetContext=python37.PyCapsule_GetContext
-  PyCapsule_GetDestructor=python37.PyCapsule_GetDestructor
-  PyCapsule_GetName=python37.PyCapsule_GetName
-  PyCapsule_GetPointer=python37.PyCapsule_GetPointer
-  PyCapsule_Import=python37.PyCapsule_Import
-  PyCapsule_IsValid=python37.PyCapsule_IsValid
-  PyCapsule_New=python37.PyCapsule_New
-  PyCapsule_SetContext=python37.PyCapsule_SetContext
-  PyCapsule_SetDestructor=python37.PyCapsule_SetDestructor
-  PyCapsule_SetName=python37.PyCapsule_SetName
-  PyCapsule_SetPointer=python37.PyCapsule_SetPointer
-  PyCapsule_Type=python37.PyCapsule_Type DATA
-  PyClassMethodDescr_Type=python37.PyClassMethodDescr_Type DATA
-  PyCodec_BackslashReplaceErrors=python37.PyCodec_BackslashReplaceErrors
-  PyCodec_Decode=python37.PyCodec_Decode
-  PyCodec_Decoder=python37.PyCodec_Decoder
-  PyCodec_Encode=python37.PyCodec_Encode
-  PyCodec_Encoder=python37.PyCodec_Encoder
-  PyCodec_IgnoreErrors=python37.PyCodec_IgnoreErrors
-  PyCodec_IncrementalDecoder=python37.PyCodec_IncrementalDecoder
-  PyCodec_IncrementalEncoder=python37.PyCodec_IncrementalEncoder
-  PyCodec_KnownEncoding=python37.PyCodec_KnownEncoding
-  PyCodec_LookupError=python37.PyCodec_LookupError
-  PyCodec_NameReplaceErrors=python37.PyCodec_NameReplaceErrors
-  PyCodec_Register=python37.PyCodec_Register
-  PyCodec_RegisterError=python37.PyCodec_RegisterError
-  PyCodec_ReplaceErrors=python37.PyCodec_ReplaceErrors
-  PyCodec_StreamReader=python37.PyCodec_StreamReader
-  PyCodec_StreamWriter=python37.PyCodec_StreamWriter
-  PyCodec_StrictErrors=python37.PyCodec_StrictErrors
-  PyCodec_XMLCharRefReplaceErrors=python37.PyCodec_XMLCharRefReplaceErrors
-  PyComplex_FromDoubles=python37.PyComplex_FromDoubles
-  PyComplex_ImagAsDouble=python37.PyComplex_ImagAsDouble
-  PyComplex_RealAsDouble=python37.PyComplex_RealAsDouble
-  PyComplex_Type=python37.PyComplex_Type DATA
-  PyDescr_NewClassMethod=python37.PyDescr_NewClassMethod
-  PyDescr_NewGetSet=python37.PyDescr_NewGetSet
-  PyDescr_NewMember=python37.PyDescr_NewMember
-  PyDescr_NewMethod=python37.PyDescr_NewMethod
-  PyDictItems_Type=python37.PyDictItems_Type DATA
-  PyDictIterItem_Type=python37.PyDictIterItem_Type DATA
-  PyDictIterKey_Type=python37.PyDictIterKey_Type DATA
-  PyDictIterValue_Type=python37.PyDictIterValue_Type DATA
-  PyDictKeys_Type=python37.PyDictKeys_Type DATA
-  PyDictProxy_New=python37.PyDictProxy_New
-  PyDictProxy_Type=python37.PyDictProxy_Type DATA
-  PyDictValues_Type=python37.PyDictValues_Type DATA
-  PyDict_Clear=python37.PyDict_Clear
-  PyDict_Contains=python37.PyDict_Contains
-  PyDict_Copy=python37.PyDict_Copy
-  PyDict_DelItem=python37.PyDict_DelItem
-  PyDict_DelItemString=python37.PyDict_DelItemString
-  PyDict_GetItem=python37.PyDict_GetItem
-  PyDict_GetItemString=python37.PyDict_GetItemString
-  PyDict_GetItemWithError=python37.PyDict_GetItemWithError
-  PyDict_Items=python37.PyDict_Items
-  PyDict_Keys=python37.PyDict_Keys
-  PyDict_Merge=python37.PyDict_Merge
-  PyDict_MergeFromSeq2=python37.PyDict_MergeFromSeq2
-  PyDict_New=python37.PyDict_New
-  PyDict_Next=python37.PyDict_Next
-  PyDict_SetItem=python37.PyDict_SetItem
-  PyDict_SetItemString=python37.PyDict_SetItemString
-  PyDict_Size=python37.PyDict_Size
-  PyDict_Type=python37.PyDict_Type DATA
-  PyDict_Update=python37.PyDict_Update
-  PyDict_Values=python37.PyDict_Values
-  PyEllipsis_Type=python37.PyEllipsis_Type DATA
-  PyEnum_Type=python37.PyEnum_Type DATA
-  PyErr_BadArgument=python37.PyErr_BadArgument
-  PyErr_BadInternalCall=python37.PyErr_BadInternalCall
-  PyErr_CheckSignals=python37.PyErr_CheckSignals
-  PyErr_Clear=python37.PyErr_Clear
-  PyErr_Display=python37.PyErr_Display
-  PyErr_ExceptionMatches=python37.PyErr_ExceptionMatches
-  PyErr_Fetch=python37.PyErr_Fetch
-  PyErr_Format=python37.PyErr_Format
-  PyErr_FormatV=python37.PyErr_FormatV
-  PyErr_GetExcInfo=python37.PyErr_GetExcInfo
-  PyErr_GivenExceptionMatches=python37.PyErr_GivenExceptionMatches
-  PyErr_NewException=python37.PyErr_NewException
-  PyErr_NewExceptionWithDoc=python37.PyErr_NewExceptionWithDoc
-  PyErr_NoMemory=python37.PyErr_NoMemory
-  PyErr_NormalizeException=python37.PyErr_NormalizeException
-  PyErr_Occurred=python37.PyErr_Occurred
-  PyErr_Print=python37.PyErr_Print
-  PyErr_PrintEx=python37.PyErr_PrintEx
-  PyErr_ProgramText=python37.PyErr_ProgramText
-  PyErr_ResourceWarning=python37.PyErr_ResourceWarning
-  PyErr_Restore=python37.PyErr_Restore
-  PyErr_SetExcFromWindowsErr=python37.PyErr_SetExcFromWindowsErr
-  PyErr_SetExcFromWindowsErrWithFilename=python37.PyErr_SetExcFromWindowsErrWithFilename
-  PyErr_SetExcFromWindowsErrWithFilenameObject=python37.PyErr_SetExcFromWindowsErrWithFilenameObject
-  PyErr_SetExcFromWindowsErrWithFilenameObjects=python37.PyErr_SetExcFromWindowsErrWithFilenameObjects
-  PyErr_SetExcInfo=python37.PyErr_SetExcInfo
-  PyErr_SetFromErrno=python37.PyErr_SetFromErrno
-  PyErr_SetFromErrnoWithFilename=python37.PyErr_SetFromErrnoWithFilename
-  PyErr_SetFromErrnoWithFilenameObject=python37.PyErr_SetFromErrnoWithFilenameObject
-  PyErr_SetFromErrnoWithFilenameObjects=python37.PyErr_SetFromErrnoWithFilenameObjects
-  PyErr_SetFromWindowsErr=python37.PyErr_SetFromWindowsErr
-  PyErr_SetFromWindowsErrWithFilename=python37.PyErr_SetFromWindowsErrWithFilename
-  PyErr_SetImportError=python37.PyErr_SetImportError
-  PyErr_SetImportErrorSubclass=python37.PyErr_SetImportErrorSubclass
-  PyErr_SetInterrupt=python37.PyErr_SetInterrupt
-  PyErr_SetNone=python37.PyErr_SetNone
-  PyErr_SetObject=python37.PyErr_SetObject
-  PyErr_SetString=python37.PyErr_SetString
-  PyErr_SyntaxLocation=python37.PyErr_SyntaxLocation
-  PyErr_SyntaxLocationEx=python37.PyErr_SyntaxLocationEx
-  PyErr_WarnEx=python37.PyErr_WarnEx
-  PyErr_WarnExplicit=python37.PyErr_WarnExplicit
-  PyErr_WarnFormat=python37.PyErr_WarnFormat
-  PyErr_WriteUnraisable=python37.PyErr_WriteUnraisable
-  PyEval_AcquireLock=python37.PyEval_AcquireLock
-  PyEval_AcquireThread=python37.PyEval_AcquireThread
-  PyEval_CallFunction=python37.PyEval_CallFunction
-  PyEval_CallMethod=python37.PyEval_CallMethod
-  PyEval_CallObjectWithKeywords=python37.PyEval_CallObjectWithKeywords
-  PyEval_EvalCode=python37.PyEval_EvalCode
-  PyEval_EvalCodeEx=python37.PyEval_EvalCodeEx
-  PyEval_EvalFrame=python37.PyEval_EvalFrame
-  PyEval_EvalFrameEx=python37.PyEval_EvalFrameEx
-  PyEval_GetBuiltins=python37.PyEval_GetBuiltins
-  PyEval_GetCallStats=python37.PyEval_GetCallStats
-  PyEval_GetFrame=python37.PyEval_GetFrame
-  PyEval_GetFuncDesc=python37.PyEval_GetFuncDesc
-  PyEval_GetFuncName=python37.PyEval_GetFuncName
-  PyEval_GetGlobals=python37.PyEval_GetGlobals
-  PyEval_GetLocals=python37.PyEval_GetLocals
-  PyEval_InitThreads=python37.PyEval_InitThreads
-  PyEval_ReInitThreads=python37.PyEval_ReInitThreads
-  PyEval_ReleaseLock=python37.PyEval_ReleaseLock
-  PyEval_ReleaseThread=python37.PyEval_ReleaseThread
-  PyEval_RestoreThread=python37.PyEval_RestoreThread
-  PyEval_SaveThread=python37.PyEval_SaveThread
-  PyEval_ThreadsInitialized=python37.PyEval_ThreadsInitialized
-  PyExc_ArithmeticError=python37.PyExc_ArithmeticError DATA
-  PyExc_AssertionError=python37.PyExc_AssertionError DATA
-  PyExc_AttributeError=python37.PyExc_AttributeError DATA
-  PyExc_BaseException=python37.PyExc_BaseException DATA
-  PyExc_BlockingIOError=python37.PyExc_BlockingIOError DATA
-  PyExc_BrokenPipeError=python37.PyExc_BrokenPipeError DATA
-  PyExc_BufferError=python37.PyExc_BufferError DATA
-  PyExc_BytesWarning=python37.PyExc_BytesWarning DATA
-  PyExc_ChildProcessError=python37.PyExc_ChildProcessError DATA
-  PyExc_ConnectionAbortedError=python37.PyExc_ConnectionAbortedError DATA
-  PyExc_ConnectionError=python37.PyExc_ConnectionError DATA
-  PyExc_ConnectionRefusedError=python37.PyExc_ConnectionRefusedError DATA
-  PyExc_ConnectionResetError=python37.PyExc_ConnectionResetError DATA
-  PyExc_DeprecationWarning=python37.PyExc_DeprecationWarning DATA
-  PyExc_EOFError=python37.PyExc_EOFError DATA
-  PyExc_EnvironmentError=python37.PyExc_EnvironmentError DATA
-  PyExc_Exception=python37.PyExc_Exception DATA
-  PyExc_FileExistsError=python37.PyExc_FileExistsError DATA
-  PyExc_FileNotFoundError=python37.PyExc_FileNotFoundError DATA
-  PyExc_FloatingPointError=python37.PyExc_FloatingPointError DATA
-  PyExc_FutureWarning=python37.PyExc_FutureWarning DATA
-  PyExc_GeneratorExit=python37.PyExc_GeneratorExit DATA
-  PyExc_IOError=python37.PyExc_IOError DATA
-  PyExc_ImportError=python37.PyExc_ImportError DATA
-  PyExc_ImportWarning=python37.PyExc_ImportWarning DATA
-  PyExc_IndentationError=python37.PyExc_IndentationError DATA
-  PyExc_IndexError=python37.PyExc_IndexError DATA
-  PyExc_InterruptedError=python37.PyExc_InterruptedError DATA
-  PyExc_IsADirectoryError=python37.PyExc_IsADirectoryError DATA
-  PyExc_KeyError=python37.PyExc_KeyError DATA
-  PyExc_KeyboardInterrupt=python37.PyExc_KeyboardInterrupt DATA
-  PyExc_LookupError=python37.PyExc_LookupError DATA
-  PyExc_MemoryError=python37.PyExc_MemoryError DATA
-  PyExc_ModuleNotFoundError=python37.PyExc_ModuleNotFoundError DATA
-  PyExc_NameError=python37.PyExc_NameError DATA
-  PyExc_NotADirectoryError=python37.PyExc_NotADirectoryError DATA
-  PyExc_NotImplementedError=python37.PyExc_NotImplementedError DATA
-  PyExc_OSError=python37.PyExc_OSError DATA
-  PyExc_OverflowError=python37.PyExc_OverflowError DATA
-  PyExc_PendingDeprecationWarning=python37.PyExc_PendingDeprecationWarning DATA
-  PyExc_PermissionError=python37.PyExc_PermissionError DATA
-  PyExc_ProcessLookupError=python37.PyExc_ProcessLookupError DATA
-  PyExc_RecursionError=python37.PyExc_RecursionError DATA
-  PyExc_ReferenceError=python37.PyExc_ReferenceError DATA
-  PyExc_ResourceWarning=python37.PyExc_ResourceWarning DATA
-  PyExc_RuntimeError=python37.PyExc_RuntimeError DATA
-  PyExc_RuntimeWarning=python37.PyExc_RuntimeWarning DATA
-  PyExc_StopAsyncIteration=python37.PyExc_StopAsyncIteration DATA
-  PyExc_StopIteration=python37.PyExc_StopIteration DATA
-  PyExc_SyntaxError=python37.PyExc_SyntaxError DATA
-  PyExc_SyntaxWarning=python37.PyExc_SyntaxWarning DATA
-  PyExc_SystemError=python37.PyExc_SystemError DATA
-  PyExc_SystemExit=python37.PyExc_SystemExit DATA
-  PyExc_TabError=python37.PyExc_TabError DATA
-  PyExc_TimeoutError=python37.PyExc_TimeoutError DATA
-  PyExc_TypeError=python37.PyExc_TypeError DATA
-  PyExc_UnboundLocalError=python37.PyExc_UnboundLocalError DATA
-  PyExc_UnicodeDecodeError=python37.PyExc_UnicodeDecodeError DATA
-  PyExc_UnicodeEncodeError=python37.PyExc_UnicodeEncodeError DATA
-  PyExc_UnicodeError=python37.PyExc_UnicodeError DATA
-  PyExc_UnicodeTranslateError=python37.PyExc_UnicodeTranslateError DATA
-  PyExc_UnicodeWarning=python37.PyExc_UnicodeWarning DATA
-  PyExc_UserWarning=python37.PyExc_UserWarning DATA
-  PyExc_ValueError=python37.PyExc_ValueError DATA
-  PyExc_Warning=python37.PyExc_Warning DATA
-  PyExc_WindowsError=python37.PyExc_WindowsError DATA
-  PyExc_ZeroDivisionError=python37.PyExc_ZeroDivisionError DATA
-  PyException_GetCause=python37.PyException_GetCause
-  PyException_GetContext=python37.PyException_GetContext
-  PyException_GetTraceback=python37.PyException_GetTraceback
-  PyException_SetCause=python37.PyException_SetCause
-  PyException_SetContext=python37.PyException_SetContext
-  PyException_SetTraceback=python37.PyException_SetTraceback
-  PyFile_FromFd=python37.PyFile_FromFd
-  PyFile_GetLine=python37.PyFile_GetLine
-  PyFile_WriteObject=python37.PyFile_WriteObject
-  PyFile_WriteString=python37.PyFile_WriteString
-  PyFilter_Type=python37.PyFilter_Type DATA
-  PyFloat_AsDouble=python37.PyFloat_AsDouble
-  PyFloat_FromDouble=python37.PyFloat_FromDouble
-  PyFloat_FromString=python37.PyFloat_FromString
-  PyFloat_GetInfo=python37.PyFloat_GetInfo
-  PyFloat_GetMax=python37.PyFloat_GetMax
-  PyFloat_GetMin=python37.PyFloat_GetMin
-  PyFloat_Type=python37.PyFloat_Type DATA
-  PyFrozenSet_New=python37.PyFrozenSet_New
-  PyFrozenSet_Type=python37.PyFrozenSet_Type DATA
-  PyGC_Collect=python37.PyGC_Collect
-  PyGILState_Ensure=python37.PyGILState_Ensure
-  PyGILState_GetThisThreadState=python37.PyGILState_GetThisThreadState
-  PyGILState_Release=python37.PyGILState_Release
-  PyGetSetDescr_Type=python37.PyGetSetDescr_Type DATA
-  PyImport_AddModule=python37.PyImport_AddModule
-  PyImport_AddModuleObject=python37.PyImport_AddModuleObject
-  PyImport_AppendInittab=python37.PyImport_AppendInittab
-  PyImport_Cleanup=python37.PyImport_Cleanup
-  PyImport_ExecCodeModule=python37.PyImport_ExecCodeModule
-  PyImport_ExecCodeModuleEx=python37.PyImport_ExecCodeModuleEx
-  PyImport_ExecCodeModuleObject=python37.PyImport_ExecCodeModuleObject
-  PyImport_ExecCodeModuleWithPathnames=python37.PyImport_ExecCodeModuleWithPathnames
-  PyImport_GetImporter=python37.PyImport_GetImporter
-  PyImport_GetMagicNumber=python37.PyImport_GetMagicNumber
-  PyImport_GetMagicTag=python37.PyImport_GetMagicTag
-  PyImport_GetModule=python37.PyImport_GetModule
-  PyImport_GetModuleDict=python37.PyImport_GetModuleDict
-  PyImport_Import=python37.PyImport_Import
-  PyImport_ImportFrozenModule=python37.PyImport_ImportFrozenModule
-  PyImport_ImportFrozenModuleObject=python37.PyImport_ImportFrozenModuleObject
-  PyImport_ImportModule=python37.PyImport_ImportModule
-  PyImport_ImportModuleLevel=python37.PyImport_ImportModuleLevel
-  PyImport_ImportModuleLevelObject=python37.PyImport_ImportModuleLevelObject
-  PyImport_ImportModuleNoBlock=python37.PyImport_ImportModuleNoBlock
-  PyImport_ReloadModule=python37.PyImport_ReloadModule
-  PyInterpreterState_Clear=python37.PyInterpreterState_Clear
-  PyInterpreterState_Delete=python37.PyInterpreterState_Delete
-  PyInterpreterState_New=python37.PyInterpreterState_New
-  PyIter_Next=python37.PyIter_Next
-  PyListIter_Type=python37.PyListIter_Type DATA
-  PyListRevIter_Type=python37.PyListRevIter_Type DATA
-  PyList_Append=python37.PyList_Append
-  PyList_AsTuple=python37.PyList_AsTuple
-  PyList_GetItem=python37.PyList_GetItem
-  PyList_GetSlice=python37.PyList_GetSlice
-  PyList_Insert=python37.PyList_Insert
-  PyList_New=python37.PyList_New
-  PyList_Reverse=python37.PyList_Reverse
-  PyList_SetItem=python37.PyList_SetItem
-  PyList_SetSlice=python37.PyList_SetSlice
-  PyList_Size=python37.PyList_Size
-  PyList_Sort=python37.PyList_Sort
-  PyList_Type=python37.PyList_Type DATA
-  PyLongRangeIter_Type=python37.PyLongRangeIter_Type DATA
-  PyLong_AsDouble=python37.PyLong_AsDouble
-  PyLong_AsLong=python37.PyLong_AsLong
-  PyLong_AsLongAndOverflow=python37.PyLong_AsLongAndOverflow
-  PyLong_AsLongLong=python37.PyLong_AsLongLong
-  PyLong_AsLongLongAndOverflow=python37.PyLong_AsLongLongAndOverflow
-  PyLong_AsSize_t=python37.PyLong_AsSize_t
-  PyLong_AsSsize_t=python37.PyLong_AsSsize_t
-  PyLong_AsUnsignedLong=python37.PyLong_AsUnsignedLong
-  PyLong_AsUnsignedLongLong=python37.PyLong_AsUnsignedLongLong
-  PyLong_AsUnsignedLongLongMask=python37.PyLong_AsUnsignedLongLongMask
-  PyLong_AsUnsignedLongMask=python37.PyLong_AsUnsignedLongMask
-  PyLong_AsVoidPtr=python37.PyLong_AsVoidPtr
-  PyLong_FromDouble=python37.PyLong_FromDouble
-  PyLong_FromLong=python37.PyLong_FromLong
-  PyLong_FromLongLong=python37.PyLong_FromLongLong
-  PyLong_FromSize_t=python37.PyLong_FromSize_t
-  PyLong_FromSsize_t=python37.PyLong_FromSsize_t
-  PyLong_FromString=python37.PyLong_FromString
-  PyLong_FromUnsignedLong=python37.PyLong_FromUnsignedLong
-  PyLong_FromUnsignedLongLong=python37.PyLong_FromUnsignedLongLong
-  PyLong_FromVoidPtr=python37.PyLong_FromVoidPtr
-  PyLong_GetInfo=python37.PyLong_GetInfo
-  PyLong_Type=python37.PyLong_Type DATA
-  PyMap_Type=python37.PyMap_Type DATA
-  PyMapping_Check=python37.PyMapping_Check
-  PyMapping_GetItemString=python37.PyMapping_GetItemString
-  PyMapping_HasKey=python37.PyMapping_HasKey
-  PyMapping_HasKeyString=python37.PyMapping_HasKeyString
-  PyMapping_Items=python37.PyMapping_Items
-  PyMapping_Keys=python37.PyMapping_Keys
-  PyMapping_Length=python37.PyMapping_Length
-  PyMapping_SetItemString=python37.PyMapping_SetItemString
-  PyMapping_Size=python37.PyMapping_Size
-  PyMapping_Values=python37.PyMapping_Values
-  PyMem_Calloc=python37.PyMem_Calloc
-  PyMem_Free=python37.PyMem_Free
-  PyMem_Malloc=python37.PyMem_Malloc
-  PyMem_Realloc=python37.PyMem_Realloc
-  PyMemberDescr_Type=python37.PyMemberDescr_Type DATA
-  PyMemoryView_FromMemory=python37.PyMemoryView_FromMemory
-  PyMemoryView_FromObject=python37.PyMemoryView_FromObject
-  PyMemoryView_GetContiguous=python37.PyMemoryView_GetContiguous
-  PyMemoryView_Type=python37.PyMemoryView_Type DATA
-  PyMethodDescr_Type=python37.PyMethodDescr_Type DATA
-  PyModuleDef_Init=python37.PyModuleDef_Init
-  PyModuleDef_Type=python37.PyModuleDef_Type DATA
-  PyModule_AddFunctions=python37.PyModule_AddFunctions
-  PyModule_AddIntConstant=python37.PyModule_AddIntConstant
-  PyModule_AddObject=python37.PyModule_AddObject
-  PyModule_AddStringConstant=python37.PyModule_AddStringConstant
-  PyModule_Create2=python37.PyModule_Create2
-  PyModule_ExecDef=python37.PyModule_ExecDef
-  PyModule_FromDefAndSpec2=python37.PyModule_FromDefAndSpec2
-  PyModule_GetDef=python37.PyModule_GetDef
-  PyModule_GetDict=python37.PyModule_GetDict
-  PyModule_GetFilename=python37.PyModule_GetFilename
-  PyModule_GetFilenameObject=python37.PyModule_GetFilenameObject
-  PyModule_GetName=python37.PyModule_GetName
-  PyModule_GetNameObject=python37.PyModule_GetNameObject
-  PyModule_GetState=python37.PyModule_GetState
-  PyModule_New=python37.PyModule_New
-  PyModule_NewObject=python37.PyModule_NewObject
-  PyModule_SetDocString=python37.PyModule_SetDocString
-  PyModule_Type=python37.PyModule_Type DATA
-  PyNullImporter_Type=python37.PyNullImporter_Type DATA
-  PyNumber_Absolute=python37.PyNumber_Absolute
-  PyNumber_Add=python37.PyNumber_Add
-  PyNumber_And=python37.PyNumber_And
-  PyNumber_AsSsize_t=python37.PyNumber_AsSsize_t
-  PyNumber_Check=python37.PyNumber_Check
-  PyNumber_Divmod=python37.PyNumber_Divmod
-  PyNumber_Float=python37.PyNumber_Float
-  PyNumber_FloorDivide=python37.PyNumber_FloorDivide
-  PyNumber_InPlaceAdd=python37.PyNumber_InPlaceAdd
-  PyNumber_InPlaceAnd=python37.PyNumber_InPlaceAnd
-  PyNumber_InPlaceFloorDivide=python37.PyNumber_InPlaceFloorDivide
-  PyNumber_InPlaceLshift=python37.PyNumber_InPlaceLshift
-  PyNumber_InPlaceMatrixMultiply=python37.PyNumber_InPlaceMatrixMultiply
-  PyNumber_InPlaceMultiply=python37.PyNumber_InPlaceMultiply
-  PyNumber_InPlaceOr=python37.PyNumber_InPlaceOr
-  PyNumber_InPlacePower=python37.PyNumber_InPlacePower
-  PyNumber_InPlaceRemainder=python37.PyNumber_InPlaceRemainder
-  PyNumber_InPlaceRshift=python37.PyNumber_InPlaceRshift
-  PyNumber_InPlaceSubtract=python37.PyNumber_InPlaceSubtract
-  PyNumber_InPlaceTrueDivide=python37.PyNumber_InPlaceTrueDivide
-  PyNumber_InPlaceXor=python37.PyNumber_InPlaceXor
-  PyNumber_Index=python37.PyNumber_Index
-  PyNumber_Invert=python37.PyNumber_Invert
-  PyNumber_Long=python37.PyNumber_Long
-  PyNumber_Lshift=python37.PyNumber_Lshift
-  PyNumber_MatrixMultiply=python37.PyNumber_MatrixMultiply
-  PyNumber_Multiply=python37.PyNumber_Multiply
-  PyNumber_Negative=python37.PyNumber_Negative
-  PyNumber_Or=python37.PyNumber_Or
-  PyNumber_Positive=python37.PyNumber_Positive
-  PyNumber_Power=python37.PyNumber_Power
-  PyNumber_Remainder=python37.PyNumber_Remainder
-  PyNumber_Rshift=python37.PyNumber_Rshift
-  PyNumber_Subtract=python37.PyNumber_Subtract
-  PyNumber_ToBase=python37.PyNumber_ToBase
-  PyNumber_TrueDivide=python37.PyNumber_TrueDivide
-  PyNumber_Xor=python37.PyNumber_Xor
-  PyODictItems_Type=python37.PyODictItems_Type DATA
-  PyODictIter_Type=python37.PyODictIter_Type DATA
-  PyODictKeys_Type=python37.PyODictKeys_Type DATA
-  PyODictValues_Type=python37.PyODictValues_Type DATA
-  PyODict_DelItem=python37.PyODict_DelItem
-  PyODict_New=python37.PyODict_New
-  PyODict_SetItem=python37.PyODict_SetItem
-  PyODict_Type=python37.PyODict_Type DATA
-  PyOS_AfterFork=python37.PyOS_AfterFork
-  PyOS_CheckStack=python37.PyOS_CheckStack
-  PyOS_FSPath=python37.PyOS_FSPath
-  PyOS_InitInterrupts=python37.PyOS_InitInterrupts
-  PyOS_InputHook=python37.PyOS_InputHook DATA
-  PyOS_InterruptOccurred=python37.PyOS_InterruptOccurred
-  PyOS_ReadlineFunctionPointer=python37.PyOS_ReadlineFunctionPointer DATA
-  PyOS_double_to_string=python37.PyOS_double_to_string
-  PyOS_getsig=python37.PyOS_getsig
-  PyOS_mystricmp=python37.PyOS_mystricmp
-  PyOS_mystrnicmp=python37.PyOS_mystrnicmp
-  PyOS_setsig=python37.PyOS_setsig
-  PyOS_snprintf=python37.PyOS_snprintf
-  PyOS_string_to_double=python37.PyOS_string_to_double
-  PyOS_strtol=python37.PyOS_strtol
-  PyOS_strtoul=python37.PyOS_strtoul
-  PyOS_vsnprintf=python37.PyOS_vsnprintf
-  PyObject_ASCII=python37.PyObject_ASCII
-  PyObject_AsCharBuffer=python37.PyObject_AsCharBuffer
-  PyObject_AsFileDescriptor=python37.PyObject_AsFileDescriptor
-  PyObject_AsReadBuffer=python37.PyObject_AsReadBuffer
-  PyObject_AsWriteBuffer=python37.PyObject_AsWriteBuffer
-  PyObject_Bytes=python37.PyObject_Bytes
-  PyObject_Call=python37.PyObject_Call
-  PyObject_CallFunction=python37.PyObject_CallFunction
-  PyObject_CallFunctionObjArgs=python37.PyObject_CallFunctionObjArgs
-  PyObject_CallMethod=python37.PyObject_CallMethod
-  PyObject_CallMethodObjArgs=python37.PyObject_CallMethodObjArgs
-  PyObject_CallObject=python37.PyObject_CallObject
-  PyObject_Calloc=python37.PyObject_Calloc
-  PyObject_CheckReadBuffer=python37.PyObject_CheckReadBuffer
-  PyObject_ClearWeakRefs=python37.PyObject_ClearWeakRefs
-  PyObject_DelItem=python37.PyObject_DelItem
-  PyObject_DelItemString=python37.PyObject_DelItemString
-  PyObject_Dir=python37.PyObject_Dir
-  PyObject_Format=python37.PyObject_Format
-  PyObject_Free=python37.PyObject_Free
-  PyObject_GC_Del=python37.PyObject_GC_Del
-  PyObject_GC_Track=python37.PyObject_GC_Track
-  PyObject_GC_UnTrack=python37.PyObject_GC_UnTrack
-  PyObject_GenericGetAttr=python37.PyObject_GenericGetAttr
-  PyObject_GenericSetAttr=python37.PyObject_GenericSetAttr
-  PyObject_GenericSetDict=python37.PyObject_GenericSetDict
-  PyObject_GetAttr=python37.PyObject_GetAttr
-  PyObject_GetAttrString=python37.PyObject_GetAttrString
-  PyObject_GetItem=python37.PyObject_GetItem
-  PyObject_GetIter=python37.PyObject_GetIter
-  PyObject_HasAttr=python37.PyObject_HasAttr
-  PyObject_HasAttrString=python37.PyObject_HasAttrString
-  PyObject_Hash=python37.PyObject_Hash
-  PyObject_HashNotImplemented=python37.PyObject_HashNotImplemented
-  PyObject_Init=python37.PyObject_Init
-  PyObject_InitVar=python37.PyObject_InitVar
-  PyObject_IsInstance=python37.PyObject_IsInstance
-  PyObject_IsSubclass=python37.PyObject_IsSubclass
-  PyObject_IsTrue=python37.PyObject_IsTrue
-  PyObject_Length=python37.PyObject_Length
-  PyObject_Malloc=python37.PyObject_Malloc
-  PyObject_Not=python37.PyObject_Not
-  PyObject_Realloc=python37.PyObject_Realloc
-  PyObject_Repr=python37.PyObject_Repr
-  PyObject_RichCompare=python37.PyObject_RichCompare
-  PyObject_RichCompareBool=python37.PyObject_RichCompareBool
-  PyObject_SelfIter=python37.PyObject_SelfIter
-  PyObject_SetAttr=python37.PyObject_SetAttr
-  PyObject_SetAttrString=python37.PyObject_SetAttrString
-  PyObject_SetItem=python37.PyObject_SetItem
-  PyObject_Size=python37.PyObject_Size
-  PyObject_Str=python37.PyObject_Str
-  PyObject_Type=python37.PyObject_Type
-  PyParser_SimpleParseFileFlags=python37.PyParser_SimpleParseFileFlags
-  PyParser_SimpleParseStringFlags=python37.PyParser_SimpleParseStringFlags
-  PyParser_SimpleParseStringFlagsFilename=python37.PyParser_SimpleParseStringFlagsFilename
-  PyProperty_Type=python37.PyProperty_Type DATA
-  PyRangeIter_Type=python37.PyRangeIter_Type DATA
-  PyRange_Type=python37.PyRange_Type DATA
-  PyReversed_Type=python37.PyReversed_Type DATA
-  PySeqIter_New=python37.PySeqIter_New
-  PySeqIter_Type=python37.PySeqIter_Type DATA
-  PySequence_Check=python37.PySequence_Check
-  PySequence_Concat=python37.PySequence_Concat
-  PySequence_Contains=python37.PySequence_Contains
-  PySequence_Count=python37.PySequence_Count
-  PySequence_DelItem=python37.PySequence_DelItem
-  PySequence_DelSlice=python37.PySequence_DelSlice
-  PySequence_Fast=python37.PySequence_Fast
-  PySequence_GetItem=python37.PySequence_GetItem
-  PySequence_GetSlice=python37.PySequence_GetSlice
-  PySequence_In=python37.PySequence_In
-  PySequence_InPlaceConcat=python37.PySequence_InPlaceConcat
-  PySequence_InPlaceRepeat=python37.PySequence_InPlaceRepeat
-  PySequence_Index=python37.PySequence_Index
-  PySequence_Length=python37.PySequence_Length
-  PySequence_List=python37.PySequence_List
-  PySequence_Repeat=python37.PySequence_Repeat
-  PySequence_SetItem=python37.PySequence_SetItem
-  PySequence_SetSlice=python37.PySequence_SetSlice
-  PySequence_Size=python37.PySequence_Size
-  PySequence_Tuple=python37.PySequence_Tuple
-  PySetIter_Type=python37.PySetIter_Type DATA
-  PySet_Add=python37.PySet_Add
-  PySet_Clear=python37.PySet_Clear
-  PySet_Contains=python37.PySet_Contains
-  PySet_Discard=python37.PySet_Discard
-  PySet_New=python37.PySet_New
-  PySet_Pop=python37.PySet_Pop
-  PySet_Size=python37.PySet_Size
-  PySet_Type=python37.PySet_Type DATA
-  PySlice_AdjustIndices=python37.PySlice_AdjustIndices
-  PySlice_GetIndices=python37.PySlice_GetIndices
-  PySlice_GetIndicesEx=python37.PySlice_GetIndicesEx
-  PySlice_New=python37.PySlice_New
-  PySlice_Type=python37.PySlice_Type DATA
-  PySlice_Unpack=python37.PySlice_Unpack
-  PySortWrapper_Type=python37.PySortWrapper_Type DATA
-  PyInterpreterState_GetID=python37.PyInterpreterState_GetID
-  PyState_AddModule=python37.PyState_AddModule
-  PyState_FindModule=python37.PyState_FindModule
-  PyState_RemoveModule=python37.PyState_RemoveModule
-  PyStructSequence_GetItem=python37.PyStructSequence_GetItem
-  PyStructSequence_New=python37.PyStructSequence_New
-  PyStructSequence_NewType=python37.PyStructSequence_NewType
-  PyStructSequence_SetItem=python37.PyStructSequence_SetItem
-  PySuper_Type=python37.PySuper_Type DATA
-  PySys_AddWarnOption=python37.PySys_AddWarnOption
-  PySys_AddWarnOptionUnicode=python37.PySys_AddWarnOptionUnicode
-  PySys_AddXOption=python37.PySys_AddXOption
-  PySys_FormatStderr=python37.PySys_FormatStderr
-  PySys_FormatStdout=python37.PySys_FormatStdout
-  PySys_GetObject=python37.PySys_GetObject
-  PySys_GetXOptions=python37.PySys_GetXOptions
-  PySys_HasWarnOptions=python37.PySys_HasWarnOptions
-  PySys_ResetWarnOptions=python37.PySys_ResetWarnOptions
-  PySys_SetArgv=python37.PySys_SetArgv
-  PySys_SetArgvEx=python37.PySys_SetArgvEx
-  PySys_SetObject=python37.PySys_SetObject
-  PySys_SetPath=python37.PySys_SetPath
-  PySys_WriteStderr=python37.PySys_WriteStderr
-  PySys_WriteStdout=python37.PySys_WriteStdout
-  PyThreadState_Clear=python37.PyThreadState_Clear
-  PyThreadState_Delete=python37.PyThreadState_Delete
-  PyThreadState_DeleteCurrent=python37.PyThreadState_DeleteCurrent
-  PyThreadState_Get=python37.PyThreadState_Get
-  PyThreadState_GetDict=python37.PyThreadState_GetDict
-  PyThreadState_New=python37.PyThreadState_New
-  PyThreadState_SetAsyncExc=python37.PyThreadState_SetAsyncExc
-  PyThreadState_Swap=python37.PyThreadState_Swap
-  PyThread_tss_alloc=python37.PyThread_tss_alloc
-  PyThread_tss_create=python37.PyThread_tss_create
-  PyThread_tss_delete=python37.PyThread_tss_delete
-  PyThread_tss_free=python37.PyThread_tss_free
-  PyThread_tss_get=python37.PyThread_tss_get
-  PyThread_tss_is_created=python37.PyThread_tss_is_created
-  PyThread_tss_set=python37.PyThread_tss_set
-  PyTraceBack_Here=python37.PyTraceBack_Here
-  PyTraceBack_Print=python37.PyTraceBack_Print
-  PyTraceBack_Type=python37.PyTraceBack_Type DATA
-  PyTupleIter_Type=python37.PyTupleIter_Type DATA
-  PyTuple_ClearFreeList=python37.PyTuple_ClearFreeList
-  PyTuple_GetItem=python37.PyTuple_GetItem
-  PyTuple_GetSlice=python37.PyTuple_GetSlice
-  PyTuple_New=python37.PyTuple_New
-  PyTuple_Pack=python37.PyTuple_Pack
-  PyTuple_SetItem=python37.PyTuple_SetItem
-  PyTuple_Size=python37.PyTuple_Size
-  PyTuple_Type=python37.PyTuple_Type DATA
-  PyType_ClearCache=python37.PyType_ClearCache
-  PyType_FromSpec=python37.PyType_FromSpec
-  PyType_FromSpecWithBases=python37.PyType_FromSpecWithBases
-  PyType_GenericAlloc=python37.PyType_GenericAlloc
-  PyType_GenericNew=python37.PyType_GenericNew
-  PyType_GetFlags=python37.PyType_GetFlags
-  PyType_GetSlot=python37.PyType_GetSlot
-  PyType_IsSubtype=python37.PyType_IsSubtype
-  PyType_Modified=python37.PyType_Modified
-  PyType_Ready=python37.PyType_Ready
-  PyType_Type=python37.PyType_Type DATA
-  PyUnicodeDecodeError_Create=python37.PyUnicodeDecodeError_Create
-  PyUnicodeDecodeError_GetEncoding=python37.PyUnicodeDecodeError_GetEncoding
-  PyUnicodeDecodeError_GetEnd=python37.PyUnicodeDecodeError_GetEnd
-  PyUnicodeDecodeError_GetObject=python37.PyUnicodeDecodeError_GetObject
-  PyUnicodeDecodeError_GetReason=python37.PyUnicodeDecodeError_GetReason
-  PyUnicodeDecodeError_GetStart=python37.PyUnicodeDecodeError_GetStart
-  PyUnicodeDecodeError_SetEnd=python37.PyUnicodeDecodeError_SetEnd
-  PyUnicodeDecodeError_SetReason=python37.PyUnicodeDecodeError_SetReason
-  PyUnicodeDecodeError_SetStart=python37.PyUnicodeDecodeError_SetStart
-  PyUnicodeEncodeError_GetEncoding=python37.PyUnicodeEncodeError_GetEncoding
-  PyUnicodeEncodeError_GetEnd=python37.PyUnicodeEncodeError_GetEnd
-  PyUnicodeEncodeError_GetObject=python37.PyUnicodeEncodeError_GetObject
-  PyUnicodeEncodeError_GetReason=python37.PyUnicodeEncodeError_GetReason
-  PyUnicodeEncodeError_GetStart=python37.PyUnicodeEncodeError_GetStart
-  PyUnicodeEncodeError_SetEnd=python37.PyUnicodeEncodeError_SetEnd
-  PyUnicodeEncodeError_SetReason=python37.PyUnicodeEncodeError_SetReason
-  PyUnicodeEncodeError_SetStart=python37.PyUnicodeEncodeError_SetStart
-  PyUnicodeIter_Type=python37.PyUnicodeIter_Type DATA
-  PyUnicodeTranslateError_GetEnd=python37.PyUnicodeTranslateError_GetEnd
-  PyUnicodeTranslateError_GetObject=python37.PyUnicodeTranslateError_GetObject
-  PyUnicodeTranslateError_GetReason=python37.PyUnicodeTranslateError_GetReason
-  PyUnicodeTranslateError_GetStart=python37.PyUnicodeTranslateError_GetStart
-  PyUnicodeTranslateError_SetEnd=python37.PyUnicodeTranslateError_SetEnd
-  PyUnicodeTranslateError_SetReason=python37.PyUnicodeTranslateError_SetReason
-  PyUnicodeTranslateError_SetStart=python37.PyUnicodeTranslateError_SetStart
-  PyUnicode_Append=python37.PyUnicode_Append
-  PyUnicode_AppendAndDel=python37.PyUnicode_AppendAndDel
-  PyUnicode_AsASCIIString=python37.PyUnicode_AsASCIIString
-  PyUnicode_AsCharmapString=python37.PyUnicode_AsCharmapString
-  PyUnicode_AsDecodedObject=python37.PyUnicode_AsDecodedObject
-  PyUnicode_AsDecodedUnicode=python37.PyUnicode_AsDecodedUnicode
-  PyUnicode_AsEncodedObject=python37.PyUnicode_AsEncodedObject
-  PyUnicode_AsEncodedString=python37.PyUnicode_AsEncodedString
-  PyUnicode_AsEncodedUnicode=python37.PyUnicode_AsEncodedUnicode
-  PyUnicode_AsLatin1String=python37.PyUnicode_AsLatin1String
-  PyUnicode_AsMBCSString=python37.PyUnicode_AsMBCSString
-  PyUnicode_AsRawUnicodeEscapeString=python37.PyUnicode_AsRawUnicodeEscapeString
-  PyUnicode_AsUCS4=python37.PyUnicode_AsUCS4
-  PyUnicode_AsUCS4Copy=python37.PyUnicode_AsUCS4Copy
-  PyUnicode_AsUTF16String=python37.PyUnicode_AsUTF16String
-  PyUnicode_AsUTF32String=python37.PyUnicode_AsUTF32String
-  PyUnicode_AsUTF8String=python37.PyUnicode_AsUTF8String
-  PyUnicode_AsUnicodeEscapeString=python37.PyUnicode_AsUnicodeEscapeString
-  PyUnicode_AsWideChar=python37.PyUnicode_AsWideChar
-  PyUnicode_AsWideCharString=python37.PyUnicode_AsWideCharString
-  PyUnicode_BuildEncodingMap=python37.PyUnicode_BuildEncodingMap
-  PyUnicode_ClearFreeList=python37.PyUnicode_ClearFreeList
-  PyUnicode_Compare=python37.PyUnicode_Compare
-  PyUnicode_CompareWithASCIIString=python37.PyUnicode_CompareWithASCIIString
-  PyUnicode_Concat=python37.PyUnicode_Concat
-  PyUnicode_Contains=python37.PyUnicode_Contains
-  PyUnicode_Count=python37.PyUnicode_Count
-  PyUnicode_Decode=python37.PyUnicode_Decode
-  PyUnicode_DecodeASCII=python37.PyUnicode_DecodeASCII
-  PyUnicode_DecodeCharmap=python37.PyUnicode_DecodeCharmap
-  PyUnicode_DecodeCodePageStateful=python37.PyUnicode_DecodeCodePageStateful
-  PyUnicode_DecodeFSDefault=python37.PyUnicode_DecodeFSDefault
-  PyUnicode_DecodeFSDefaultAndSize=python37.PyUnicode_DecodeFSDefaultAndSize
-  PyUnicode_DecodeLatin1=python37.PyUnicode_DecodeLatin1
-  PyUnicode_DecodeLocale=python37.PyUnicode_DecodeLocale
-  PyUnicode_DecodeLocaleAndSize=python37.PyUnicode_DecodeLocaleAndSize
-  PyUnicode_DecodeMBCS=python37.PyUnicode_DecodeMBCS
-  PyUnicode_DecodeMBCSStateful=python37.PyUnicode_DecodeMBCSStateful
-  PyUnicode_DecodeRawUnicodeEscape=python37.PyUnicode_DecodeRawUnicodeEscape
-  PyUnicode_DecodeUTF16=python37.PyUnicode_DecodeUTF16
-  PyUnicode_DecodeUTF16Stateful=python37.PyUnicode_DecodeUTF16Stateful
-  PyUnicode_DecodeUTF32=python37.PyUnicode_DecodeUTF32
-  PyUnicode_DecodeUTF32Stateful=python37.PyUnicode_DecodeUTF32Stateful
-  PyUnicode_DecodeUTF7=python37.PyUnicode_DecodeUTF7
-  PyUnicode_DecodeUTF7Stateful=python37.PyUnicode_DecodeUTF7Stateful
-  PyUnicode_DecodeUTF8=python37.PyUnicode_DecodeUTF8
-  PyUnicode_DecodeUTF8Stateful=python37.PyUnicode_DecodeUTF8Stateful
-  PyUnicode_DecodeUnicodeEscape=python37.PyUnicode_DecodeUnicodeEscape
-  PyUnicode_EncodeCodePage=python37.PyUnicode_EncodeCodePage
-  PyUnicode_EncodeFSDefault=python37.PyUnicode_EncodeFSDefault
-  PyUnicode_EncodeLocale=python37.PyUnicode_EncodeLocale
-  PyUnicode_FSConverter=python37.PyUnicode_FSConverter
-  PyUnicode_FSDecoder=python37.PyUnicode_FSDecoder
-  PyUnicode_Find=python37.PyUnicode_Find
-  PyUnicode_FindChar=python37.PyUnicode_FindChar
-  PyUnicode_Format=python37.PyUnicode_Format
-  PyUnicode_FromEncodedObject=python37.PyUnicode_FromEncodedObject
-  PyUnicode_FromFormat=python37.PyUnicode_FromFormat
-  PyUnicode_FromFormatV=python37.PyUnicode_FromFormatV
-  PyUnicode_FromObject=python37.PyUnicode_FromObject
-  PyUnicode_FromOrdinal=python37.PyUnicode_FromOrdinal
-  PyUnicode_FromString=python37.PyUnicode_FromString
-  PyUnicode_FromStringAndSize=python37.PyUnicode_FromStringAndSize
-  PyUnicode_FromWideChar=python37.PyUnicode_FromWideChar
-  PyUnicode_GetDefaultEncoding=python37.PyUnicode_GetDefaultEncoding
-  PyUnicode_GetLength=python37.PyUnicode_GetLength
-  PyUnicode_GetSize=python37.PyUnicode_GetSize
-  PyUnicode_InternFromString=python37.PyUnicode_InternFromString
-  PyUnicode_InternImmortal=python37.PyUnicode_InternImmortal
-  PyUnicode_InternInPlace=python37.PyUnicode_InternInPlace
-  PyUnicode_IsIdentifier=python37.PyUnicode_IsIdentifier
-  PyUnicode_Join=python37.PyUnicode_Join
-  PyUnicode_Partition=python37.PyUnicode_Partition
-  PyUnicode_RPartition=python37.PyUnicode_RPartition
-  PyUnicode_RSplit=python37.PyUnicode_RSplit
-  PyUnicode_ReadChar=python37.PyUnicode_ReadChar
-  PyUnicode_Replace=python37.PyUnicode_Replace
-  PyUnicode_Resize=python37.PyUnicode_Resize
-  PyUnicode_RichCompare=python37.PyUnicode_RichCompare
-  PyUnicode_Split=python37.PyUnicode_Split
-  PyUnicode_Splitlines=python37.PyUnicode_Splitlines
-  PyUnicode_Substring=python37.PyUnicode_Substring
-  PyUnicode_Tailmatch=python37.PyUnicode_Tailmatch
-  PyUnicode_Translate=python37.PyUnicode_Translate
-  PyUnicode_Type=python37.PyUnicode_Type DATA
-  PyUnicode_WriteChar=python37.PyUnicode_WriteChar
-  PyWeakref_GetObject=python37.PyWeakref_GetObject
-  PyWeakref_NewProxy=python37.PyWeakref_NewProxy
-  PyWeakref_NewRef=python37.PyWeakref_NewRef
-  PyWrapperDescr_Type=python37.PyWrapperDescr_Type DATA
-  PyWrapper_New=python37.PyWrapper_New
-  PyZip_Type=python37.PyZip_Type DATA
-  Py_AddPendingCall=python37.Py_AddPendingCall
-  Py_AtExit=python37.Py_AtExit
-  Py_BuildValue=python37.Py_BuildValue
-  Py_CompileString=python37.Py_CompileString
-  Py_DecRef=python37.Py_DecRef
-  Py_DecodeLocale=python37.Py_DecodeLocale
-  Py_EncodeLocale=python37.Py_EncodeLocale
-  Py_EndInterpreter=python37.Py_EndInterpreter
-  Py_Exit=python37.Py_Exit
-  Py_FatalError=python37.Py_FatalError
-  Py_FileSystemDefaultEncodeErrors=python37.Py_FileSystemDefaultEncodeErrors DATA
-  Py_FileSystemDefaultEncoding=python37.Py_FileSystemDefaultEncoding DATA
-  Py_Finalize=python37.Py_Finalize
-  Py_FinalizeEx=python37.Py_FinalizeEx
-  Py_GetBuildInfo=python37.Py_GetBuildInfo
-  Py_GetCompiler=python37.Py_GetCompiler
-  Py_GetCopyright=python37.Py_GetCopyright
-  Py_GetExecPrefix=python37.Py_GetExecPrefix
-  Py_GetPath=python37.Py_GetPath
-  Py_GetPlatform=python37.Py_GetPlatform
-  Py_GetPrefix=python37.Py_GetPrefix
-  Py_GetProgramFullPath=python37.Py_GetProgramFullPath
-  Py_GetProgramName=python37.Py_GetProgramName
-  Py_GetPythonHome=python37.Py_GetPythonHome
-  Py_GetRecursionLimit=python37.Py_GetRecursionLimit
-  Py_GetVersion=python37.Py_GetVersion
-  Py_HasFileSystemDefaultEncoding=python37.Py_HasFileSystemDefaultEncoding DATA
-  Py_IncRef=python37.Py_IncRef
-  Py_Initialize=python37.Py_Initialize
-  Py_InitializeEx=python37.Py_InitializeEx
-  Py_IsInitialized=python37.Py_IsInitialized
-  Py_Main=python37.Py_Main
-  Py_MakePendingCalls=python37.Py_MakePendingCalls
-  Py_NewInterpreter=python37.Py_NewInterpreter
-  Py_ReprEnter=python37.Py_ReprEnter
-  Py_ReprLeave=python37.Py_ReprLeave
-  Py_SetPath=python37.Py_SetPath
-  Py_SetProgramName=python37.Py_SetProgramName
-  Py_SetPythonHome=python37.Py_SetPythonHome
-  Py_SetRecursionLimit=python37.Py_SetRecursionLimit
-  Py_SymtableString=python37.Py_SymtableString
-  Py_UTF8Mode=python37.Py_UTF8Mode DATA
-  Py_VaBuildValue=python37.Py_VaBuildValue
-  _PyArg_ParseTupleAndKeywords_SizeT=python37._PyArg_ParseTupleAndKeywords_SizeT
-  _PyArg_ParseTuple_SizeT=python37._PyArg_ParseTuple_SizeT
-  _PyArg_Parse_SizeT=python37._PyArg_Parse_SizeT
-  _PyArg_VaParseTupleAndKeywords_SizeT=python37._PyArg_VaParseTupleAndKeywords_SizeT
-  _PyArg_VaParse_SizeT=python37._PyArg_VaParse_SizeT
-  _PyErr_BadInternalCall=python37._PyErr_BadInternalCall
-  _PyObject_CallFunction_SizeT=python37._PyObject_CallFunction_SizeT
-  _PyObject_CallMethod_SizeT=python37._PyObject_CallMethod_SizeT
-  _PyObject_GC_Malloc=python37._PyObject_GC_Malloc
-  _PyObject_GC_New=python37._PyObject_GC_New
-  _PyObject_GC_NewVar=python37._PyObject_GC_NewVar
-  _PyObject_GC_Resize=python37._PyObject_GC_Resize
-  _PyObject_New=python37._PyObject_New
-  _PyObject_NewVar=python37._PyObject_NewVar
-  _PyState_AddModule=python37._PyState_AddModule
-  _PyThreadState_Init=python37._PyThreadState_Init
-  _PyThreadState_Prealloc=python37._PyThreadState_Prealloc
-  _PyTrash_delete_later=python37._PyTrash_delete_later DATA
-  _PyTrash_delete_nesting=python37._PyTrash_delete_nesting DATA
-  _PyTrash_deposit_object=python37._PyTrash_deposit_object
-  _PyTrash_destroy_chain=python37._PyTrash_destroy_chain
-  _PyTrash_thread_deposit_object=python37._PyTrash_thread_deposit_object
-  _PyTrash_thread_destroy_chain=python37._PyTrash_thread_destroy_chain
-  _PyWeakref_CallableProxyType=python37._PyWeakref_CallableProxyType DATA
-  _PyWeakref_ProxyType=python37._PyWeakref_ProxyType DATA
-  _PyWeakref_RefType=python37._PyWeakref_RefType DATA
-  _Py_BuildValue_SizeT=python37._Py_BuildValue_SizeT
-  _Py_CheckRecursionLimit=python37._Py_CheckRecursionLimit DATA
-  _Py_CheckRecursiveCall=python37._Py_CheckRecursiveCall
-  _Py_Dealloc=python37._Py_Dealloc
-  _Py_EllipsisObject=python37._Py_EllipsisObject DATA
-  _Py_FalseStruct=python37._Py_FalseStruct DATA
-  _Py_NoneStruct=python37._Py_NoneStruct DATA
-  _Py_NotImplementedStruct=python37._Py_NotImplementedStruct DATA
-  _Py_SwappedOp=python37._Py_SwappedOp DATA
-  _Py_TrueStruct=python37._Py_TrueStruct DATA
-  _Py_VaBuildValue_SizeT=python37._Py_VaBuildValue_SizeT
+  PyArg_Parse=python3.PyArg_Parse
+  PyArg_ParseTuple=python3.PyArg_ParseTuple
+  PyArg_ParseTupleAndKeywords=python3.PyArg_ParseTupleAndKeywords
+  PyArg_UnpackTuple=python3.PyArg_UnpackTuple
+  PyArg_VaParse=python3.PyArg_VaParse
+  PyArg_VaParseTupleAndKeywords=python3.PyArg_VaParseTupleAndKeywords
+  PyArg_ValidateKeywordArguments=python3.PyArg_ValidateKeywordArguments
+  PyBaseObject_Type=python3.PyBaseObject_Type DATA
+  PyBool_FromLong=python3.PyBool_FromLong
+  PyBool_Type=python3.PyBool_Type DATA
+  PyByteArrayIter_Type=python3.PyByteArrayIter_Type DATA
+  PyByteArray_AsString=python3.PyByteArray_AsString
+  PyByteArray_Concat=python3.PyByteArray_Concat
+  PyByteArray_FromObject=python3.PyByteArray_FromObject
+  PyByteArray_FromStringAndSize=python3.PyByteArray_FromStringAndSize
+  PyByteArray_Resize=python3.PyByteArray_Resize
+  PyByteArray_Size=python3.PyByteArray_Size
+  PyByteArray_Type=python3.PyByteArray_Type DATA
+  PyBytesIter_Type=python3.PyBytesIter_Type DATA
+  PyBytes_AsString=python3.PyBytes_AsString
+  PyBytes_AsStringAndSize=python3.PyBytes_AsStringAndSize
+  PyBytes_Concat=python3.PyBytes_Concat
+  PyBytes_ConcatAndDel=python3.PyBytes_ConcatAndDel
+  PyBytes_DecodeEscape=python3.PyBytes_DecodeEscape
+  PyBytes_FromFormat=python3.PyBytes_FromFormat
+  PyBytes_FromFormatV=python3.PyBytes_FromFormatV
+  PyBytes_FromObject=python3.PyBytes_FromObject
+  PyBytes_FromString=python3.PyBytes_FromString
+  PyBytes_FromStringAndSize=python3.PyBytes_FromStringAndSize
+  PyBytes_Repr=python3.PyBytes_Repr
+  PyBytes_Size=python3.PyBytes_Size
+  PyBytes_Type=python3.PyBytes_Type DATA
+  PyCFunction_Call=python3.PyCFunction_Call
+  PyCFunction_ClearFreeList=python3.PyCFunction_ClearFreeList
+  PyCFunction_GetFlags=python3.PyCFunction_GetFlags
+  PyCFunction_GetFunction=python3.PyCFunction_GetFunction
+  PyCFunction_GetSelf=python3.PyCFunction_GetSelf
+  PyCFunction_New=python3.PyCFunction_New
+  PyCFunction_NewEx=python3.PyCFunction_NewEx
+  PyCFunction_Type=python3.PyCFunction_Type DATA
+  PyCallIter_New=python3.PyCallIter_New
+  PyCallIter_Type=python3.PyCallIter_Type DATA
+  PyCallable_Check=python3.PyCallable_Check
+  PyCapsule_GetContext=python3.PyCapsule_GetContext
+  PyCapsule_GetDestructor=python3.PyCapsule_GetDestructor
+  PyCapsule_GetName=python3.PyCapsule_GetName
+  PyCapsule_GetPointer=python3.PyCapsule_GetPointer
+  PyCapsule_Import=python3.PyCapsule_Import
+  PyCapsule_IsValid=python3.PyCapsule_IsValid
+  PyCapsule_New=python3.PyCapsule_New
+  PyCapsule_SetContext=python3.PyCapsule_SetContext
+  PyCapsule_SetDestructor=python3.PyCapsule_SetDestructor
+  PyCapsule_SetName=python3.PyCapsule_SetName
+  PyCapsule_SetPointer=python3.PyCapsule_SetPointer
+  PyCapsule_Type=python3.PyCapsule_Type DATA
+  PyClassMethodDescr_Type=python3.PyClassMethodDescr_Type DATA
+  PyCodec_BackslashReplaceErrors=python3.PyCodec_BackslashReplaceErrors
+  PyCodec_Decode=python3.PyCodec_Decode
+  PyCodec_Decoder=python3.PyCodec_Decoder
+  PyCodec_Encode=python3.PyCodec_Encode
+  PyCodec_Encoder=python3.PyCodec_Encoder
+  PyCodec_IgnoreErrors=python3.PyCodec_IgnoreErrors
+  PyCodec_IncrementalDecoder=python3.PyCodec_IncrementalDecoder
+  PyCodec_IncrementalEncoder=python3.PyCodec_IncrementalEncoder
+  PyCodec_KnownEncoding=python3.PyCodec_KnownEncoding
+  PyCodec_LookupError=python3.PyCodec_LookupError
+  PyCodec_NameReplaceErrors=python3.PyCodec_NameReplaceErrors
+  PyCodec_Register=python3.PyCodec_Register
+  PyCodec_RegisterError=python3.PyCodec_RegisterError
+  PyCodec_ReplaceErrors=python3.PyCodec_ReplaceErrors
+  PyCodec_StreamReader=python3.PyCodec_StreamReader
+  PyCodec_StreamWriter=python3.PyCodec_StreamWriter
+  PyCodec_StrictErrors=python3.PyCodec_StrictErrors
+  PyCodec_XMLCharRefReplaceErrors=python3.PyCodec_XMLCharRefReplaceErrors
+  PyComplex_FromDoubles=python3.PyComplex_FromDoubles
+  PyComplex_ImagAsDouble=python3.PyComplex_ImagAsDouble
+  PyComplex_RealAsDouble=python3.PyComplex_RealAsDouble
+  PyComplex_Type=python3.PyComplex_Type DATA
+  PyDescr_NewClassMethod=python3.PyDescr_NewClassMethod
+  PyDescr_NewGetSet=python3.PyDescr_NewGetSet
+  PyDescr_NewMember=python3.PyDescr_NewMember
+  PyDescr_NewMethod=python3.PyDescr_NewMethod
+  PyDictItems_Type=python3.PyDictItems_Type DATA
+  PyDictIterItem_Type=python3.PyDictIterItem_Type DATA
+  PyDictIterKey_Type=python3.PyDictIterKey_Type DATA
+  PyDictIterValue_Type=python3.PyDictIterValue_Type DATA
+  PyDictKeys_Type=python3.PyDictKeys_Type DATA
+  PyDictProxy_New=python3.PyDictProxy_New
+  PyDictProxy_Type=python3.PyDictProxy_Type DATA
+  PyDictValues_Type=python3.PyDictValues_Type DATA
+  PyDict_Clear=python3.PyDict_Clear
+  PyDict_Contains=python3.PyDict_Contains
+  PyDict_Copy=python3.PyDict_Copy
+  PyDict_DelItem=python3.PyDict_DelItem
+  PyDict_DelItemString=python3.PyDict_DelItemString
+  PyDict_GetItem=python3.PyDict_GetItem
+  PyDict_GetItemString=python3.PyDict_GetItemString
+  PyDict_GetItemWithError=python3.PyDict_GetItemWithError
+  PyDict_Items=python3.PyDict_Items
+  PyDict_Keys=python3.PyDict_Keys
+  PyDict_Merge=python3.PyDict_Merge
+  PyDict_MergeFromSeq2=python3.PyDict_MergeFromSeq2
+  PyDict_New=python3.PyDict_New
+  PyDict_Next=python3.PyDict_Next
+  PyDict_SetItem=python3.PyDict_SetItem
+  PyDict_SetItemString=python3.PyDict_SetItemString
+  PyDict_Size=python3.PyDict_Size
+  PyDict_Type=python3.PyDict_Type DATA
+  PyDict_Update=python3.PyDict_Update
+  PyDict_Values=python3.PyDict_Values
+  PyEllipsis_Type=python3.PyEllipsis_Type DATA
+  PyEnum_Type=python3.PyEnum_Type DATA
+  PyErr_BadArgument=python3.PyErr_BadArgument
+  PyErr_BadInternalCall=python3.PyErr_BadInternalCall
+  PyErr_CheckSignals=python3.PyErr_CheckSignals
+  PyErr_Clear=python3.PyErr_Clear
+  PyErr_Display=python3.PyErr_Display
+  PyErr_ExceptionMatches=python3.PyErr_ExceptionMatches
+  PyErr_Fetch=python3.PyErr_Fetch
+  PyErr_Format=python3.PyErr_Format
+  PyErr_FormatV=python3.PyErr_FormatV
+  PyErr_GetExcInfo=python3.PyErr_GetExcInfo
+  PyErr_GivenExceptionMatches=python3.PyErr_GivenExceptionMatches
+  PyErr_NewException=python3.PyErr_NewException
+  PyErr_NewExceptionWithDoc=python3.PyErr_NewExceptionWithDoc
+  PyErr_NoMemory=python3.PyErr_NoMemory
+  PyErr_NormalizeException=python3.PyErr_NormalizeException
+  PyErr_Occurred=python3.PyErr_Occurred
+  PyErr_Print=python3.PyErr_Print
+  PyErr_PrintEx=python3.PyErr_PrintEx
+  PyErr_ProgramText=python3.PyErr_ProgramText
+  PyErr_ResourceWarning=python3.PyErr_ResourceWarning
+  PyErr_Restore=python3.PyErr_Restore
+  PyErr_SetExcFromWindowsErr=python3.PyErr_SetExcFromWindowsErr
+  PyErr_SetExcFromWindowsErrWithFilename=python3.PyErr_SetExcFromWindowsErrWithFilename
+  PyErr_SetExcFromWindowsErrWithFilenameObject=python3.PyErr_SetExcFromWindowsErrWithFilenameObject
+  PyErr_SetExcFromWindowsErrWithFilenameObjects=python3.PyErr_SetExcFromWindowsErrWithFilenameObjects
+  PyErr_SetExcInfo=python3.PyErr_SetExcInfo
+  PyErr_SetFromErrno=python3.PyErr_SetFromErrno
+  PyErr_SetFromErrnoWithFilename=python3.PyErr_SetFromErrnoWithFilename
+  PyErr_SetFromErrnoWithFilenameObject=python3.PyErr_SetFromErrnoWithFilenameObject
+  PyErr_SetFromErrnoWithFilenameObjects=python3.PyErr_SetFromErrnoWithFilenameObjects
+  PyErr_SetFromWindowsErr=python3.PyErr_SetFromWindowsErr
+  PyErr_SetFromWindowsErrWithFilename=python3.PyErr_SetFromWindowsErrWithFilename
+  PyErr_SetImportError=python3.PyErr_SetImportError
+  PyErr_SetImportErrorSubclass=python3.PyErr_SetImportErrorSubclass
+  PyErr_SetInterrupt=python3.PyErr_SetInterrupt
+  PyErr_SetNone=python3.PyErr_SetNone
+  PyErr_SetObject=python3.PyErr_SetObject
+  PyErr_SetString=python3.PyErr_SetString
+  PyErr_SyntaxLocation=python3.PyErr_SyntaxLocation
+  PyErr_SyntaxLocationEx=python3.PyErr_SyntaxLocationEx
+  PyErr_WarnEx=python3.PyErr_WarnEx
+  PyErr_WarnExplicit=python3.PyErr_WarnExplicit
+  PyErr_WarnFormat=python3.PyErr_WarnFormat
+  PyErr_WriteUnraisable=python3.PyErr_WriteUnraisable
+  PyEval_AcquireLock=python3.PyEval_AcquireLock
+  PyEval_AcquireThread=python3.PyEval_AcquireThread
+  PyEval_CallFunction=python3.PyEval_CallFunction
+  PyEval_CallMethod=python3.PyEval_CallMethod
+  PyEval_CallObjectWithKeywords=python3.PyEval_CallObjectWithKeywords
+  PyEval_EvalCode=python3.PyEval_EvalCode
+  PyEval_EvalCodeEx=python3.PyEval_EvalCodeEx
+  PyEval_EvalFrame=python3.PyEval_EvalFrame
+  PyEval_EvalFrameEx=python3.PyEval_EvalFrameEx
+  PyEval_GetBuiltins=python3.PyEval_GetBuiltins
+  PyEval_GetFrame= python3.PyEval_GetFrame
+  PyEval_GetFuncDesc=python3.PyEval_GetFuncDesc
+  PyEval_GetFuncName=python3.PyEval_GetFuncName
+  PyEval_GetGlobals=python3.PyEval_GetGlobals
+  PyEval_GetLocals=python3.PyEval_GetLocals
+  PyEval_InitThreads=python3.PyEval_InitThreads
+  PyEval_ReInitThreads=python3.PyEval_ReInitThreads
+  PyEval_ReleaseLock=python3.PyEval_ReleaseLock
+  PyEval_ReleaseThread=python3.PyEval_ReleaseThread
+  PyEval_RestoreThread=python3.PyEval_RestoreThread
+  PyEval_SaveThread=python3.PyEval_SaveThread
+  PyEval_ThreadsInitialized=python3.PyEval_ThreadsInitialized
+  PyExc_ArithmeticError=python3.PyExc_ArithmeticError DATA
+  PyExc_AssertionError=python3.PyExc_AssertionError DATA
+  PyExc_AttributeError=python3.PyExc_AttributeError DATA
+  PyExc_BaseException=python3.PyExc_BaseException DATA
+  PyExc_BlockingIOError=python3.PyExc_BlockingIOError DATA
+  PyExc_BrokenPipeError=python3.PyExc_BrokenPipeError DATA
+  PyExc_BufferError=python3.PyExc_BufferError DATA
+  PyExc_BytesWarning=python3.PyExc_BytesWarning DATA
+  PyExc_ChildProcessError=python3.PyExc_ChildProcessError DATA
+  PyExc_ConnectionAbortedError=python3.PyExc_ConnectionAbortedError DATA
+  PyExc_ConnectionError=python3.PyExc_ConnectionError DATA
+  PyExc_ConnectionRefusedError=python3.PyExc_ConnectionRefusedError DATA
+  PyExc_ConnectionResetError=python3.PyExc_ConnectionResetError DATA
+  PyExc_DeprecationWarning=python3.PyExc_DeprecationWarning DATA
+  PyExc_EOFError=python3.PyExc_EOFError DATA
+  PyExc_EnvironmentError=python3.PyExc_EnvironmentError DATA
+  PyExc_Exception=python3.PyExc_Exception DATA
+  PyExc_FileExistsError=python3.PyExc_FileExistsError DATA
+  PyExc_FileNotFoundError=python3.PyExc_FileNotFoundError DATA
+  PyExc_FloatingPointError=python3.PyExc_FloatingPointError DATA
+  PyExc_FutureWarning=python3.PyExc_FutureWarning DATA
+  PyExc_GeneratorExit=python3.PyExc_GeneratorExit DATA
+  PyExc_IOError=python3.PyExc_IOError DATA
+  PyExc_ImportError=python3.PyExc_ImportError DATA
+  PyExc_ImportWarning=python3.PyExc_ImportWarning DATA
+  PyExc_IndentationError=python3.PyExc_IndentationError DATA
+  PyExc_IndexError=python3.PyExc_IndexError DATA
+  PyExc_InterruptedError=python3.PyExc_InterruptedError DATA
+  PyExc_IsADirectoryError=python3.PyExc_IsADirectoryError DATA
+  PyExc_KeyError=python3.PyExc_KeyError DATA
+  PyExc_KeyboardInterrupt=python3.PyExc_KeyboardInterrupt DATA
+  PyExc_LookupError=python3.PyExc_LookupError DATA
+  PyExc_MemoryError=python3.PyExc_MemoryError DATA
+  PyExc_ModuleNotFoundError=python3.PyExc_ModuleNotFoundError DATA
+  PyExc_NameError=python3.PyExc_NameError DATA
+  PyExc_NotADirectoryError=python3.PyExc_NotADirectoryError DATA
+  PyExc_NotImplementedError=python3.PyExc_NotImplementedError DATA
+  PyExc_OSError=python3.PyExc_OSError DATA
+  PyExc_OverflowError=python3.PyExc_OverflowError DATA
+  PyExc_PendingDeprecationWarning=python3.PyExc_PendingDeprecationWarning DATA
+  PyExc_PermissionError=python3.PyExc_PermissionError DATA
+  PyExc_ProcessLookupError=python3.PyExc_ProcessLookupError DATA
+  PyExc_RecursionError=python3.PyExc_RecursionError DATA
+  PyExc_ReferenceError=python3.PyExc_ReferenceError DATA
+  PyExc_ResourceWarning=python3.PyExc_ResourceWarning DATA
+  PyExc_RuntimeError=python3.PyExc_RuntimeError DATA
+  PyExc_RuntimeWarning=python3.PyExc_RuntimeWarning DATA
+  PyExc_StopAsyncIteration=python3.PyExc_StopAsyncIteration DATA
+  PyExc_StopIteration=python3.PyExc_StopIteration DATA
+  PyExc_SyntaxError=python3.PyExc_SyntaxError DATA
+  PyExc_SyntaxWarning=python3.PyExc_SyntaxWarning DATA
+  PyExc_SystemError=python3.PyExc_SystemError DATA
+  PyExc_SystemExit=python3.PyExc_SystemExit DATA
+  PyExc_TabError=python3.PyExc_TabError DATA
+  PyExc_TimeoutError=python3.PyExc_TimeoutError DATA
+  PyExc_TypeError=python3.PyExc_TypeError DATA
+  PyExc_UnboundLocalError=python3.PyExc_UnboundLocalError DATA
+  PyExc_UnicodeDecodeError=python3.PyExc_UnicodeDecodeError DATA
+  PyExc_UnicodeEncodeError=python3.PyExc_UnicodeEncodeError DATA
+  PyExc_UnicodeError=python3.PyExc_UnicodeError DATA
+  PyExc_UnicodeTranslateError=python3.PyExc_UnicodeTranslateError DATA
+  PyExc_UnicodeWarning=python3.PyExc_UnicodeWarning DATA
+  PyExc_UserWarning=python3.PyExc_UserWarning DATA
+  PyExc_ValueError=python3.PyExc_ValueError DATA
+  PyExc_Warning=python3.PyExc_Warning DATA
+  PyExc_WindowsError=python3.PyExc_WindowsError DATA
+  PyExc_ZeroDivisionError=python3.PyExc_ZeroDivisionError DATA
+  PyException_GetCause=python3.PyException_GetCause
+  PyException_GetContext=python3.PyException_GetContext
+  PyException_GetTraceback=python3.PyException_GetTraceback
+  PyException_SetCause=python3.PyException_SetCause
+  PyException_SetContext=python3.PyException_SetContext
+  PyException_SetTraceback=python3.PyException_SetTraceback
+  PyFile_FromFd=python3.PyFile_FromFd
+  PyFile_GetLine=python3.PyFile_GetLine
+  PyFile_WriteObject=python3.PyFile_WriteObject
+  PyFile_WriteString=python3.PyFile_WriteString
+  PyFilter_Type=python3.PyFilter_Type DATA
+  PyFloat_AsDouble=python3.PyFloat_AsDouble
+  PyFloat_FromDouble=python3.PyFloat_FromDouble
+  PyFloat_FromString=python3.PyFloat_FromString
+  PyFloat_GetInfo=python3.PyFloat_GetInfo
+  PyFloat_GetMax=python3.PyFloat_GetMax
+  PyFloat_GetMin=python3.PyFloat_GetMin
+  PyFloat_Type=python3.PyFloat_Type DATA
+  PyFrozenSet_New=python3.PyFrozenSet_New
+  PyFrozenSet_Type=python3.PyFrozenSet_Type DATA
+  PyGC_Collect=python3.PyGC_Collect
+  PyGILState_Ensure=python3.PyGILState_Ensure
+  PyGILState_GetThisThreadState=python3.PyGILState_GetThisThreadState
+  PyGILState_Release=python3.PyGILState_Release
+  PyGetSetDescr_Type=python3.PyGetSetDescr_Type DATA
+  PyImport_AddModule=python3.PyImport_AddModule
+  PyImport_AddModuleObject=python3.PyImport_AddModuleObject
+  PyImport_AppendInittab=python3.PyImport_AppendInittab
+  PyImport_Cleanup=python3.PyImport_Cleanup
+  PyImport_ExecCodeModule=python3.PyImport_ExecCodeModule
+  PyImport_ExecCodeModuleEx=python3.PyImport_ExecCodeModuleEx
+  PyImport_ExecCodeModuleObject=python3.PyImport_ExecCodeModuleObject
+  PyImport_ExecCodeModuleWithPathnames=python3.PyImport_ExecCodeModuleWithPathnames
+  PyImport_GetImporter=python3.PyImport_GetImporter
+  PyImport_GetMagicNumber=python3.PyImport_GetMagicNumber
+  PyImport_GetMagicTag=python3.PyImport_GetMagicTag
+  PyImport_GetModule=python3.PyImport_GetModule
+  PyImport_GetModuleDict=python3.PyImport_GetModuleDict
+  PyImport_Import=python3.PyImport_Import
+  PyImport_ImportFrozenModule=python3.PyImport_ImportFrozenModule
+  PyImport_ImportFrozenModuleObject=python3.PyImport_ImportFrozenModuleObject
+  PyImport_ImportModule=python3.PyImport_ImportModule
+  PyImport_ImportModuleLevel=python3.PyImport_ImportModuleLevel
+  PyImport_ImportModuleLevelObject=python3.PyImport_ImportModuleLevelObject
+  PyImport_ImportModuleNoBlock=python3.PyImport_ImportModuleNoBlock
+  PyImport_ReloadModule=python3.PyImport_ReloadModule
+  PyInterpreterState_Clear=python3.PyInterpreterState_Clear
+  PyInterpreterState_Delete=python3.PyInterpreterState_Delete
+  PyInterpreterState_New=python3.PyInterpreterState_New
+  PyIter_Next=python3.PyIter_Next
+  PyListIter_Type=python3.PyListIter_Type DATA
+  PyListRevIter_Type=python3.PyListRevIter_Type DATA
+  PyList_Append=python3.PyList_Append
+  PyList_AsTuple=python3.PyList_AsTuple
+  PyList_GetItem=python3.PyList_GetItem
+  PyList_GetSlice=python3.PyList_GetSlice
+  PyList_Insert=python3.PyList_Insert
+  PyList_New=python3.PyList_New
+  PyList_Reverse=python3.PyList_Reverse
+  PyList_SetItem=python3.PyList_SetItem
+  PyList_SetSlice=python3.PyList_SetSlice
+  PyList_Size=python3.PyList_Size
+  PyList_Sort=python3.PyList_Sort
+  PyList_Type=python3.PyList_Type DATA
+  PyLongRangeIter_Type=python3.PyLongRangeIter_Type DATA
+  PyLong_AsDouble=python3.PyLong_AsDouble
+  PyLong_AsLong=python3.PyLong_AsLong
+  PyLong_AsLongAndOverflow=python3.PyLong_AsLongAndOverflow
+  PyLong_AsLongLong=python3.PyLong_AsLongLong
+  PyLong_AsLongLongAndOverflow=python3.PyLong_AsLongLongAndOverflow
+  PyLong_AsSize_t=python3.PyLong_AsSize_t
+  PyLong_AsSsize_t=python3.PyLong_AsSsize_t
+  PyLong_AsUnsignedLong=python3.PyLong_AsUnsignedLong
+  PyLong_AsUnsignedLongLong=python3.PyLong_AsUnsignedLongLong
+  PyLong_AsUnsignedLongLongMask=python3.PyLong_AsUnsignedLongLongMask
+  PyLong_AsUnsignedLongMask=python3.PyLong_AsUnsignedLongMask
+  PyLong_AsVoidPtr=python3.PyLong_AsVoidPtr
+  PyLong_FromDouble=python3.PyLong_FromDouble
+  PyLong_FromLong=python3.PyLong_FromLong
+  PyLong_FromLongLong=python3.PyLong_FromLongLong
+  PyLong_FromSize_t=python3.PyLong_FromSize_t
+  PyLong_FromSsize_t=python3.PyLong_FromSsize_t
+  PyLong_FromString=python3.PyLong_FromString
+  PyLong_FromUnsignedLong=python3.PyLong_FromUnsignedLong
+  PyLong_FromUnsignedLongLong=python3.PyLong_FromUnsignedLongLong
+  PyLong_FromVoidPtr=python3.PyLong_FromVoidPtr
+  PyLong_GetInfo=python3.PyLong_GetInfo
+  PyLong_Type=python3.PyLong_Type DATA
+  PyMap_Type=python3.PyMap_Type DATA
+  PyMapping_Check=python3.PyMapping_Check
+  PyMapping_GetItemString=python3.PyMapping_GetItemString
+  PyMapping_HasKey=python3.PyMapping_HasKey
+  PyMapping_HasKeyString=python3.PyMapping_HasKeyString
+  PyMapping_Items=python3.PyMapping_Items
+  PyMapping_Keys=python3.PyMapping_Keys
+  PyMapping_Length=python3.PyMapping_Length
+  PyMapping_SetItemString=python3.PyMapping_SetItemString
+  PyMapping_Size=python3.PyMapping_Size
+  PyMapping_Values=python3.PyMapping_Values
+  PyMem_Calloc=python3.PyMem_Calloc
+  PyMem_Free=python3.PyMem_Free
+  PyMem_Malloc=python3.PyMem_Malloc
+  PyMem_Realloc=python3.PyMem_Realloc
+  PyMemberDescr_Type=python3.PyMemberDescr_Type DATA
+  PyMemoryView_FromMemory=python3.PyMemoryView_FromMemory
+  PyMemoryView_FromObject=python3.PyMemoryView_FromObject
+  PyMemoryView_GetContiguous=python3.PyMemoryView_GetContiguous
+  PyMemoryView_Type=python3.PyMemoryView_Type DATA
+  PyMethodDescr_Type=python3.PyMethodDescr_Type DATA
+  PyModuleDef_Init=python3.PyModuleDef_Init
+  PyModuleDef_Type=python3.PyModuleDef_Type DATA
+  PyModule_AddFunctions=python3.PyModule_AddFunctions
+  PyModule_AddIntConstant=python3.PyModule_AddIntConstant
+  PyModule_AddObject=python3.PyModule_AddObject
+  PyModule_AddStringConstant=python3.PyModule_AddStringConstant
+  PyModule_Create2=python3.PyModule_Create2
+  PyModule_ExecDef=python3.PyModule_ExecDef
+  PyModule_FromDefAndSpec2=python3.PyModule_FromDefAndSpec2
+  PyModule_GetDef=python3.PyModule_GetDef
+  PyModule_GetDict=python3.PyModule_GetDict
+  PyModule_GetFilename=python3.PyModule_GetFilename
+  PyModule_GetFilenameObject=python3.PyModule_GetFilenameObject
+  PyModule_GetName=python3.PyModule_GetName
+  PyModule_GetNameObject=python3.PyModule_GetNameObject
+  PyModule_GetState=python3.PyModule_GetState
+  PyModule_New=python3.PyModule_New
+  PyModule_NewObject=python3.PyModule_NewObject
+  PyModule_SetDocString=python3.PyModule_SetDocString
+  PyModule_Type=python3.PyModule_Type DATA
+  ;PyNullImporter_Type=python3.PyNullImporter_Type DATA
+  PyNumber_Absolute=python3.PyNumber_Absolute
+  PyNumber_Add=python3.PyNumber_Add
+  PyNumber_And=python3.PyNumber_And
+  PyNumber_AsSsize_t=python3.PyNumber_AsSsize_t
+  PyNumber_Check=python3.PyNumber_Check
+  PyNumber_Divmod=python3.PyNumber_Divmod
+  PyNumber_Float=python3.PyNumber_Float
+  PyNumber_FloorDivide=python3.PyNumber_FloorDivide
+  PyNumber_InPlaceAdd=python3.PyNumber_InPlaceAdd
+  PyNumber_InPlaceAnd=python3.PyNumber_InPlaceAnd
+  PyNumber_InPlaceFloorDivide=python3.PyNumber_InPlaceFloorDivide
+  PyNumber_InPlaceLshift=python3.PyNumber_InPlaceLshift
+  PyNumber_InPlaceMatrixMultiply=python3.PyNumber_InPlaceMatrixMultiply
+  PyNumber_InPlaceMultiply=python3.PyNumber_InPlaceMultiply
+  PyNumber_InPlaceOr=python3.PyNumber_InPlaceOr
+  PyNumber_InPlacePower=python3.PyNumber_InPlacePower
+  PyNumber_InPlaceRemainder=python3.PyNumber_InPlaceRemainder
+  PyNumber_InPlaceRshift=python3.PyNumber_InPlaceRshift
+  PyNumber_InPlaceSubtract=python3.PyNumber_InPlaceSubtract
+  PyNumber_InPlaceTrueDivide=python3.PyNumber_InPlaceTrueDivide
+  PyNumber_InPlaceXor=python3.PyNumber_InPlaceXor
+  PyNumber_Index=python3.PyNumber_Index
+  PyNumber_Invert=python3.PyNumber_Invert
+  PyNumber_Long=python3.PyNumber_Long
+  PyNumber_Lshift=python3.PyNumber_Lshift
+  PyNumber_MatrixMultiply=python3.PyNumber_MatrixMultiply
+  PyNumber_Multiply=python3.PyNumber_Multiply
+  PyNumber_Negative=python3.PyNumber_Negative
+  PyNumber_Or=python3.PyNumber_Or
+  PyNumber_Positive=python3.PyNumber_Positive
+  PyNumber_Power=python3.PyNumber_Power
+  PyNumber_Remainder=python3.PyNumber_Remainder
+  PyNumber_Rshift=python3.PyNumber_Rshift
+  PyNumber_Subtract=python3.PyNumber_Subtract
+  PyNumber_ToBase=python3.PyNumber_ToBase
+  PyNumber_TrueDivide=python3.PyNumber_TrueDivide
+  PyNumber_Xor=python3.PyNumber_Xor
+  PyODictItems_Type=python3.PyODictItems_Type DATA
+  PyODictIter_Type=python3.PyODictIter_Type DATA
+  PyODictKeys_Type=python3.PyODictKeys_Type DATA
+  PyODictValues_Type=python3.PyODictValues_Type DATA
+  PyODict_DelItem=python3.PyODict_DelItem
+  PyODict_New=python3.PyODict_New
+  PyODict_SetItem=python3.PyODict_SetItem
+  PyODict_Type=python3.PyODict_Type DATA
+  PyOS_AfterFork=python3.PyOS_AfterFork
+  ;PyOS_CheckStack=python3.PyOS_CheckStack
+  PyOS_FSPath=python3.PyOS_FSPath
+  PyOS_InitInterrupts=python3.PyOS_InitInterrupts
+  PyOS_InputHook=python3.PyOS_InputHook DATA
+  PyOS_InterruptOccurred=python3.PyOS_InterruptOccurred
+  PyOS_ReadlineFunctionPointer=python3.PyOS_ReadlineFunctionPointer DATA
+  PyOS_double_to_string=python3.PyOS_double_to_string
+  PyOS_getsig=python3.PyOS_getsig
+  PyOS_mystricmp=python3.PyOS_mystricmp
+  PyOS_mystrnicmp=python3.PyOS_mystrnicmp
+  PyOS_setsig=python3.PyOS_setsig
+  PyOS_snprintf=python3.PyOS_snprintf
+  PyOS_string_to_double=python3.PyOS_string_to_double
+  PyOS_strtol=python3.PyOS_strtol
+  PyOS_strtoul=python3.PyOS_strtoul
+  PyOS_vsnprintf=python3.PyOS_vsnprintf
+  PyObject_ASCII=python3.PyObject_ASCII
+  PyObject_AsCharBuffer=python3.PyObject_AsCharBuffer
+  PyObject_AsFileDescriptor=python3.PyObject_AsFileDescriptor
+  PyObject_AsReadBuffer=python3.PyObject_AsReadBuffer
+  PyObject_AsWriteBuffer=python3.PyObject_AsWriteBuffer
+  PyObject_Bytes=python3.PyObject_Bytes
+  PyObject_Call=python3.PyObject_Call
+  PyObject_CallFunction=python3.PyObject_CallFunction
+  PyObject_CallFunctionObjArgs=python3.PyObject_CallFunctionObjArgs
+  PyObject_CallMethod=python3.PyObject_CallMethod
+  PyObject_CallMethodObjArgs=python3.PyObject_CallMethodObjArgs
+  PyObject_CallObject=python3.PyObject_CallObject
+  PyObject_Calloc=python3.PyObject_Calloc
+  PyObject_CheckReadBuffer=python3.PyObject_CheckReadBuffer
+  PyObject_ClearWeakRefs=python3.PyObject_ClearWeakRefs
+  PyObject_DelItem=python3.PyObject_DelItem
+  PyObject_DelItemString=python3.PyObject_DelItemString
+  PyObject_Dir=python3.PyObject_Dir
+  PyObject_Format=python3.PyObject_Format
+  PyObject_Free=python3.PyObject_Free
+  PyObject_GC_Del=python3.PyObject_GC_Del
+  PyObject_GC_Track=python3.PyObject_GC_Track
+  PyObject_GC_UnTrack=python3.PyObject_GC_UnTrack
+  PyObject_GenericGetAttr=python3.PyObject_GenericGetAttr
+  PyObject_GenericSetAttr=python3.PyObject_GenericSetAttr
+  PyObject_GenericSetDict=python3.PyObject_GenericSetDict
+  PyObject_GetAttr=python3.PyObject_GetAttr
+  PyObject_GetAttrString=python3.PyObject_GetAttrString
+  PyObject_GetItem=python3.PyObject_GetItem
+  PyObject_GetIter=python3.PyObject_GetIter
+  PyObject_HasAttr=python3.PyObject_HasAttr
+  PyObject_HasAttrString=python3.PyObject_HasAttrString
+  PyObject_Hash=python3.PyObject_Hash
+  PyObject_HashNotImplemented=python3.PyObject_HashNotImplemented
+  PyObject_Init=python3.PyObject_Init
+  PyObject_InitVar=python3.PyObject_InitVar
+  PyObject_IsInstance=python3.PyObject_IsInstance
+  PyObject_IsSubclass=python3.PyObject_IsSubclass
+  PyObject_IsTrue=python3.PyObject_IsTrue
+  PyObject_Length=python3.PyObject_Length
+  PyObject_Malloc=python3.PyObject_Malloc
+  PyObject_Not=python3.PyObject_Not
+  PyObject_Realloc=python3.PyObject_Realloc
+  PyObject_Repr=python3.PyObject_Repr
+  PyObject_RichCompare=python3.PyObject_RichCompare
+  PyObject_RichCompareBool=python3.PyObject_RichCompareBool
+  PyObject_SelfIter=python3.PyObject_SelfIter
+  PyObject_SetAttr=python3.PyObject_SetAttr
+  PyObject_SetAttrString=python3.PyObject_SetAttrString
+  PyObject_SetItem=python3.PyObject_SetItem
+  PyObject_Size=python3.PyObject_Size
+  PyObject_Str=python3.PyObject_Str
+  PyObject_Type=python3.PyObject_Type
+  PyParser_SimpleParseFileFlags=python3.PyParser_SimpleParseFileFlags
+  PyParser_SimpleParseStringFlags=python3.PyParser_SimpleParseStringFlags
+  PyParser_SimpleParseStringFlagsFilename=python3.PyParser_SimpleParseStringFlagsFilename
+  PyProperty_Type=python3.PyProperty_Type DATA
+  PyRangeIter_Type=python3.PyRangeIter_Type DATA
+  PyRange_Type=python3.PyRange_Type DATA
+  PyReversed_Type=python3.PyReversed_Type DATA
+  PySeqIter_New=python3.PySeqIter_New
+  PySeqIter_Type=python3.PySeqIter_Type DATA
+  PySequence_Check=python3.PySequence_Check
+  PySequence_Concat=python3.PySequence_Concat
+  PySequence_Contains=python3.PySequence_Contains
+  PySequence_Count=python3.PySequence_Count
+  PySequence_DelItem=python3.PySequence_DelItem
+  PySequence_DelSlice=python3.PySequence_DelSlice
+  PySequence_Fast=python3.PySequence_Fast
+  PySequence_GetItem=python3.PySequence_GetItem
+  PySequence_GetSlice=python3.PySequence_GetSlice
+  PySequence_In=python3.PySequence_In
+  PySequence_InPlaceConcat=python3.PySequence_InPlaceConcat
+  PySequence_InPlaceRepeat=python3.PySequence_InPlaceRepeat
+  PySequence_Index=python3.PySequence_Index
+  PySequence_Length=python3.PySequence_Length
+  PySequence_List=python3.PySequence_List
+  PySequence_Repeat=python3.PySequence_Repeat
+  PySequence_SetItem=python3.PySequence_SetItem
+  PySequence_SetSlice=python3.PySequence_SetSlice
+  PySequence_Size=python3.PySequence_Size
+  PySequence_Tuple=python3.PySequence_Tuple
+  PySetIter_Type=python3.PySetIter_Type DATA
+  PySet_Add=python3.PySet_Add
+  PySet_Clear=python3.PySet_Clear
+  PySet_Contains=python3.PySet_Contains
+  PySet_Discard=python3.PySet_Discard
+  PySet_New=python3.PySet_New
+  PySet_Pop=python3.PySet_Pop
+  PySet_Size=python3.PySet_Size
+  PySet_Type=python3.PySet_Type DATA
+  PySlice_AdjustIndices=python3.PySlice_AdjustIndices
+  PySlice_GetIndices=python3.PySlice_GetIndices
+  PySlice_GetIndicesEx=python3.PySlice_GetIndicesEx
+  PySlice_New=python3.PySlice_New
+  PySlice_Type=python3.PySlice_Type DATA
+  PySlice_Unpack=python3.PySlice_Unpack
+  ;PySortWrapper_Type=python3.PySortWrapper_Type DATA
+  PyInterpreterState_GetID=python3.PyInterpreterState_GetID
+  PyState_AddModule=python3.PyState_AddModule
+  PyState_FindModule=python3.PyState_FindModule
+  PyState_RemoveModule=python3.PyState_RemoveModule
+  PyStructSequence_GetItem=python3.PyStructSequence_GetItem
+  PyStructSequence_New=python3.PyStructSequence_New
+  PyStructSequence_NewType=python3.PyStructSequence_NewType
+  PyStructSequence_SetItem=python3.PyStructSequence_SetItem
+  PySuper_Type=python3.PySuper_Type DATA
+  PySys_AddWarnOption=python3.PySys_AddWarnOption
+  PySys_AddWarnOptionUnicode=python3.PySys_AddWarnOptionUnicode
+  PySys_AddXOption=python3.PySys_AddXOption
+  PySys_FormatStderr=python3.PySys_FormatStderr
+  PySys_FormatStdout=python3.PySys_FormatStdout
+  PySys_GetObject=python3.PySys_GetObject
+  PySys_GetXOptions=python3.PySys_GetXOptions
+  PySys_HasWarnOptions=python3.PySys_HasWarnOptions
+  PySys_ResetWarnOptions=python3.PySys_ResetWarnOptions
+  PySys_SetArgv=python3.PySys_SetArgv
+  PySys_SetArgvEx=python3.PySys_SetArgvEx
+  PySys_SetObject=python3.PySys_SetObject
+  PySys_SetPath=python3.PySys_SetPath
+  PySys_WriteStderr=python3.PySys_WriteStderr
+  PySys_WriteStdout=python3.PySys_WriteStdout
+  PyThreadState_Clear=python3.PyThreadState_Clear
+  PyThreadState_Delete=python3.PyThreadState_Delete
+  PyThreadState_DeleteCurrent=python3.PyThreadState_DeleteCurrent
+  PyThreadState_Get=python3.PyThreadState_Get
+  PyThreadState_GetDict=python3.PyThreadState_GetDict
+  PyThreadState_New=python3.PyThreadState_New
+  PyThreadState_SetAsyncExc=python3.PyThreadState_SetAsyncExc
+  PyThreadState_Swap=python3.PyThreadState_Swap
+  PyThread_tss_alloc=python3.PyThread_tss_alloc
+  PyThread_tss_create=python3.PyThread_tss_create
+  PyThread_tss_delete=python3.PyThread_tss_delete
+  PyThread_tss_free=python3.PyThread_tss_free
+  PyThread_tss_get=python3.PyThread_tss_get
+  PyThread_tss_is_created=python3.PyThread_tss_is_created
+  PyThread_tss_set=python3.PyThread_tss_set
+  PyTraceBack_Here=python3.PyTraceBack_Here
+  PyTraceBack_Print=python3.PyTraceBack_Print
+  PyTraceBack_Type=python3.PyTraceBack_Type DATA
+  PyTupleIter_Type=python3.PyTupleIter_Type DATA
+  PyTuple_ClearFreeList=python3.PyTuple_ClearFreeList
+  PyTuple_GetItem=python3.PyTuple_GetItem
+  PyTuple_GetSlice=python3.PyTuple_GetSlice
+  PyTuple_New=python3.PyTuple_New
+  PyTuple_Pack=python3.PyTuple_Pack
+  PyTuple_SetItem=python3.PyTuple_SetItem
+  PyTuple_Size=python3.PyTuple_Size
+  PyTuple_Type=python3.PyTuple_Type DATA
+  PyType_ClearCache=python3.PyType_ClearCache
+  PyType_FromSpec=python3.PyType_FromSpec
+  PyType_FromSpecWithBases=python3.PyType_FromSpecWithBases
+  PyType_GenericAlloc=python3.PyType_GenericAlloc
+  PyType_GenericNew=python3.PyType_GenericNew
+  PyType_GetFlags=python3.PyType_GetFlags
+  PyType_GetSlot=python3.PyType_GetSlot
+  PyType_IsSubtype=python3.PyType_IsSubtype
+  PyType_Modified=python3.PyType_Modified
+  PyType_Ready=python3.PyType_Ready
+  PyType_Type=python3.PyType_Type DATA
+  PyUnicodeDecodeError_Create=python3.PyUnicodeDecodeError_Create
+  PyUnicodeDecodeError_GetEncoding=python3.PyUnicodeDecodeError_GetEncoding
+  PyUnicodeDecodeError_GetEnd=python3.PyUnicodeDecodeError_GetEnd
+  PyUnicodeDecodeError_GetObject=python3.PyUnicodeDecodeError_GetObject
+  PyUnicodeDecodeError_GetReason=python3.PyUnicodeDecodeError_GetReason
+  PyUnicodeDecodeError_GetStart=python3.PyUnicodeDecodeError_GetStart
+  PyUnicodeDecodeError_SetEnd=python3.PyUnicodeDecodeError_SetEnd
+  PyUnicodeDecodeError_SetReason=python3.PyUnicodeDecodeError_SetReason
+  PyUnicodeDecodeError_SetStart=python3.PyUnicodeDecodeError_SetStart
+  PyUnicodeEncodeError_GetEncoding=python3.PyUnicodeEncodeError_GetEncoding
+  PyUnicodeEncodeError_GetEnd=python3.PyUnicodeEncodeError_GetEnd
+  PyUnicodeEncodeError_GetObject=python3.PyUnicodeEncodeError_GetObject
+  PyUnicodeEncodeError_GetReason=python3.PyUnicodeEncodeError_GetReason
+  PyUnicodeEncodeError_GetStart=python3.PyUnicodeEncodeError_GetStart
+  PyUnicodeEncodeError_SetEnd=python3.PyUnicodeEncodeError_SetEnd
+  PyUnicodeEncodeError_SetReason=python3.PyUnicodeEncodeError_SetReason
+  PyUnicodeEncodeError_SetStart=python3.PyUnicodeEncodeError_SetStart
+  PyUnicodeIter_Type=python3.PyUnicodeIter_Type DATA
+  PyUnicodeTranslateError_GetEnd=python3.PyUnicodeTranslateError_GetEnd
+  PyUnicodeTranslateError_GetObject=python3.PyUnicodeTranslateError_GetObject
+  PyUnicodeTranslateError_GetReason=python3.PyUnicodeTranslateError_GetReason
+  PyUnicodeTranslateError_GetStart=python3.PyUnicodeTranslateError_GetStart
+  PyUnicodeTranslateError_SetEnd=python3.PyUnicodeTranslateError_SetEnd
+  PyUnicodeTranslateError_SetReason=python3.PyUnicodeTranslateError_SetReason
+  PyUnicodeTranslateError_SetStart=python3.PyUnicodeTranslateError_SetStart
+  PyUnicode_Append=python3.PyUnicode_Append
+  PyUnicode_AppendAndDel=python3.PyUnicode_AppendAndDel
+  PyUnicode_AsASCIIString=python3.PyUnicode_AsASCIIString
+  PyUnicode_AsCharmapString=python3.PyUnicode_AsCharmapString
+  PyUnicode_AsDecodedObject=python3.PyUnicode_AsDecodedObject
+  PyUnicode_AsDecodedUnicode=python3.PyUnicode_AsDecodedUnicode
+  PyUnicode_AsEncodedObject=python3.PyUnicode_AsEncodedObject
+  PyUnicode_AsEncodedString=python3.PyUnicode_AsEncodedString
+  PyUnicode_AsEncodedUnicode=python3.PyUnicode_AsEncodedUnicode
+  PyUnicode_AsLatin1String=python3.PyUnicode_AsLatin1String
+  PyUnicode_AsMBCSString=python3.PyUnicode_AsMBCSString
+  PyUnicode_AsRawUnicodeEscapeString=python3.PyUnicode_AsRawUnicodeEscapeString
+  PyUnicode_AsUCS4=python3.PyUnicode_AsUCS4
+  PyUnicode_AsUCS4Copy=python3.PyUnicode_AsUCS4Copy
+  PyUnicode_AsUTF16String=python3.PyUnicode_AsUTF16String
+  PyUnicode_AsUTF32String=python3.PyUnicode_AsUTF32String
+  PyUnicode_AsUTF8String=python3.PyUnicode_AsUTF8String
+  PyUnicode_AsUnicodeEscapeString=python3.PyUnicode_AsUnicodeEscapeString
+  PyUnicode_AsWideChar=python3.PyUnicode_AsWideChar
+  PyUnicode_AsWideCharString=python3.PyUnicode_AsWideCharString
+  PyUnicode_BuildEncodingMap=python3.PyUnicode_BuildEncodingMap
+  PyUnicode_ClearFreeList=python3.PyUnicode_ClearFreeList
+  PyUnicode_Compare=python3.PyUnicode_Compare
+  PyUnicode_CompareWithASCIIString=python3.PyUnicode_CompareWithASCIIString
+  PyUnicode_Concat=python3.PyUnicode_Concat
+  PyUnicode_Contains=python3.PyUnicode_Contains
+  PyUnicode_Count=python3.PyUnicode_Count
+  PyUnicode_Decode=python3.PyUnicode_Decode
+  PyUnicode_DecodeASCII=python3.PyUnicode_DecodeASCII
+  PyUnicode_DecodeCharmap=python3.PyUnicode_DecodeCharmap
+  PyUnicode_DecodeCodePageStateful=python3.PyUnicode_DecodeCodePageStateful
+  PyUnicode_DecodeFSDefault=python3.PyUnicode_DecodeFSDefault
+  PyUnicode_DecodeFSDefaultAndSize=python3.PyUnicode_DecodeFSDefaultAndSize
+  PyUnicode_DecodeLatin1=python3.PyUnicode_DecodeLatin1
+  PyUnicode_DecodeLocale=python3.PyUnicode_DecodeLocale
+  PyUnicode_DecodeLocaleAndSize=python3.PyUnicode_DecodeLocaleAndSize
+  PyUnicode_DecodeMBCS=python3.PyUnicode_DecodeMBCS
+  PyUnicode_DecodeMBCSStateful=python3.PyUnicode_DecodeMBCSStateful
+  PyUnicode_DecodeRawUnicodeEscape=python3.PyUnicode_DecodeRawUnicodeEscape
+  PyUnicode_DecodeUTF16=python3.PyUnicode_DecodeUTF16
+  PyUnicode_DecodeUTF16Stateful=python3.PyUnicode_DecodeUTF16Stateful
+  PyUnicode_DecodeUTF32=python3.PyUnicode_DecodeUTF32
+  PyUnicode_DecodeUTF32Stateful=python3.PyUnicode_DecodeUTF32Stateful
+  PyUnicode_DecodeUTF7=python3.PyUnicode_DecodeUTF7
+  PyUnicode_DecodeUTF7Stateful=python3.PyUnicode_DecodeUTF7Stateful
+  PyUnicode_DecodeUTF8=python3.PyUnicode_DecodeUTF8
+  PyUnicode_DecodeUTF8Stateful=python3.PyUnicode_DecodeUTF8Stateful
+  PyUnicode_DecodeUnicodeEscape=python3.PyUnicode_DecodeUnicodeEscape
+  PyUnicode_EncodeCodePage=python3.PyUnicode_EncodeCodePage
+  PyUnicode_EncodeFSDefault=python3.PyUnicode_EncodeFSDefault
+  PyUnicode_EncodeLocale=python3.PyUnicode_EncodeLocale
+  PyUnicode_FSConverter=python3.PyUnicode_FSConverter
+  PyUnicode_FSDecoder=python3.PyUnicode_FSDecoder
+  PyUnicode_Find=python3.PyUnicode_Find
+  PyUnicode_FindChar=python3.PyUnicode_FindChar
+  PyUnicode_Format=python3.PyUnicode_Format
+  PyUnicode_FromEncodedObject=python3.PyUnicode_FromEncodedObject
+  PyUnicode_FromFormat=python3.PyUnicode_FromFormat
+  PyUnicode_FromFormatV=python3.PyUnicode_FromFormatV
+  PyUnicode_FromObject=python3.PyUnicode_FromObject
+  PyUnicode_FromOrdinal=python3.PyUnicode_FromOrdinal
+  PyUnicode_FromString=python3.PyUnicode_FromString
+  PyUnicode_FromStringAndSize=python3.PyUnicode_FromStringAndSize
+  PyUnicode_FromWideChar=python3.PyUnicode_FromWideChar
+  PyUnicode_GetDefaultEncoding=python3.PyUnicode_GetDefaultEncoding
+  PyUnicode_GetLength=python3.PyUnicode_GetLength
+  PyUnicode_GetSize=python3.PyUnicode_GetSize
+  PyUnicode_InternFromString=python3.PyUnicode_InternFromString
+  PyUnicode_InternImmortal=python3.PyUnicode_InternImmortal
+  PyUnicode_InternInPlace=python3.PyUnicode_InternInPlace
+  PyUnicode_IsIdentifier=python3.PyUnicode_IsIdentifier
+  PyUnicode_Join=python3.PyUnicode_Join
+  PyUnicode_Partition=python3.PyUnicode_Partition
+  PyUnicode_RPartition=python3.PyUnicode_RPartition
+  PyUnicode_RSplit=python3.PyUnicode_RSplit
+  PyUnicode_ReadChar=python3.PyUnicode_ReadChar
+  PyUnicode_Replace=python3.PyUnicode_Replace
+  PyUnicode_Resize=python3.PyUnicode_Resize
+  PyUnicode_RichCompare=python3.PyUnicode_RichCompare
+  PyUnicode_Split=python3.PyUnicode_Split
+  PyUnicode_Splitlines=python3.PyUnicode_Splitlines
+  PyUnicode_Substring=python3.PyUnicode_Substring
+  PyUnicode_Tailmatch=python3.PyUnicode_Tailmatch
+  PyUnicode_Translate=python3.PyUnicode_Translate
+  PyUnicode_Type=python3.PyUnicode_Type DATA
+  PyUnicode_WriteChar=python3.PyUnicode_WriteChar
+  PyWeakref_GetObject=python3.PyWeakref_GetObject
+  PyWeakref_NewProxy=python3.PyWeakref_NewProxy
+  PyWeakref_NewRef=python3.PyWeakref_NewRef
+  PyWrapperDescr_Type=python3.PyWrapperDescr_Type DATA
+  PyWrapper_New=python3.PyWrapper_New
+  PyZip_Type=python3.PyZip_Type DATA
+  Py_AddPendingCall=python3.Py_AddPendingCall
+  Py_AtExit=python3.Py_AtExit
+  Py_BuildValue=python3.Py_BuildValue
+  Py_CompileString=python3.Py_CompileString
+  Py_DecRef=python3.Py_DecRef
+  Py_DecodeLocale=python3.Py_DecodeLocale
+  Py_EncodeLocale=python3.Py_EncodeLocale
+  Py_EndInterpreter=python3.Py_EndInterpreter
+  Py_Exit=python3.Py_Exit
+  Py_FatalError=python3.Py_FatalError
+  Py_FileSystemDefaultEncodeErrors=python3.Py_FileSystemDefaultEncodeErrors DATA
+  Py_FileSystemDefaultEncoding=python3.Py_FileSystemDefaultEncoding DATA
+  Py_Finalize=python3.Py_Finalize
+  Py_FinalizeEx=python3.Py_FinalizeEx
+  Py_GetBuildInfo=python3.Py_GetBuildInfo
+  Py_GetCompiler=python3.Py_GetCompiler
+  Py_GetCopyright=python3.Py_GetCopyright
+  Py_GetExecPrefix=python3.Py_GetExecPrefix
+  Py_GetPath=python3.Py_GetPath
+  Py_GetPlatform=python3.Py_GetPlatform
+  Py_GetPrefix=python3.Py_GetPrefix
+  Py_GetProgramFullPath=python3.Py_GetProgramFullPath
+  Py_GetProgramName=python3.Py_GetProgramName
+  Py_GetPythonHome=python3.Py_GetPythonHome
+  Py_GetRecursionLimit=python3.Py_GetRecursionLimit
+  Py_GetVersion=python3.Py_GetVersion
+  Py_HasFileSystemDefaultEncoding=python3.Py_HasFileSystemDefaultEncoding DATA
+  Py_IncRef=python3.Py_IncRef
+  Py_Initialize=python3.Py_Initialize
+  Py_InitializeEx=python3.Py_InitializeEx
+  Py_IsInitialized=python3.Py_IsInitialized
+  Py_Main=python3.Py_Main
+  Py_MakePendingCalls=python3.Py_MakePendingCalls
+  Py_NewInterpreter=python3.Py_NewInterpreter
+  Py_ReprEnter=python3.Py_ReprEnter
+  Py_ReprLeave=python3.Py_ReprLeave
+  Py_SetPath=python3.Py_SetPath
+  Py_SetProgramName=python3.Py_SetProgramName
+  Py_SetPythonHome=python3.Py_SetPythonHome
+  Py_SetRecursionLimit=python3.Py_SetRecursionLimit
+  Py_SymtableString=python3.Py_SymtableString
+  Py_UTF8Mode=python3.Py_UTF8Mode DATA
+  Py_VaBuildValue=python3.Py_VaBuildValue
+  _PyArg_ParseTupleAndKeywords_SizeT=python3._PyArg_ParseTupleAndKeywords_SizeT
+  _PyArg_ParseTuple_SizeT=python3._PyArg_ParseTuple_SizeT
+  _PyArg_Parse_SizeT=python3._PyArg_Parse_SizeT
+  _PyArg_VaParseTupleAndKeywords_SizeT=python3._PyArg_VaParseTupleAndKeywords_SizeT
+  _PyArg_VaParse_SizeT=python3._PyArg_VaParse_SizeT
+  _PyErr_BadInternalCall=python3._PyErr_BadInternalCall
+  _PyObject_CallFunction_SizeT=python3._PyObject_CallFunction_SizeT
+  _PyObject_CallMethod_SizeT=python3._PyObject_CallMethod_SizeT
+  _PyObject_GC_Malloc=python3._PyObject_GC_Malloc
+  _PyObject_GC_New=python3._PyObject_GC_New
+  _PyObject_GC_NewVar=python3._PyObject_GC_NewVar
+  _PyObject_GC_Resize=python3._PyObject_GC_Resize
+  _PyObject_New=python3._PyObject_New
+  _PyObject_NewVar=python3._PyObject_NewVar
+  _PyState_AddModule=python3._PyState_AddModule
+  _PyThreadState_Init=python3._PyThreadState_Init
+  _PyThreadState_Prealloc=python3._PyThreadState_Prealloc
+  ;_PyTrash_delete_later=python3._PyTrash_delete_later DATA
+  ;_PyTrash_delete_nesting=python3._PyTrash_delete_nesting DATA
+  _PyTrash_deposit_object=python3._PyTrash_deposit_object
+  _PyTrash_destroy_chain=python3._PyTrash_destroy_chain
+  _PyTrash_thread_deposit_object=python3._PyTrash_thread_deposit_object
+  _PyTrash_thread_destroy_chain=python3._PyTrash_thread_destroy_chain
+  _PyWeakref_CallableProxyType=python3._PyWeakref_CallableProxyType DATA
+  _PyWeakref_ProxyType=python3._PyWeakref_ProxyType DATA
+  _PyWeakref_RefType=python3._PyWeakref_RefType DATA
+  _Py_BuildValue_SizeT=python3._Py_BuildValue_SizeT
+  _Py_CheckRecursionLimit=python3._Py_CheckRecursionLimit DATA
+  _Py_CheckRecursiveCall=python3._Py_CheckRecursiveCall
+  _Py_Dealloc=python3._Py_Dealloc
+  _Py_EllipsisObject=python3._Py_EllipsisObject DATA
+  _Py_FalseStruct=python3._Py_FalseStruct DATA
+  _Py_NoneStruct=python3._Py_NoneStruct DATA
+  _Py_NotImplementedStruct=python3._Py_NotImplementedStruct DATA
+  _Py_SwappedOp=python3._Py_SwappedOp DATA
+  _Py_TrueStruct=python3._Py_TrueStruct DATA
+  _Py_VaBuildValue_SizeT=python3._Py_VaBuildValue_SizeT
diff --git a/PC/uwp_compat.cpp b/PC/uwp_compat.cpp
new file mode 100644
index 0000000000..933e5b0e5f
--- /dev/null
+++ b/PC/uwp_compat.cpp
@@ -0,0 +1,24 @@
+#include <Python.h>
+#include <windows.h>
+
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP | WINAPI_PARTITION_SYSTEM)
+#include <windows.security.cryptography.h>
+using namespace Windows::Security::Cryptography;
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+int
+uwp_urandom(unsigned char* buffer, Py_ssize_t size, int raise) {
+	auto s = static_cast<unsigned int>(size);
+	auto buf = ref new Platform::Array<unsigned char>(buffer, s);
+	auto cryptoBuffer = CryptographicBuffer::GenerateRandom(s);
+	CryptographicBuffer::CopyToByteArray(cryptoBuffer, &buf);
+	return 0;
+}
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
\ No newline at end of file
diff --git a/PC/winreg.c b/PC/winreg.c
index 16a10c7232..b649943311 100644
--- a/PC/winreg.c
+++ b/PC/winreg.c
@@ -16,6 +16,7 @@
 #include "structmember.h"
 #include "windows.h"
 
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
 static BOOL PyHKEY_AsHKEY(PyObject *ob, HKEY *pRes, BOOL bNoneOK);
 static BOOL clinic_HKEY_converter(PyObject *ob, void *p);
 static PyObject *PyHKEY_FromHKEY(HKEY h);
@@ -1971,3 +1972,4 @@ PyMODINIT_FUNC PyInit_winreg(void)
 }
 
 
+#endif
diff --git a/Python/bootstrap_hash.c b/Python/bootstrap_hash.c
index 58b0802f46..20b66c093a 100644
--- a/Python/bootstrap_hash.c
+++ b/Python/bootstrap_hash.c
@@ -1,10 +1,14 @@
 #include "Python.h"
 #ifdef MS_WINDOWS
 #  include <windows.h>
+#ifdef MS_DESKTOP
 /* All sample MSDN wincrypt programs include the header below. It is at least
  * required with Min GW. */
 #  include <wincrypt.h>
 #else
+#  include <windows.security.cryptography.h>
+#endif
+#else
 #  include <fcntl.h>
 #  ifdef HAVE_SYS_STAT_H
 #    include <sys/stat.h>
@@ -31,6 +35,7 @@ static int _Py_HashSecret_Initialized = 0;
 #endif
 
 #ifdef MS_WINDOWS
+#ifdef MS_DESKTOP
 static HCRYPTPROV hCryptProv = 0;
 
 static int
@@ -49,12 +54,19 @@ error:
     }
     return -1;
 }
+#endif
+
+#ifdef MS_APP
+int
+uwp_urandom(unsigned char* buffer, Py_ssize_t size, int raise);
+#endif
 
 /* Fill buffer with size pseudo-random bytes generated by the Windows CryptoGen
    API. Return 0 on success, or raise an exception and return -1 on error. */
 static int
 win32_urandom(unsigned char *buffer, Py_ssize_t size, int raise)
 {
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
     Py_ssize_t chunk;
 
     if (hCryptProv == 0)
@@ -79,6 +91,9 @@ win32_urandom(unsigned char *buffer, Py_ssize_t size, int raise)
         size -= chunk;
     }
     return 0;
+#else
+	return uwp_urandom(buffer, size, raise);
+#endif
 }
 
 #else /* !MS_WINDOWS */
@@ -621,10 +636,12 @@ void
 _Py_HashRandomization_Fini(void)
 {
 #ifdef MS_WINDOWS
+#ifdef MS_DESKTOP
     if (hCryptProv) {
         CryptReleaseContext(hCryptProv, 0);
         hCryptProv = 0;
     }
+#endif
 #else
     dev_urandom_close();
 #endif
diff --git a/Python/dynload_win.c b/Python/dynload_win.c
index 51325be658..69c6c528ab 100644
--- a/Python/dynload_win.c
+++ b/Python/dynload_win.c
@@ -188,6 +188,9 @@ dl_funcptr _PyImport_FindSharedFuncptrWindows(const char *prefix,
                                               const char *shortname,
                                               PyObject *pathname, FILE *fp)
 {
+#ifdef MS_APP
+	return NULL;
+#else
     dl_funcptr p;
     char funcname[258], *import_python;
     const wchar_t *wpathname;
@@ -218,8 +221,11 @@ dl_funcptr _PyImport_FindSharedFuncptrWindows(const char *prefix,
         /* We use LoadLibraryEx so Windows looks for dependent DLLs
             in directory of pathname first. */
         /* XXX This call doesn't exist in Windows CE */
-        hDLL = LoadLibraryExW(wpathname, NULL,
-                              LOAD_WITH_ALTERED_SEARCH_PATH);
+#ifdef MS_DESKTOP
+        hDLL = LoadLibraryExW(wpathname, NULL, LOAD_WITH_ALTERED_SEARCH_PATH);
+#else
+		hDLL = LoadPackagedLibrary(wpathname, 0);
+#endif
 #if HAVE_SXS
         _Py_DeactivateActCtx(cookie);
 #endif
@@ -306,4 +312,5 @@ dl_funcptr _PyImport_FindSharedFuncptrWindows(const char *prefix,
     }
 
     return p;
+#endif
 }
diff --git a/Python/fileutils.c b/Python/fileutils.c
index b2c634db23..f565b512d9 100644
--- a/Python/fileutils.c
+++ b/Python/fileutils.c
@@ -743,6 +743,18 @@ FILE_TIME_to_time_t_nsec(FILETIME *in_ptr, time_t *time_out, int* nsec_out)
     *time_out = Py_SAFE_DOWNCAST((in / 10000000) - secs_between_epochs, __int64, time_t);
 }
 
+static void
+LARGE_INTEGER_to_time_t_nsec(LARGE_INTEGER *in_ptr, time_t *time_out, int* nsec_out)
+{
+    /* XXX endianness. Shouldn't matter, as all Windows implementations are little-endian */
+    /* Cannot simply cast and dereference in_ptr,
+       since it might not be aligned properly */
+    __int64 in;
+    memcpy(&in, in_ptr, sizeof(in));
+    *nsec_out = (int)(in_ptr->QuadPart % 10000000) * 100; /* FILETIME is in units of 100 nsec. */
+    *time_out = Py_SAFE_DOWNCAST((in_ptr->QuadPart / 10000000) - secs_between_epochs, __int64, time_t);
+}
+
 void
 _Py_time_t_to_FILE_TIME(time_t time_in, int nsec_in, FILETIME *out_ptr)
 {
@@ -753,6 +765,65 @@ _Py_time_t_to_FILE_TIME(time_t time_in, int nsec_in, FILETIME *out_ptr)
     memcpy(out_ptr, &out, sizeof(out));
 }
 
+PyAPI_FUNC(HANDLE)
+_Py_win_create_file(
+	_In_ LPCWSTR lpFileName,
+	_In_ DWORD dwDesiredAccess,
+	_In_ DWORD dwShareMode,
+	_In_opt_ LPSECURITY_ATTRIBUTES lpSecurityAttributes,
+	_In_ DWORD dwCreationDisposition,
+	_In_ DWORD dwFlagsAndAttributes,
+	_In_opt_ HANDLE hTemplateFile
+)
+{
+#ifdef MS_DESKTOP
+	return CreateFileW(lpFileName, dwDesiredAccess,
+					   dwShareMode, lpSecurityAttributes,
+		               dwCreationDisposition, dwFlagsAndAttributes,
+		               hTemplateFile);
+#else
+	const DWORD attributeMask = FILE_ATTRIBUTE_ARCHIVE |
+		FILE_ATTRIBUTE_ENCRYPTED |
+		FILE_ATTRIBUTE_HIDDEN |
+		FILE_ATTRIBUTE_INTEGRITY_STREAM |
+		FILE_ATTRIBUTE_NORMAL |
+		FILE_ATTRIBUTE_OFFLINE |
+		FILE_ATTRIBUTE_READONLY |
+		FILE_ATTRIBUTE_SYSTEM |
+		FILE_ATTRIBUTE_TEMPORARY;
+
+	const DWORD flagMask = FILE_FLAG_BACKUP_SEMANTICS |
+		FILE_FLAG_DELETE_ON_CLOSE |
+		FILE_FLAG_NO_BUFFERING |
+		FILE_FLAG_OPEN_NO_RECALL |
+		FILE_FLAG_OPEN_REPARSE_POINT |
+		FILE_FLAG_OPEN_REQUIRING_OPLOCK |
+		FILE_FLAG_OVERLAPPED |
+		FILE_FLAG_POSIX_SEMANTICS |
+		FILE_FLAG_RANDOM_ACCESS |
+		FILE_FLAG_SESSION_AWARE |
+		FILE_FLAG_SEQUENTIAL_SCAN |
+		FILE_FLAG_WRITE_THROUGH;
+
+	const DWORD securityMask = SECURITY_ANONYMOUS |
+		SECURITY_CONTEXT_TRACKING |
+		SECURITY_DELEGATION |
+		SECURITY_EFFECTIVE_ONLY |
+		SECURITY_IDENTIFICATION |
+		SECURITY_IMPERSONATION;
+
+	CREATEFILE2_EXTENDED_PARAMETERS ext;
+	ext.dwSize = sizeof(ext);
+	ext.dwFileAttributes = dwFlagsAndAttributes & attributeMask;
+	ext.dwFileFlags = dwFlagsAndAttributes & flagMask;
+	ext.dwSecurityQosFlags = dwFlagsAndAttributes & securityMask;
+	ext.hTemplateFile = hTemplateFile;
+	ext.lpSecurityAttributes = lpSecurityAttributes;
+
+	return CreateFile2(lpFileName, dwDesiredAccess, dwShareMode, dwCreationDisposition, &ext);
+#endif
+}
+
 /* Below, we *know* that ugo+r is 0444 */
 #if _S_IREAD != 0400
 #error Unsupported C library
@@ -773,29 +844,76 @@ attributes_to_mode(DWORD attr)
 }
 
 void
-_Py_attribute_data_to_stat(BY_HANDLE_FILE_INFORMATION *info, ULONG reparse_tag,
+_Py_attribute_data_to_stat(FILE_BASIC_INFO *basic_info,
+	                       FILE_STANDARD_INFO *standard_info,
+						   ULONG reparse_tag,
                            struct _Py_stat_struct *result)
 {
     memset(result, 0, sizeof(*result));
-    result->st_mode = attributes_to_mode(info->dwFileAttributes);
-    result->st_size = (((__int64)info->nFileSizeHigh)<<32) + info->nFileSizeLow;
-    result->st_dev = info->dwVolumeSerialNumber;
+    result->st_mode = attributes_to_mode(basic_info->FileAttributes);
+	result->st_size = standard_info->EndOfFile.QuadPart;
+	result->st_dev = 0;
     result->st_rdev = result->st_dev;
-    FILE_TIME_to_time_t_nsec(&info->ftCreationTime, &result->st_ctime, &result->st_ctime_nsec);
-    FILE_TIME_to_time_t_nsec(&info->ftLastWriteTime, &result->st_mtime, &result->st_mtime_nsec);
-    FILE_TIME_to_time_t_nsec(&info->ftLastAccessTime, &result->st_atime, &result->st_atime_nsec);
-    result->st_nlink = info->nNumberOfLinks;
-    result->st_ino = (((uint64_t)info->nFileIndexHigh) << 32) + info->nFileIndexLow;
+    LARGE_INTEGER_to_time_t_nsec(&basic_info->CreationTime, &result->st_ctime, &result->st_ctime_nsec);
+    LARGE_INTEGER_to_time_t_nsec(&basic_info->LastWriteTime, &result->st_mtime, &result->st_mtime_nsec);
+    LARGE_INTEGER_to_time_t_nsec(&basic_info->LastAccessTime, &result->st_atime, &result->st_atime_nsec);
+    result->st_nlink = standard_info->NumberOfLinks;
+	result->st_ino = 0;
     if (reparse_tag == IO_REPARSE_TAG_SYMLINK) {
         /* first clear the S_IFMT bits */
         result->st_mode ^= (result->st_mode & S_IFMT);
         /* now set the bits that make this a symlink */
         result->st_mode |= S_IFLNK;
     }
-    result->st_file_attributes = info->dwFileAttributes;
+    result->st_file_attributes = basic_info->FileAttributes;
+}
+
+void
+_Py_find_data_to_stat(WIN32_FIND_DATAW* find_data,
+					 struct _Py_stat_struct* result)
+{
+	memset(result, 0, sizeof(*result));
+	result->st_mode = attributes_to_mode(find_data->dwFileAttributes);
+	FILE_TIME_to_time_t_nsec(&find_data->ftCreationTime, &result->st_ctime, &result->st_ctime_nsec);
+	FILE_TIME_to_time_t_nsec(&find_data->ftLastWriteTime, &result->st_mtime, &result->st_mtime_nsec);
+	FILE_TIME_to_time_t_nsec(&find_data->ftLastAccessTime, &result->st_atime, &result->st_atime_nsec);
+	result->st_size = ((long long)find_data->nFileSizeHigh) << 32 > find_data->nFileSizeLow;
+	result->st_dev = 0;
+	result->st_rdev = result->st_dev;
+	result->st_nlink = 0;
+	result->st_ino = 0;
+	if (find_data->dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT &&
+		find_data->dwReserved0 == IO_REPARSE_TAG_SYMLINK) {
+		/* first clear the S_IFMT bits */
+		result->st_mode ^= (result->st_mode & S_IFMT);
+		/* now set the bits that make this a symlink */
+		result->st_mode |= S_IFLNK;
+	}
+	result->st_file_attributes = find_data->dwFileAttributes;
 }
 #endif
 
+int
+_Py_stat_from_file_handle(HANDLE h, struct _Py_stat_struct* result, BOOL set_ino)
+{
+    FILE_BASIC_INFO basic_info;
+	FILE_STANDARD_INFO standard_info;
+	if (!GetFileInformationByHandleEx(h, FileBasicInfo, &basic_info, sizeof(basic_info))
+		&& !GetFileInformationByHandleEx(h, FileStandardInfo, &standard_info, sizeof(standard_info))) {
+		/* The Win32 error is already set, but we also set errno for
+		   callers who expect it */
+		errno = winerror_to_errno(GetLastError());
+		return FALSE;
+	}
+
+	_Py_attribute_data_to_stat(&basic_info, &standard_info, 0, result);
+	/* specific to fstat() */
+	if (set_ino) {
+		result->st_ino = standard_info.EndOfFile.QuadPart;
+	}
+	return TRUE;
+}
+
 /* Return information about a file.
 
    On POSIX, use fstat().
@@ -812,7 +930,6 @@ int
 _Py_fstat_noraise(int fd, struct _Py_stat_struct *status)
 {
 #ifdef MS_WINDOWS
-    BY_HANDLE_FILE_INFORMATION info;
     HANDLE h;
     int type;
 
@@ -846,17 +963,7 @@ _Py_fstat_noraise(int fd, struct _Py_stat_struct *status)
         return 0;
     }
 
-    if (!GetFileInformationByHandle(h, &info)) {
-        /* The Win32 error is already set, but we also set errno for
-           callers who expect it */
-        errno = winerror_to_errno(GetLastError());
-        return -1;
-    }
-
-    _Py_attribute_data_to_stat(&info, 0, status);
-    /* specific to fstat() */
-    status->st_ino = (((uint64_t)info.nFileIndexHigh) << 32) + info.nFileIndexLow;
-    return 0;
+	return _Py_stat_from_file_handle(h, status, TRUE);
 #else
     return fstat(fd, status);
 #endif
@@ -948,6 +1055,7 @@ static int
 get_inheritable(int fd, int raise)
 {
 #ifdef MS_WINDOWS
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
     HANDLE handle;
     DWORD flags;
 
@@ -967,6 +1075,9 @@ get_inheritable(int fd, int raise)
     }
 
     return (flags & HANDLE_FLAG_INHERIT);
+#else
+	return 0;
+#endif
 #else
     int flags;
 
@@ -1033,21 +1144,25 @@ set_inheritable(int fd, int inheritable, int raise, int *atomic_flag_works)
         return -1;
     }
 
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
     if (inheritable)
         flags = HANDLE_FLAG_INHERIT;
     else
+#endif
         flags = 0;
 
     /* This check can be removed once support for Windows 7 ends. */
 #define CONSOLE_PSEUDOHANDLE(handle) (((ULONG_PTR)(handle) & 0x3) == 0x3 && \
         GetFileType(handle) == FILE_TYPE_CHAR)
 
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
     if (!CONSOLE_PSEUDOHANDLE(handle) &&
         !SetHandleInformation(handle, HANDLE_FLAG_INHERIT, flags)) {
         if (raise)
             PyErr_SetFromWindowsErr(0);
         return -1;
     }
+#endif
 #undef CONSOLE_PSEUDOHANDLE
     return 0;
 
diff --git a/Python/mysnprintf.c b/Python/mysnprintf.c
index a08e249b42..d1d89c948a 100644
--- a/Python/mysnprintf.c
+++ b/Python/mysnprintf.c
@@ -102,3 +102,69 @@ Done:
     return len;
 #undef _PyOS_vsnprintf_EXTRA_SPACE
 }
+
+int
+PyOS_snwprintf(wchar_t *str, size_t size, const wchar_t *format, ...)
+{
+    int rc;
+    va_list va;
+
+    va_start(va, format);
+    rc = PyOS_vsnwprintf(str, size, format, va);
+    va_end(va);
+    return rc;
+}
+
+int
+PyOS_vsnwprintf(wchar_t *str, size_t size, const wchar_t *format, va_list va)
+{
+    int len;  /* # bytes written, excluding \0 */
+#ifdef HAVE_SNPRINTF
+#define _PyOS_vsnprintf_EXTRA_SPACE 1
+#else
+#define _PyOS_vsnprintf_EXTRA_SPACE 512
+    char *buffer;
+#endif
+    assert(str != NULL);
+    assert(size > 0);
+    assert(format != NULL);
+    /* We take a size_t as input but return an int.  Sanity check
+     * our input so that it won't cause an overflow in the
+     * vsnprintf return value or the buffer malloc size.  */
+    if (size > INT_MAX - _PyOS_vsnprintf_EXTRA_SPACE) {
+        len = -666;
+        goto Done;
+    }
+
+#ifdef HAVE_SNPRINTF
+    len = _vsnwprintf(str, size, format, va);
+#else
+    /* Emulate it. */
+    buffer = PyMem_MALLOC(size + _PyOS_vsnprintf_EXTRA_SPACE);
+    if (buffer == NULL) {
+        len = -666;
+        goto Done;
+    }
+
+    len = vsprintf(buffer, format, va);
+    if (len < 0)
+        /* ignore the error */;
+
+    else if ((size_t)len >= size + _PyOS_vsnprintf_EXTRA_SPACE)
+        Py_FatalError("Buffer overflow in PyOS_snprintf/PyOS_vsnprintf");
+
+    else {
+        const size_t to_copy = (size_t)len < size ?
+                                (size_t)len : size - 1;
+        assert(to_copy < size);
+        memcpy(str, buffer, to_copy);
+        str[to_copy] = '\0';
+    }
+    PyMem_FREE(buffer);
+#endif
+Done:
+    if (size > 0)
+        str[size-1] = '\0';
+    return len;
+#undef _PyOS_vsnprintf_EXTRA_SPACE
+}
diff --git a/Python/pytime.c b/Python/pytime.c
index 0e94131741..40b36481cd 100644
--- a/Python/pytime.c
+++ b/Python/pytime.c
@@ -1,6 +1,7 @@
 #include "Python.h"
 #ifdef MS_WINDOWS
 #include <windows.h>
+#include <WinSock2.h>
 #endif
 
 #if defined(__APPLE__)
@@ -671,6 +672,7 @@ pygettimeofday(_PyTime_t *tp, _Py_clock_info_t *info, int raise)
 
         info->implementation = "GetSystemTimeAsFileTime()";
         info->monotonic = 0;
+#ifdef MS_DESKTOP
         ok = GetSystemTimeAdjustment(&timeAdjustment, &timeIncrement,
                                      &isTimeAdjustmentDisabled);
         if (!ok) {
@@ -679,6 +681,7 @@ pygettimeofday(_PyTime_t *tp, _Py_clock_info_t *info, int raise)
         }
         info->resolution = timeIncrement * 1e-7;
         info->adjustable = 1;
+#endif
     }
 
 #else   /* MS_WINDOWS */
@@ -789,6 +792,7 @@ pymonotonic(_PyTime_t *tp, _Py_clock_info_t *info, int raise)
         BOOL isTimeAdjustmentDisabled, ok;
         info->implementation = "GetTickCount64()";
         info->monotonic = 1;
+#ifdef MS_DESKTOP
         ok = GetSystemTimeAdjustment(&timeAdjustment, &timeIncrement,
                                      &isTimeAdjustmentDisabled);
         if (!ok) {
@@ -796,6 +800,7 @@ pymonotonic(_PyTime_t *tp, _Py_clock_info_t *info, int raise)
             return -1;
         }
         info->resolution = timeIncrement * 1e-7;
+#endif
         info->adjustable = 0;
     }
 
diff --git a/Python/sysmodule.c b/Python/sysmodule.c
index b953a00097..37e3b7170a 100644
--- a/Python/sysmodule.c
+++ b/Python/sysmodule.c
@@ -1097,7 +1097,7 @@ sys_getwindowsversion(PyObject *self)
     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.dwMinorVersion));
     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.dwBuildNumber));
     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.dwPlatformId));
-    PyStructSequence_SET_ITEM(version, pos++, PyUnicode_FromString(ver.szCSDVersion));
+    PyStructSequence_SET_ITEM(version, pos++, PyUnicode_FromWideChar(ver.szCSDVersion, wcslen(ver.szCSDVersion)));
     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.wServicePackMajor));
     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.wServicePackMinor));
     PyStructSequence_SET_ITEM(version, pos++, PyLong_FromLong(ver.wSuiteMask));
@@ -1107,6 +1107,7 @@ sys_getwindowsversion(PyObject *self)
     realMinor = ver.dwMinorVersion;
     realBuild = ver.dwBuildNumber;
 
+#if WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP | WINAPI_PARTITION_SYSTEM)
     // GetVersion will lie if we are running in a compatibility mode.
     // We need to read the version info from a system file resource
     // to accurately identify the OS version. If we fail for any reason,
@@ -1126,6 +1127,7 @@ sys_getwindowsversion(PyObject *self)
         }
         PyMem_RawFree(verblock);
     }
+#endif
     PyStructSequence_SET_ITEM(version, pos++, Py_BuildValue("(kkk)",
         realMajor,
         realMinor,
diff --git a/cmake/python-config.cmake b/cmake/python-config.cmake
new file mode 100644
index 0000000000..cdbdc4dcae
--- /dev/null
+++ b/cmake/python-config.cmake
@@ -0,0 +1 @@
+include(${CMAKE_CURRENT_LIST_DIR}/python.cmake)
\ No newline at end of file
