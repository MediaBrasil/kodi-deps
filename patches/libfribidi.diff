diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..b92927c
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,182 @@
+cmake_minimum_required(VERSION 3.15)
+
+project(fribidi C)
+
+set(FRIBIDI_MAJOR_VERSION 0)
+set(FRIBIDI_MINOR_VERSION 19)
+set(FRIBIDI_MICRO_VERSION 7)
+set(FRIBIDI_INTERFACE_VERSION 3)
+set(FRIBIDY_INTERFACE_AGE 6)
+set(FRIBIDI_BINARY_AGE 3)
+
+set(FRIBIDI_VERSION "${FRIBIDI_MAJOR_VERSION}.${FRIBIDI_MINOR_VERSION}.${FRIBIDI_MICRO_VERSION}")
+set(FRIBIDI_CHARSETS 0)
+set(FRIBIDI_USE_GLIB 0)
+set(FRIBIDI_SIZEOF_INT 4)
+
+
+configure_file(
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi-config.h.in
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi-config.h
+  @ONLY
+)
+
+set(COMPRESSION 2)
+
+set(VS_VERSION "Visual Studio 15")
+if (MSVC_TOOLSET_VERSION EQUAL 142)
+  set(VS_VERSION "Visual Studio 16")
+endif()
+add_custom_target(generators
+  COMMAND cmake -G ${VS_VERSION} -A x64 -Thost=x64 -S ${CMAKE_CURRENT_SOURCE_DIR}/gen.tab -B ${CMAKE_CURRENT_BINARY_DIR}/generators
+  COMMAND cmake --build ${CMAKE_CURRENT_BINARY_DIR}/generators --config RelWithDebInfo
+  BYPRODUCTS
+    ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi-unicode-version.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/lib/derived_bidi-type.tab.i
+    ${CMAKE_CURRENT_SOURCE_DIR}/lib/bidi-type.tab.i
+    ${CMAKE_CURRENT_SOURCE_DIR}/lib/joining-type.tab.i
+    ${CMAKE_CURRENT_SOURCE_DIR}/lib/arabic-shaping.tab.i
+    ${CMAKE_CURRENT_SOURCE_DIR}/lib/mirroring.tab.i
+  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
+)
+
+add_library(fribidi STATIC
+  lib/bidi-types.h
+  lib/common.h
+  lib/debug.h
+  lib/fribidi.c
+  lib/fribidi.def
+  lib/fribidi.h
+  lib/fribidi-arabic.h
+  lib/fribidi-arabic.c
+  lib/fribidi-begindecls.h
+  lib/fribidi-bidi.h
+  lib/fribidi-bidi.c
+  lib/fribidi-bidi-types.h
+  lib/fribidi-bidi-types.c
+  lib/fribidi-bidi-types-list.h
+  lib/fribidi-common.h
+  lib/fribidi-config.h
+  lib/fribidi-deprecated.h
+  lib/fribidi-deprecated.c
+  lib/fribidi-enddecls.h
+  lib/fribidi-joining.h
+  lib/fribidi-joining.c
+  lib/fribidi-joining-types.h
+  lib/fribidi-joining-types.c
+  lib/fribidi-joining-types-list.h
+  lib/fribidi-mem.c
+  lib/fribidi-mirroring.h
+  lib/fribidi-mirroring.c
+  lib/fribidi-run.c
+  lib/fribidi-shape.h
+  lib/fribidi-shape.c
+  lib/fribidi-types.h
+  lib/fribidi-unicode.h
+  lib/joining-types.h
+  lib/mem.h
+  lib/run.h
+  )
+add_library(${PROJECT_NAME}::${PROJECT_NAME} ALIAS ${PROJECT_NAME})
+target_include_directories(fribidi
+  PRIVATE
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/lib>
+  INTERFACE
+  $<INSTALL_INTERFACE:include/fribidi>
+  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/lib>
+)
+target_compile_definitions(fribidi
+  PRIVATE
+  _CRT_SECURE_NO_WARNINGS
+  _CRT_NONSTDC_NO_DEPRECATE
+)
+target_compile_options(fribidi
+  PRIVATE
+    /sdl-
+)
+target_link_options(fribidi
+  PRIVATE
+    /debug:full
+)
+add_dependencies(fribidi generators)
+#   gen-unicode
+#   gen-mirroring
+#   gen-arabic-shaping
+#   gen-joining-type
+#   # gen-derived-bidi-type
+#   gen-bidi-type
+#   )
+
+include(CMakePackageConfigHelpers)
+write_basic_package_version_file(
+  ${CMAKE_CURRENT_BINARY_DIR}/fribidi-config-version.cmake
+  VERSION ${FRIBIDI_VERSION}
+  COMPATIBILITY AnyNewerVersion
+)
+
+set_target_properties(fribidi
+  PROPERTIES
+    COMPILE_PDB_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}
+    COMPILE_PDB_NAME fribidi
+    COMPILE_PDB_NAME_DEBUG fribidid
+    OUTPUT_NAME_DEBUG fribidid
+)
+install(FILES
+  ${PROJECT_BINARY_DIR}/RelWithDebInfo/fribidi.pdb
+  DESTINATION lib
+  CONFIGURATIONS RelWithDebInfo
+)
+install(FILES
+  ${PROJECT_BINARY_DIR}/Debug/fribidid.pdb
+  DESTINATION lib
+  CONFIGURATIONS Debug
+)
+
+install(TARGETS fribidi EXPORT fribidi
+  RUNTIME DESTINATION bin
+  ARCHIVE DESTINATION lib
+  LIBRARY DESTINATION lib)
+
+
+install(FILES
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi-arabic.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi-begindecls.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi-bidi.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi-bidi-types.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi-bidi-types-list.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi-common.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi-config.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi-deprecated.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi-enddecls.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi-flags.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi-joining.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi-joining-types.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi-joining-types-list.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi-mirroring.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi-shape.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi-types.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi-unicode.h
+  ${CMAKE_CURRENT_SOURCE_DIR}/lib/fribidi-unicode-version.h
+  DESTINATION include/fribidi)
+
+install(EXPORT fribidi
+  FILE
+    fribidi.cmake
+  NAMESPACE
+    fribidi::
+  DESTINATION
+    lib/cmake/fribidi
+)
+install(
+  FILES
+    cmake/fribidi-config.cmake
+    ${CMAKE_CURRENT_BINARY_DIR}/fribidi-config-version.cmake
+  DESTINATION
+    lib/cmake/fribidi
+)
+export(TARGETS fribidi
+  FILE
+  ${CMAKE_CURRENT_BINARY_DIR}/fribidi-config.cmake
+  NAMESPACE fribidi::
+)
diff --git a/cmake/fribidi-config.cmake b/cmake/fribidi-config.cmake
new file mode 100644
index 0000000..f7cf2c0
--- /dev/null
+++ b/cmake/fribidi-config.cmake
@@ -0,0 +1 @@
+include(${CMAKE_CURRENT_LIST_DIR}/fribidi.cmake)
diff --git a/gen.tab/CMakeLists.txt b/gen.tab/CMakeLists.txt
new file mode 100644
index 0000000..5a651b7
--- /dev/null
+++ b/gen.tab/CMakeLists.txt
@@ -0,0 +1,117 @@
+cmake_minimum_required(VERSION 3.15)
+project(fribidi_generators C)
+
+# ${CMAKE_CURRENT_SOURCE_DIR} is gen.tab
+set(ROOT ${CMAKE_CURRENT_SOURCE_DIR}/..)
+set(COMPRESSION 2)
+
+add_executable(gen-unicode-version
+  ${ROOT}/gen.tab/gen-unicode-version.c)
+target_include_directories(gen-unicode-version PUBLIC
+  $<BUILD_INTERFACE:${ROOT}/lib>
+)
+
+target_compile_definitions(gen-unicode-version
+  PRIVATE
+  _CRT_SECURE_NO_WARNINGS
+  _CRT_NONSTDC_NO_DEPRECATE
+)
+add_custom_target(gen-unicode ALL
+  COMMAND gen-unicode-version
+  ${ROOT}/gen.tab/unidata/ReadMe.txt >
+  ${ROOT}/lib/fribidi-unicode-version.h
+  WORKING_DIRECTORY ${ROOT}/lib
+  BYPRODUCTS ${ROOT}/lib/fribidi-unicode-version.h
+  )
+
+add_executable(gen-bidi-type-tab
+  ${ROOT}/gen.tab/gen-bidi-type-tab.c
+  ${ROOT}/gen.tab/packtab.h
+  ${ROOT}/gen.tab/packtab.c)
+target_include_directories(gen-bidi-type-tab PUBLIC
+  $<BUILD_INTERFACE:${ROOT}/lib>
+)
+target_compile_definitions(gen-bidi-type-tab
+  PRIVATE
+  _CRT_SECURE_NO_WARNINGS
+  _CRT_NONSTDC_NO_DEPRECATE
+)
+add_dependencies(gen-bidi-type-tab gen-unicode)
+
+add_custom_target(gen-derived-bidi-type #ALL
+  COMMAND gen-bidi-type-tab
+  ${COMPRESSION}
+  ${ROOT}/gen.tab/unidata/DerivedBidiClass.txt >
+  ${ROOT}/lib/derived_bidi-type.tab.i
+  WORKING_DIRECTORY ${ROOT}/lib
+  BYPRODUCTS ${ROOT}/lib/derived_bidi-type.tab.i)
+
+add_custom_target(gen-bidi-type ALL
+  COMMAND gen-bidi-type-tab
+  ${COMPRESSION}
+  ${ROOT}/gen.tab/unidata/UnicodeData.txt >
+  ${ROOT}/lib/bidi-type.tab.i
+  WORKING_DIRECTORY ${ROOT}/lib
+  BYPRODUCTS ${ROOT}/lib/bidi-type.tab.i)
+
+add_executable(gen-joining-type-tab
+  ${ROOT}/gen.tab/packtab.h
+  ${ROOT}/gen.tab/packtab.c
+  ${ROOT}/gen.tab/gen-joining-type-tab.c)
+target_include_directories(gen-joining-type-tab PUBLIC
+  $<BUILD_INTERFACE:${ROOT}/lib>
+)
+target_compile_definitions(gen-joining-type-tab
+  PRIVATE
+  _CRT_SECURE_NO_WARNINGS
+  _CRT_NONSTDC_NO_DEPRECATE
+)
+add_dependencies(gen-joining-type-tab gen-unicode)
+
+add_custom_target(gen-joining-type ALL
+  COMMAND gen-joining-type-tab
+  ${COMPRESSION}
+  ${ROOT}/gen.tab/unidata/UnicodeData.txt
+  ${ROOT}/gen.tab/unidata/ArabicShaping.txt >
+  ${ROOT}/lib/joining-type.tab.i
+  BYPRODUCTS ${ROOT}/lib/joining-type.tab.i)
+
+add_executable(gen-arabic-shaping-tab
+  ${ROOT}/gen.tab/gen-arabic-shaping-tab.c)
+target_include_directories(gen-arabic-shaping-tab PUBLIC
+  $<BUILD_INTERFACE:${ROOT}/lib>
+)
+target_compile_definitions(gen-arabic-shaping-tab
+  PRIVATE
+  _CRT_SECURE_NO_WARNINGS
+  _CRT_NONSTDC_NO_DEPRECATE
+)
+add_dependencies(gen-arabic-shaping-tab gen-unicode)
+
+add_custom_target(gen-arabic-shaping ALL
+  COMMAND gen-arabic-shaping-tab
+  ${COMPRESSION}
+  ${ROOT}/gen.tab/unidata/UnicodeData.txt >
+  ${ROOT}/lib/arabic-shaping.tab.i
+  BYPRODUCTS ${ROOT}/lib/arabic-shaping.tab.i)
+
+add_executable(gen-mirroring-tab
+  ${ROOT}/gen.tab/packtab.h
+  ${ROOT}/gen.tab/packtab.c
+  ${ROOT}/gen.tab/gen-mirroring-tab.c)
+target_include_directories(gen-mirroring-tab PUBLIC
+  $<BUILD_INTERFACE:${ROOT}/lib>
+)
+target_compile_definitions(gen-mirroring-tab
+  PRIVATE
+  _CRT_SECURE_NO_WARNINGS
+  _CRT_NONSTDC_NO_DEPRECATE
+)
+add_dependencies(gen-mirroring-tab gen-unicode)
+
+add_custom_target(gen-mirroring ALL
+  COMMAND gen-mirroring-tab
+  ${COMPRESSION}
+  ${ROOT}/gen.tab/unidata/BidiMirroring.txt >
+  ${ROOT}/lib/mirroring.tab.i
+  BYPRODUCTS ${ROOT}/lib/mirroring.tab.i)
\ No newline at end of file
diff --git a/gen.tab/gen-arabic-shaping-tab.c b/gen.tab/gen-arabic-shaping-tab.c
index fc21db2..328af3f 100644
--- a/gen.tab/gen-arabic-shaping-tab.c
+++ b/gen.tab/gen-arabic-shaping-tab.c
@@ -36,20 +36,10 @@
 #include <fribidi-unicode.h>
 
 #include <stdio.h>
-#if STDC_HEADERS+0
 # include <stdlib.h>
 # include <stddef.h>
-#else
-# if HAVE_STDLIB_H
-#  include <stdlib.h>
-# endif
-#endif
-#if HAVE_STRING_H+0
-# if !STDC_HEADERS && HAVE_MEMORY_H
 #  include <memory.h>
-# endif
 # include <string.h>
-#endif
 #if HAVE_STRINGS_H+0
 # include <strings.h>
 #endif
diff --git a/gen.tab/gen-bidi-type-tab.c b/gen.tab/gen-bidi-type-tab.c
index aacd768..00eb97f 100644
--- a/gen.tab/gen-bidi-type-tab.c
+++ b/gen.tab/gen-bidi-type-tab.c
@@ -36,20 +36,10 @@
 #include <fribidi-unicode.h>
 
 #include <stdio.h>
-#if STDC_HEADERS+0
 # include <stdlib.h>
 # include <stddef.h>
-#else
-# if HAVE_STDLIB_H
-#  include <stdlib.h>
-# endif
-#endif
-#if HAVE_STRING_H+0
-# if !STDC_HEADERS && HAVE_MEMORY_H
 #  include <memory.h>
-# endif
 # include <string.h>
-#endif
 #if HAVE_STRINGS_H+0
 # include <strings.h>
 #endif
diff --git a/gen.tab/gen-joining-type-tab.c b/gen.tab/gen-joining-type-tab.c
index 809d113..ebfd3b6 100644
--- a/gen.tab/gen-joining-type-tab.c
+++ b/gen.tab/gen-joining-type-tab.c
@@ -36,20 +36,10 @@
 #include <fribidi-unicode.h>
 
 #include <stdio.h>
-#if STDC_HEADERS+0
 # include <stdlib.h>
 # include <stddef.h>
-#else
-# if HAVE_STDLIB_H
-#  include <stdlib.h>
-# endif
-#endif
-#if HAVE_STRING_H+0
-# if !STDC_HEADERS && HAVE_MEMORY_H
 #  include <memory.h>
-# endif
 # include <string.h>
-#endif
 #if HAVE_STRINGS_H+0
 # include <strings.h>
 #endif
diff --git a/gen.tab/gen-mirroring-tab.c b/gen.tab/gen-mirroring-tab.c
index 4256d36..04c0005 100644
--- a/gen.tab/gen-mirroring-tab.c
+++ b/gen.tab/gen-mirroring-tab.c
@@ -36,20 +36,10 @@
 #include <fribidi-unicode.h>
 
 #include <stdio.h>
-#if STDC_HEADERS+0
 # include <stdlib.h>
 # include <stddef.h>
-#else
-# if HAVE_STDLIB_H
-#  include <stdlib.h>
-# endif
-#endif
-#if HAVE_STRING_H+0
-# if !STDC_HEADERS && HAVE_MEMORY_H
 #  include <memory.h>
-# endif
 # include <string.h>
-#endif
 #if HAVE_STRINGS_H+0
 # include <strings.h>
 #endif
diff --git a/gen.tab/gen-unicode-version.c b/gen.tab/gen-unicode-version.c
index ea9a9b5..d3e5207 100644
--- a/gen.tab/gen-unicode-version.c
+++ b/gen.tab/gen-unicode-version.c
@@ -34,20 +34,10 @@
 #include <common.h>
 
 #include <stdio.h>
-#if STDC_HEADERS+0
 # include <stdlib.h>
 # include <stddef.h>
-#else
-# if HAVE_STDLIB_H
-#  include <stdlib.h>
-# endif
-#endif
-#if HAVE_STRING_H+0
-# if !STDC_HEADERS && HAVE_MEMORY_H
 #  include <memory.h>
-# endif
 # include <string.h>
-#endif
 #if HAVE_STRINGS_H+0
 # include <strings.h>
 #endif
diff --git a/gen.tab/packtab.c b/gen.tab/packtab.c
index 45f8658..f661f2e 100644
--- a/gen.tab/packtab.c
+++ b/gen.tab/packtab.c
@@ -30,20 +30,10 @@
 #endif /* HAVE_CONFIG_H */
 
 #include <stdio.h>
-#if STDC_HEADERS+0
 # include <stdlib.h>
 # include <stddef.h>
-#else
-# if HAVE_STDLIB_H
-#  include <stdlib.h>
-# endif
-#endif
-#if HAVE_STRING_H+0
-# if !STDC_HEADERS && HAVE_MEMORY_H
 #  include <memory.h>
-# endif
 # include <string.h>
-#endif
 #if HAVE_STRINGS_H+0
 # include <strings.h>
 #endif
@@ -55,7 +45,7 @@ static int n, a, max_depth, digits, tab_width, per_row;
 static long N;
 signed int def_key;
 static uni_table temp, x, perm, *tab;
-static long pow[22], cluster, cmpcluster;
+static long pow_of_two[22], cluster, cmpcluster;
 static const char *const *name, *key_type_name, *table_name, *macro_name;
 static FILE *f;
 
@@ -71,22 +61,22 @@ most_binary (
   if (min == max)
     return max;
 
-  for (i = 21; max < pow[i]; i--)
+  for (i = 21; max < pow_of_two[i]; i--)
     ;
   ii = i;
-  while (i && !((min ^ max) & pow[i]))
+  while (i && !((min ^ max) & pow_of_two[i]))
     i--;
 
   if (ii == i)
     {
       /* min is less than half of max */
-      for (i = 21 - 1; min < pow[i]; i--)
+      for (i = 21 - 1; min < pow_of_two[i]; i--)
 	;
       i++;
-      return pow[i];
+      return pow_of_two[i];
     }
 
-  return max & (pow[i] - 1);
+  return max & (pow_of_two[i] - 1);
 }
 
 static void
@@ -97,9 +87,9 @@ init (
   register int i;
 
   /* initialize powers of two */
-  pow[0] = 1;
+  pow_of_two[0] = 1;
   for (i = 1; i <= 21; i++)
-    pow[i] = pow[i - 1] << 1;
+    pow_of_two[i] = pow_of_two[i - 1] << 1;
 
   /* reduce number of elements to get a more binary number */
   {
@@ -114,13 +104,13 @@ init (
     N = most_binary (essen, N);
   }
 
-  for (n = 21; N % pow[n]; n--)
+  for (n = 21; N % pow_of_two[n]; n--)
     ;
   digits = (n + 3) / 4;
   for (i = 6; i; i--)
-    if (pow[i] * (tab_width + 1) < 80)
+    if (pow_of_two[i] * (tab_width + 1) < 80)
       break;
-  per_row = pow[i];
+  per_row = pow_of_two[i];
 }
 
 static int
@@ -180,7 +170,7 @@ bt (
   for (i = 1 - t[lev] % 2; i <= nn + (t[lev] >> nn) % 2; i++)
     {
       nn -= (p[lev] = i);
-      clusters[lev] = cluster = (i && nn >= 0) ? pow[i] : t[lev];
+      clusters[lev] = cluster = (i && nn >= 0) ? pow_of_two[i] : t[lev];
       cmpcluster = cluster + 1;
 
       t[lev + 1] = (t[lev] - 1) / cluster + 1;
@@ -305,7 +295,7 @@ write_array (
     {
       int kk, jj;
       fprintf (f, "\n#define %sLev%d_%0*lX 0x%0X", table_name,
-	       best_lev - lev - 1, digits, x[i] * pow[n - nn], ofs);
+	       best_lev - lev - 1, digits, x[i] * pow_of_two[n - nn], ofs);
       kk = x[i] * cluster;
       if (!lev)
 	if (name)
@@ -326,9 +316,9 @@ write_array (
 	for (j = 0; j < cluster; j++, kk++)
 	  fprintf (f, "\n  %sLev%d_%0*lX,  /* %0*lX..%0*lX */", table_name,
 		   best_lev - lev, digits,
-		   tab[lev][kk] * pow[n - nn - best_p[lev]], digits,
-		   x[i] * pow[n - nn] + j * pow[n - nn - best_p[lev]], digits,
-		   x[i] * pow[n - nn] + (j + 1) * pow[n - nn - best_p[lev]] -
+		   tab[lev][kk] * pow_of_two[n - nn - best_p[lev]], digits,
+		   x[i] * pow_of_two[n - nn] + j * pow_of_two[n - nn - best_p[lev]], digits,
+		   x[i] * pow_of_two[n - nn] + (j + 1) * pow_of_two[n - nn - best_p[lev]] -
 		   1);
       ofs += cluster;
       jj = i;
@@ -372,7 +362,7 @@ write_source (
       if (j != 0)
 	fprintf (f, " >> %d", j);
       if (i)
-	fprintf (f, " & 0x%02lx) +", pow[best_p[best_lev - 1 - i]] - 1);
+	fprintf (f, " & 0x%02lx) +", pow_of_two[best_p[best_lev - 1 - i]] - 1);
       j += best_p[best_lev - 1 - i];
     }
   fprintf (f, ")");
diff --git a/gen.tab/unidata/ReadMe.txt b/gen.tab/unidata/ReadMe.txt
index 370cbd0..7b09853 100644
--- a/gen.tab/unidata/ReadMe.txt
+++ b/gen.tab/unidata/ReadMe.txt
@@ -10,6 +10,6 @@
 #
 
 This directory contains final data files
-for the Unicode Character Database (UCD) for Unicode 6.2.0.
+for the Unicode Character Database (UCD) for Version 6.2.0.
 
 
diff --git a/lib/common.h b/lib/common.h
index 3e484b0..8a64089 100644
--- a/lib/common.h
+++ b/lib/common.h
@@ -102,14 +102,10 @@
 /* fribidi_malloc and fribidi_free should be used instead of malloc and free. 
  * No need to include any headers. */
 #ifndef fribidi_malloc
-# if HAVE_STDLIB_H
 #  ifndef __FRIBIDI_DOC
 #   include <stdlib.h>
 #  endif /* __FRIBIDI_DOC */
 #  define fribidi_malloc malloc
-# else /* !HAVE_STDLIB_H */
-#  define fribidi_malloc (void *) malloc
-# endif	/* !HAVE_STDLIB_H */
 # define fribidi_free free
 #else /* fribidi_malloc */
 # ifndef fribidi_free
@@ -117,12 +113,8 @@
 # endif	/* !fribidi_free */
 #endif /* fribidi_malloc */
 
-#if HAVE_STRING_H+0
-# if !STDC_HEADERS && HAVE_MEMORY_H
 #  include <memory.h>
-# endif
 # include <string.h>
-#endif
 #if HAVE_STRINGS_H+0
 # include <strings.h>
 #endif
@@ -163,11 +155,7 @@
 # define FRIBIDI_EMPTY_STMT FRIBIDI_BEGIN_STMT (void) 0; FRIBIDI_END_STMT
 #endif /* !FRIBIDI_EMPTY_STMT */
 
-#if HAVE_STRINGIZE+0
 # define STRINGIZE(symbol) #symbol
-#else /* !HAVE_STRINGIZE */
-# define STRINGIZE(symbol) (no stringize operator available)
-#endif /* !HAVE_STRINGIZE */
 
 /* As per recommendation of GNU Coding Standards. */
 #ifndef _GNU_SOURCE
diff --git a/lib/fribidi-arabic.c b/lib/fribidi-arabic.c
index 9e95de4..37acbc5 100644
--- a/lib/fribidi-arabic.c
+++ b/lib/fribidi-arabic.c
@@ -33,9 +33,7 @@
 
 #include "common.h"
 
-#if HAVE_STDLIB_H+0
 # include <stdlib.h>
-#endif
 
 
 #include <fribidi-arabic.h>
diff --git a/lib/fribidi-config.h.in b/lib/fribidi-config.h.in
index 7e10261..89d9193 100644
--- a/lib/fribidi-config.h.in
+++ b/lib/fribidi-config.h.in
@@ -21,6 +21,6 @@
 #define FRIBIDI_USE_GLIB @FRIBIDI_USE_GLIB@
 
 /* The size of a `int', as computed by sizeof. */
-#define FRIBIDI_SIZEOF_INT @SIZEOF_INT@
+#define FRIBIDI_SIZEOF_INT @FRIBIDI_SIZEOF_INT@
 
 #endif /* FRIBIDI_CONFIG_H */
